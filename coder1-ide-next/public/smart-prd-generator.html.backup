<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Smart Repository Patterns - Generate PRDs from Proven Startup Success Patterns</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/js/prd-generator.js?v=2.0"></script>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        /* CRITICAL: Reset globals.css interference - MUST BE FIRST */
        body, html {
            color: #1f2937 !important;
            background: linear-gradient(to bottom right, #eff6ff, #ffffff, #fdf4ff) !important;
        }
        
        * {
            color: inherit !important;
        }
        
        .glassmorphism {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }
        .gradient-text {
            background: linear-gradient(135deg, #6366f1, #ec4899, #10b981);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        .pattern-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .pattern-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }
        .hidden {
            display: none !important;
        }
        
        /* MAXIMUM SPECIFICITY - Target ALL form elements */
        body input, body textarea, body select,
        html input, html textarea, html select,
        #questionnaire-section input,
        #questionnaire-section textarea,
        #questionnaire-section select,
        div input, div textarea, div select {
            color: #1f2937 !important;
            background-color: #ffffff !important;
            -webkit-text-fill-color: #1f2937 !important;
        }

        /* Target ALL buttons with maximum specificity */
        body button, html button,
        .question-option, button.question-option,
        #questionnaire-section button,
        div button {
            color: #1f2937 !important;
            -webkit-text-fill-color: #1f2937 !important;
        }

        .question-option:hover {
            color: #1f2937 !important;
        }

        /* All text elements in questionnaire */
        #question-title, 
        #questionnaire-section h2,
        #questionnaire-section h3,
        #questionnaire-section span,
        #questionnaire-section p,
        #questionnaire-section div {
            color: #1f2937 !important;
        }

        /* Navigation buttons with specific styling */
        #prevBtn {
            color: #4f46e5 !important;
            border-color: #4f46e5 !important;
        }
        
        #prevBtn:hover {
            color: #ffffff !important;
            background-color: #4f46e5 !important;
        }

        #nextBtn {
            color: #ffffff !important;
        }

        /* Pattern cards and general text */
        .pattern-card h3,
        .pattern-card p,
        .pattern-card span,
        section h1, section h2, section h3,
        section p, section span {
            color: #1f2937 !important;
        }
        
        /* Question content area */
        #question-content,
        #question-content * {
            color: #1f2937 !important;
        }
        
        /* Ensure placeholder text is visible */
        input::placeholder, 
        textarea::placeholder {
            color: #6b7280 !important;
            opacity: 1 !important;
            -webkit-text-fill-color: #6b7280 !important;
        }
        
        /* Focus states */
        input:focus, textarea:focus {
            color: #1f2937 !important;
            background-color: #ffffff !important;
            outline-color: #4f46e5 !important;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 via-white to-purple-50 min-h-screen">
    <!-- Navigation -->
    <nav class="fixed top-0 w-full z-50 glassmorphism">
        <div class="container mx-auto px-6">
            <div class="flex justify-between items-center py-4">
                <div class="flex items-center space-x-2">
                    <div class="w-8 h-8 bg-gradient-to-br from-indigo-500 to-pink-500 rounded-lg flex items-center justify-center">
                        <span class="text-white font-bold">S</span>
                    </div>
                    <span class="text-xl font-bold gradient-text">Smart Patterns</span>
                </div>
                <div class="flex items-center space-x-4">
                    <button id="navBrowseBtn" class="text-gray-600 hover:text-indigo-500 transition-colors">
                        Browse Patterns
                    </button>
                    <button onclick="window.location.href='/ide'" class="bg-gradient-to-r from-indigo-500 to-pink-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all">
                        Launch Coder1 →
                    </button>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Container -->
    <div class="pt-20 pb-16">
        <!-- Hero Section -->
        <section id="hero-section" class="container mx-auto px-6 py-16 text-center">
            <div class="inline-flex items-center space-x-2 bg-gradient-to-r from-indigo-100 to-pink-100 px-4 py-2 rounded-full mb-6">
                <span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                <span class="text-sm font-medium text-gray-600">Free Professional PRD Generator</span>
            </div>
            
            <h1 class="text-5xl md:text-6xl font-bold mb-6 text-center">
                Build Like the
                <br>
                <span class="gradient-text">Best Startups</span>
            </h1>
            
            <p class="text-xl text-gray-600 mb-8 max-w-3xl mx-auto">
                Generate professional PRDs using proven patterns from Notion, Stripe, GitHub, and other successful companies. 
                Get real architectural guidance and seamless handoff to Coder1 for implementation.
            </p>
            
            <div class="flex flex-col sm:flex-row gap-4 justify-center mb-12">
                <button id="generateBtn" class="bg-gradient-to-r from-indigo-500 to-pink-500 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:shadow-xl transition-all transform hover:scale-105">
                    🚀 Generate My PRD (Free)
                </button>
                <button id="browseBtn" class="border-2 border-indigo-500 text-indigo-500 px-8 py-4 rounded-lg text-lg font-semibold hover:bg-indigo-500 hover:text-white transition-all">
                    📋 Browse Patterns
                </button>
            </div>
            
            <!-- Trust Indicators -->
            <div class="flex justify-center items-center space-x-8 text-sm text-gray-500">
                <div class="flex items-center space-x-2">
                    <span class="w-3 h-3 bg-green-500 rounded-full"></span>
                    <span>8 Proven Patterns</span>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="w-3 h-3 bg-green-500 rounded-full"></span>
                    <span>70%+ Success Rate</span>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="w-3 h-3 bg-green-500 rounded-full"></span>
                    <span>5-Page Professional PRDs</span>
                </div>
            </div>
        </section>

        <!-- Pattern Selection (Hidden by default) -->
        <section id="pattern-section" class="container mx-auto px-6 py-16 hidden">
            <div class="text-center mb-12">
                <h2 class="text-3xl font-bold text-gray-900 mb-4">Choose Your Success Pattern</h2>
                <p class="text-lg text-gray-600">Select the pattern that best matches your startup vision</p>
            </div>
            
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div data-pattern="stripe" class="pattern-card bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">Stripe-style SaaS</h3>
                        <span class="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            68% Success
                        </span>
                    </div>
                    <p class="text-gray-600 mb-4">Payment processing and developer-first SaaS platform</p>
                    <div class="flex items-center justify-between text-sm">
                        <span class="text-gray-500">Time: 10.5 months</span>
                        <span class="font-semibold text-red-500">HIGH</span>
                    </div>
                </div>

                <div data-pattern="notion" class="pattern-card bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">Notion-style Platform</h3>
                        <span class="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            73% Success
                        </span>
                    </div>
                    <p class="text-gray-600 mb-4">All-in-one workspace with blocks-based content creation</p>
                    <div class="flex items-center justify-between text-sm">
                        <span class="text-gray-500">Time: 8.2 months</span>
                        <span class="font-semibold text-yellow-500">MEDIUM</span>
                    </div>
                </div>

                <div data-pattern="github" class="pattern-card bg-white rounded-xl shadow-lg p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-xl font-bold text-gray-900">GitHub-style DevTools</h3>
                        <span class="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
                            75% Success
                        </span>
                    </div>
                    <p class="text-gray-600 mb-4">Version control and developer collaboration platform</p>
                    <div class="flex items-center justify-between text-sm">
                        <span class="text-gray-500">Time: 9.3 months</span>
                        <span class="font-semibold text-red-500">HIGH</span>
                    </div>
                </div>
            </div>
            
            <div class="mt-8 text-center">
                <button id="backToHomeBtn" class="text-gray-600 hover:text-gray-900">
                    ← Back to Home
                </button>
            </div>
        </section>

        <!-- Questionnaire Interface (Hidden by default) -->
        <section id="questionnaire-section" class="container mx-auto px-6 py-16 max-w-3xl hidden">
            <!-- Progress Bar -->
            <div class="mb-8">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-bold text-gray-900">Smart Questionnaire</h2>
                    <span class="text-sm text-gray-500">
                        Question <span id="current-question">1</span> of 6
                    </span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                    <div id="progress-bar" class="bg-gradient-to-r from-indigo-500 to-pink-500 h-2 rounded-full transition-all duration-500" style="width: 16.66%"></div>
                </div>
            </div>

            <!-- Question Card -->
            <div class="bg-white rounded-2xl shadow-xl p-8 mb-6">
                <h3 id="question-title" class="text-xl font-semibold mb-4">Describe the application you'd like to build:</h3>
                <div id="question-content">
                    <!-- Content will be dynamically populated -->
                    <textarea id="text-input" class="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-indigo-500 focus:outline-none transition-all" style="color: #1f2937 !important; background-color: #ffffff !important;" rows="4" placeholder="Describe your application idea in detail..."></textarea>
                </div>
            </div>

            <!-- Navigation Buttons -->
            <div class="flex justify-between">
                <button id="prevBtn" class="px-6 py-3 text-indigo-500 border border-indigo-500 rounded-lg hover:bg-indigo-500 hover:text-white transition-all">
                    ← Previous
                </button>
                <button id="nextBtn" class="ml-auto px-8 py-3 bg-gradient-to-r from-indigo-500 to-pink-500 text-white rounded-lg hover:shadow-lg transition-all">
                    Next Question →
                </button>
            </div>
            
            <div class="mt-8 text-center">
                <button id="backToPatternsBtn" class="text-gray-600 hover:text-gray-900">
                    ← Back to Patterns
                </button>
            </div>
        </section>

        <!-- PRD Results Section (Hidden by default) -->
        <section id="prd-results-section" class="container mx-auto px-6 py-16 max-w-6xl hidden">
            <!-- Header -->
            <div class="text-center mb-8">
                <div class="inline-flex items-center space-x-2 bg-gradient-to-r from-green-100 to-emerald-100 px-4 py-2 rounded-full mb-4">
                    <span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></span>
                    <span class="text-sm font-medium text-gray-600">PRD Generated Successfully</span>
                </div>
                <h2 class="text-3xl font-bold text-gray-900 mb-4">Your Professional PRD is Ready!</h2>
                <p class="text-lg text-gray-600 mb-6">Comprehensive Product Requirements Document with 15 detailed sections</p>
                
                <!-- Export Buttons -->
                <div class="flex gap-3 justify-center mb-6">
                    <button onclick="exportToMarkdown()" class="px-4 py-2 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition-all">
                        📝 Export as Markdown
                    </button>
                    <button onclick="copyToClipboard()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all">
                        📋 Copy to Clipboard
                    </button>
                    <button onclick="window.print()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all">
                        🖨️ Print PRD
                    </button>
                </div>
            </div>

            <!-- Loading State -->
            <div id="prd-loading" class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
                <p class="mt-4 text-gray-600">Generating your comprehensive PRD...</p>
            </div>

            <!-- PRD Content Container -->
            <div id="prd-content" class="hidden space-y-8">
                <!-- Section 1: Executive Summary -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">📋 Executive Summary</h3>
                    <div id="executive-summary" class="text-gray-600"></div>
                </div>

                <!-- Section 2: Market Analysis -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">📊 Market Analysis</h3>
                    <div id="market-analysis" class="text-gray-600"></div>
                </div>

                <!-- Section 3: User Personas -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">👥 User Personas</h3>
                    <div id="user-personas" class="text-gray-600"></div>
                </div>

                <!-- Section 4: Core Features -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🚀 Core Features & User Stories</h3>
                    <div id="core-features" class="text-gray-600"></div>
                </div>

                <!-- Section 5: Technical Architecture -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🏗️ Technical Architecture</h3>
                    <div id="technical-architecture" class="text-gray-600"></div>
                </div>

                <!-- Section 6: Data Models -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🗄️ Data Models</h3>
                    <div id="data-models" class="text-gray-600"></div>
                </div>

                <!-- Section 7: API Specifications -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🔌 API Specifications</h3>
                    <div id="api-specifications" class="text-gray-600"></div>
                </div>

                <!-- Section 8: User Flows -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🔄 User Flows</h3>
                    <div id="user-flows" class="text-gray-600"></div>
                </div>

                <!-- Section 9: Security Requirements -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🔐 Security Requirements</h3>
                    <div id="security-requirements" class="text-gray-600"></div>
                </div>

                <!-- Section 10: Performance Requirements -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">⚡ Performance Requirements</h3>
                    <div id="performance-requirements" class="text-gray-600"></div>
                </div>

                <!-- Section 11: Development Roadmap -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">📅 Development Roadmap</h3>
                    <div id="development-roadmap" class="text-gray-600"></div>
                </div>

                <!-- Section 12: Success Metrics -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">📈 Success Metrics</h3>
                    <div id="success-metrics" class="text-gray-600"></div>
                </div>

                <!-- Section 13: Risk Analysis -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">⚠️ Risk Analysis</h3>
                    <div id="risk-analysis" class="text-gray-600"></div>
                </div>

                <!-- Section 14: Testing Strategy -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🧪 Testing Strategy</h3>
                    <div id="testing-strategy" class="text-gray-600"></div>
                </div>

                <!-- Section 15: Post-Launch Strategy -->
                <div class="bg-white rounded-2xl shadow-xl p-8">
                    <h3 class="text-2xl font-bold mb-4 text-gray-900">🚀 Post-Launch Strategy</h3>
                    <div id="post-launch-strategy" class="text-gray-600"></div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
                <button onclick="downloadPRD()" class="bg-gradient-to-r from-indigo-500 to-pink-500 text-white px-8 py-4 rounded-lg text-lg font-semibold hover:shadow-xl transition-all">
                    📄 Download PRD (PDF)
                </button>
                <button onclick="window.location.href='/ide'" class="border-2 border-indigo-500 text-indigo-500 px-8 py-4 rounded-lg text-lg font-semibold hover:bg-indigo-500 hover:text-white transition-all">
                    🚀 Start Building with Coder1
                </button>
            </div>

            <div class="mt-8 text-center">
                <button id="startOverBtn" class="text-gray-600 hover:text-gray-900">
                    ← Start Over with New Project
                </button>
            </div>
        </section>
    </div>

    <script>
        // IMMEDIATE FIX: Apply styles as soon as DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // Force dark text on all elements immediately
            const urgentFix = () => {
                document.querySelectorAll('input, textarea, select, button').forEach(el => {
                    el.style.setProperty('color', '#1f2937', 'important');
                    if (el.tagName !== 'BUTTON' || !el.style.background?.includes('gradient')) {
                        if (el.tagName !== 'BUTTON') {
                            el.style.setProperty('background-color', '#ffffff', 'important');
                        }
                    }
                });
            };
            urgentFix();
            setTimeout(urgentFix, 10);
            setTimeout(urgentFix, 100);
        });
        
        // Page state
        let currentQuestion = 1;
        const totalQuestions = 6;
        let selectedAnswers = {};
        let selectedPatternType = 'notion'; // Track selected pattern
        let generatedPRD = null; // Store generated PRD for export

        // Question data
        const questions = [
            {
                question: "Describe the application you'd like to build:",
                options: [], // Free text input
                type: "text"
            },
            {
                question: "What type of application are you building?",
                options: ["SaaS Platform", "E-commerce Platform", "Developer Tools", "Social Platform"]
            },
            {
                question: "Who is your target audience?",
                options: ["Developers", "Business Users", "Consumers", "Enterprise"]
            },
            {
                question: "What's your primary monetization strategy?",
                options: ["Subscription (Monthly/Annual)", "One-time Purchase", "Freemium Model", "Transaction Fees"]
            },
            {
                question: "What's your estimated timeline to launch?",
                options: ["1-3 months", "3-6 months", "6-12 months", "12+ months"]
            },
            {
                question: "What's your team size?",
                options: ["Solo Founder", "2-5 people", "5-10 people", "10+ people"]
            }
        ];

        // Get all elements
        const heroSection = document.getElementById('hero-section');
        const patternSection = document.getElementById('pattern-section');
        const questionnaireSection = document.getElementById('questionnaire-section');
        const prdResultsSection = document.getElementById('prd-results-section');
        
        // Get all buttons
        const generateBtn = document.getElementById('generateBtn');
        const browseBtn = document.getElementById('browseBtn');
        const navBrowseBtn = document.getElementById('navBrowseBtn');
        const backToHomeBtn = document.getElementById('backToHomeBtn');
        const backToPatternsBtn = document.getElementById('backToPatternsBtn');
        const prevBtn = document.getElementById('prevBtn');
        const nextBtn = document.getElementById('nextBtn');
        const startOverBtn = document.getElementById('startOverBtn');
        
        // Pattern cards
        const patternCards = document.querySelectorAll('.pattern-card');
        
        // Progress bar
        const progressBar = document.getElementById('progress-bar');
        const currentQuestionSpan = document.getElementById('current-question');

        // Show patterns section
        function showPatterns() {
            console.log('Showing patterns section');
            heroSection.classList.add('hidden');
            patternSection.classList.remove('hidden');
            questionnaireSection.classList.add('hidden');
        }

        // Show hero section
        function showHero() {
            console.log('Showing hero section');
            heroSection.classList.remove('hidden');
            patternSection.classList.add('hidden');
            questionnaireSection.classList.add('hidden');
        }

        // Show questionnaire
        function showQuestionnaire() {
            console.log('Showing questionnaire section');
            heroSection.classList.add('hidden');
            patternSection.classList.add('hidden');
            questionnaireSection.classList.remove('hidden');
            currentQuestion = 1;
            updateProgress();
        }

        // Update progress bar and question content
        function updateProgress() {
            const progress = (currentQuestion / totalQuestions) * 100;
            progressBar.style.width = progress + '%';
            currentQuestionSpan.textContent = currentQuestion;
            updateQuestionContent();
        }

        // Update question content
        function updateQuestionContent() {
            const questionData = questions[currentQuestion - 1];
            
            // Update question text
            const questionTitle = document.getElementById('question-title');
            questionTitle.textContent = questionData.question;
            
            // Update content based on question type
            const questionContent = document.getElementById('question-content');
            
            if (questionData.type === 'text') {
                // Text input for first question
                questionContent.innerHTML = `
                    <textarea id="text-input" class="w-full p-4 border-2 border-gray-200 rounded-lg focus:border-indigo-500 focus:outline-none transition-all" 
                        style="color: #1f2937 !important; background-color: #ffffff !important;"
                        rows="4" placeholder="Describe your application idea in detail...">${selectedAnswers[currentQuestion] || ''}</textarea>
                `;
            } else {
                // Multiple choice options
                questionContent.innerHTML = `
                    <div class="space-y-3">
                        ${questionData.options.map(option => `
                            <button class="question-option w-full text-left p-4 border-2 border-gray-200 rounded-lg hover:border-indigo-500 hover:bg-indigo-50 transition-all ${
                                selectedAnswers[currentQuestion] === option ? 'border-indigo-500 bg-indigo-50' : ''
                            }" data-option="${option}" style="color: #1f2937 !important;">
                                ${option}
                            </button>
                        `).join('')}
                    </div>
                `;
                
                // Re-attach click handlers for new buttons
                document.querySelectorAll('.question-option').forEach(option => {
                    option.addEventListener('click', function() {
                        // Remove active state from all options
                        document.querySelectorAll('.question-option').forEach(opt => {
                            opt.classList.remove('border-indigo-500', 'bg-indigo-50');
                        });
                        // Add active state to clicked option
                        this.classList.add('border-indigo-500', 'bg-indigo-50');
                        // Store answer
                        selectedAnswers[currentQuestion] = this.dataset.option;
                    });
                });
            }
            
            // Update button states
            prevBtn.disabled = currentQuestion <= 1;
            prevBtn.style.opacity = currentQuestion <= 1 ? '0.5' : '1';
            nextBtn.textContent = currentQuestion === totalQuestions ? 'Generate PRD →' : 'Next Question →';
        }

        // Navigate questions
        function nextQuestion() {
            // Save current answer 
            const currentQuestionData = questions[currentQuestion - 1];
            
            if (currentQuestionData.type === 'text') {
                // Save text input
                const textInput = document.getElementById('text-input');
                if (textInput && textInput.value.trim()) {
                    selectedAnswers[currentQuestion] = textInput.value.trim();
                }
            } else {
                // Save selected option
                const selectedOption = document.querySelector('.question-option.border-indigo-500');
                if (selectedOption) {
                    selectedAnswers[currentQuestion] = selectedOption.dataset.option;
                }
            }
            
            if (currentQuestion < totalQuestions) {
                currentQuestion++;
                updateProgress();
            } else {
                // Generate PRD
                console.log('Generating PRD with answers:', selectedAnswers);
                showPRDResults();
            }
        }
        
        // Show PRD Results
        function showPRDResults() {
            // Hide questionnaire, show results
            questionnaireSection.classList.add('hidden');
            prdResultsSection.classList.remove('hidden');
            
            // Show loading state
            document.getElementById('prd-loading').classList.remove('hidden');
            document.getElementById('prd-content').classList.add('hidden');
            
            // Scroll to top
            window.scrollTo(0, 0);
            
            // Simulate generation delay for better UX
            setTimeout(() => {
                // Generate comprehensive PRD
                if (typeof window.PRDGenerator !== 'undefined') {
                    generatedPRD = window.PRDGenerator.generateComprehensivePRD(
                        selectedPatternType,
                        selectedAnswers,
                        selectedPatternType
                    );
                    
                    // Populate all sections
                    document.getElementById('executive-summary').innerHTML = generatedPRD.executiveSummary;
                    document.getElementById('market-analysis').innerHTML = generatedPRD.marketAnalysis;
                    document.getElementById('user-personas').innerHTML = generatedPRD.userPersonas;
                    document.getElementById('core-features').innerHTML = generatedPRD.coreFeatures;
                    document.getElementById('technical-architecture').innerHTML = generatedPRD.technicalArchitecture;
                    document.getElementById('data-models').innerHTML = generatedPRD.dataModels;
                    document.getElementById('api-specifications').innerHTML = generatedPRD.apiSpecifications;
                    document.getElementById('user-flows').innerHTML = generatedPRD.userFlows;
                    document.getElementById('security-requirements').innerHTML = generatedPRD.securityRequirements;
                    document.getElementById('performance-requirements').innerHTML = generatedPRD.performanceRequirements;
                    document.getElementById('development-roadmap').innerHTML = generatedPRD.developmentRoadmap;
                    document.getElementById('success-metrics').innerHTML = generatedPRD.successMetrics;
                    document.getElementById('risk-analysis').innerHTML = generatedPRD.riskAnalysis;
                    document.getElementById('testing-strategy').innerHTML = generatedPRD.testingStrategy;
                    document.getElementById('post-launch-strategy').innerHTML = generatedPRD.postLaunchStrategy;
                } else {
                    // Fallback if PRD generator not loaded
                    console.error('PRD Generator not loaded');
                    document.getElementById('executive-summary').innerHTML = '<p>Error: PRD Generator not loaded. Please refresh the page.</p>';
                }
                
                // Hide loading, show content
                document.getElementById('prd-loading').classList.add('hidden');
                document.getElementById('prd-content').classList.remove('hidden');
            }, 2000);
        }

        function previousQuestion() {
            if (currentQuestion > 1) {
                // Save current answer if any option is selected
                const selectedOption = document.querySelector('.question-option.border-indigo-500');
                if (selectedOption) {
                    selectedAnswers[currentQuestion] = selectedOption.textContent;
                }
                
                currentQuestion--;
                updateProgress();
            }
        }

        // Download PRD function
        function downloadPRD() {
            // This would normally generate a real PDF
            alert('PDF download feature coming soon! For now, you can copy the PRD content from the screen.');
        }

        // Export to Markdown function
        function exportToMarkdown() {
            if (!generatedPRD) {
                alert('Please generate a PRD first!');
                return;
            }
            
            const patternName = window.PRDGenerator.patternConfigs[selectedPatternType]?.name || 'Custom Platform';
            const appType = selectedAnswers[1] || 'SaaS Platform';
            
            let markdown = `# Product Requirements Document\n`;
            markdown += `## ${appType} - ${patternName}\n\n`;
            markdown += `Generated on: ${new Date().toLocaleDateString()}\n\n`;
            markdown += `---\n\n`;
            
            // Convert each section to markdown
            const sections = [
                { id: 'executive-summary', title: '📋 Executive Summary' },
                { id: 'market-analysis', title: '📊 Market Analysis' },
                { id: 'user-personas', title: '👥 User Personas' },
                { id: 'core-features', title: '🚀 Core Features & User Stories' },
                { id: 'technical-architecture', title: '🏗️ Technical Architecture' },
                { id: 'data-models', title: '🗄️ Data Models' },
                { id: 'api-specifications', title: '🔌 API Specifications' },
                { id: 'user-flows', title: '🔄 User Flows' },
                { id: 'security-requirements', title: '🔐 Security Requirements' },
                { id: 'performance-requirements', title: '⚡ Performance Requirements' },
                { id: 'development-roadmap', title: '📅 Development Roadmap' },
                { id: 'success-metrics', title: '📈 Success Metrics' },
                { id: 'risk-analysis', title: '⚠️ Risk Analysis' },
                { id: 'testing-strategy', title: '🧪 Testing Strategy' },
                { id: 'post-launch-strategy', title: '🚀 Post-Launch Strategy' }
            ];
            
            sections.forEach(section => {
                const element = document.getElementById(section.id);
                if (element) {
                    markdown += `## ${section.title}\n\n`;
                    // Convert HTML to markdown (basic conversion)
                    let content = element.innerHTML
                        .replace(/<h5[^>]*>/g, '### ')
                        .replace(/<\/h5>/g, '\n\n')
                        .replace(/<h6[^>]*>/g, '#### ')
                        .replace(/<\/h6>/g, '\n\n')
                        .replace(/<strong[^>]*>(.*?)<\/strong>/g, '**$1**')
                        .replace(/<p[^>]*>/g, '')
                        .replace(/<\/p>/g, '\n\n')
                        .replace(/<li[^>]*>/g, '- ')
                        .replace(/<\/li>/g, '\n')
                        .replace(/<ul[^>]*>/g, '')
                        .replace(/<\/ul>/g, '\n')
                        .replace(/<ol[^>]*>/g, '')
                        .replace(/<\/ol>/g, '\n')
                        .replace(/<div[^>]*>/g, '')
                        .replace(/<\/div>/g, '\n')
                        .replace(/<pre[^>]*>/g, '```\n')
                        .replace(/<\/pre>/g, '\n```\n')
                        .replace(/<code[^>]*>/g, '`')
                        .replace(/<\/code>/g, '`')
                        .replace(/<br\s*\/?>/g, '\n')
                        .replace(/&nbsp;/g, ' ')
                        .replace(/&amp;/g, '&')
                        .replace(/&lt;/g, '<')
                        .replace(/&gt;/g, '>')
                        .replace(/\n\s*\n\s*\n/g, '\n\n') // Clean up multiple newlines
                        .trim();
                    
                    markdown += content + '\n\n';
                }
            });
            
            // Create download
            const blob = new Blob([markdown], { type: 'text/markdown' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `PRD-${appType.replace(/\s+/g, '-')}-${Date.now()}.md`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Copy to clipboard function
        function copyToClipboard() {
            if (!generatedPRD) {
                alert('Please generate a PRD first!');
                return;
            }
            
            let textContent = '';
            const patternName = window.PRDGenerator.patternConfigs[selectedPatternType]?.name || 'Custom Platform';
            const appType = selectedAnswers[1] || 'SaaS Platform';
            
            textContent += `PRODUCT REQUIREMENTS DOCUMENT\n`;
            textContent += `${appType} - ${patternName}\n`;
            textContent += `Generated on: ${new Date().toLocaleDateString()}\n`;
            textContent += `${'='.repeat(60)}\n\n`;
            
            const sections = [
                'executive-summary', 'market-analysis', 'user-personas', 'core-features',
                'technical-architecture', 'data-models', 'api-specifications', 'user-flows',
                'security-requirements', 'performance-requirements', 'development-roadmap',
                'success-metrics', 'risk-analysis', 'testing-strategy', 'post-launch-strategy'
            ];
            
            sections.forEach(sectionId => {
                const element = document.getElementById(sectionId);
                if (element) {
                    const title = element.previousElementSibling?.textContent || sectionId.toUpperCase();
                    textContent += `${title}\n${'='.repeat(title.length)}\n\n`;
                    textContent += element.textContent.trim() + '\n\n';
                }
            });
            
            navigator.clipboard.writeText(textContent).then(() => {
                // Show success message
                const button = event.target;
                const originalText = button.textContent;
                button.textContent = '✅ Copied!';
                button.style.background = '#10b981';
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.background = '';
                }, 2000);
            }).catch(err => {
                console.error('Could not copy text: ', err);
                alert('Could not copy to clipboard. Please select and copy manually.');
            });
        }
        
        // Start over function
        function startOver() {
            // Reset state
            currentQuestion = 1;
            selectedAnswers = {};
            
            // Show hero, hide everything else
            heroSection.classList.remove('hidden');
            patternSection.classList.add('hidden');
            questionnaireSection.classList.add('hidden');
            prdResultsSection.classList.add('hidden');
        }
        
        // Make downloadPRD available globally
        window.downloadPRD = downloadPRD;

        // Event listeners
        generateBtn.addEventListener('click', showPatterns);
        browseBtn.addEventListener('click', showPatterns);
        navBrowseBtn.addEventListener('click', showPatterns);
        backToHomeBtn.addEventListener('click', showHero);
        backToPatternsBtn.addEventListener('click', showPatterns);
        prevBtn.addEventListener('click', previousQuestion);
        nextBtn.addEventListener('click', nextQuestion);
        startOverBtn.addEventListener('click', startOver);

        // Pattern card clicks
        patternCards.forEach(card => {
            card.addEventListener('click', function() {
                selectedPatternType = this.dataset.pattern;
                console.log('Selected pattern:', selectedPatternType);
                showQuestionnaire();
            });
        });

        // Question option clicks
        document.querySelectorAll('.question-option').forEach(option => {
            option.addEventListener('click', function() {
                // Remove active state from all options
                document.querySelectorAll('.question-option').forEach(opt => {
                    opt.classList.remove('border-indigo-500', 'bg-indigo-50');
                });
                // Add active state to clicked option
                this.classList.add('border-indigo-500', 'bg-indigo-50');
            });
        });

        // Log that page is ready
        console.log('Smart PRD Generator ready!');
        
        // COMPREHENSIVE FIX: Force all text colors to be dark
        const applyTextFixes = () => {
            // Fix ALL inputs, textareas, and selects
            document.querySelectorAll('input, textarea, select').forEach(el => {
                el.style.setProperty('color', '#1f2937', 'important');
                el.style.setProperty('background-color', '#ffffff', 'important');
                el.style.setProperty('-webkit-text-fill-color', '#1f2937', 'important');
            });
            
            // Fix ALL buttons
            document.querySelectorAll('button').forEach(el => {
                // Skip gradient buttons (Next Question button)
                if (!el.style.background?.includes('gradient')) {
                    el.style.setProperty('color', '#1f2937', 'important');
                }
            });
            
            // Fix question options specifically
            document.querySelectorAll('.question-option').forEach(el => {
                el.style.setProperty('color', '#1f2937', 'important');
            });
            
            // Fix all text in questionnaire section
            const questionnaire = document.getElementById('questionnaire-section');
            if (questionnaire) {
                questionnaire.querySelectorAll('h2, h3, span, p, div').forEach(el => {
                    if (!el.classList.contains('gradient-text')) {
                        el.style.setProperty('color', '#1f2937', 'important');
                    }
                });
            }
            
            console.log('Text fixes applied');
        };
        
        // Apply fixes immediately
        applyTextFixes();
        
        // Apply fixes after delays to catch any async rendering
        setTimeout(applyTextFixes, 100);
        setTimeout(applyTextFixes, 500);
        setTimeout(applyTextFixes, 1000);
        
        // Apply fixes on any DOM changes
        const observer = new MutationObserver(() => {
            applyTextFixes();
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true,
            attributes: false // Don't watch attributes to avoid infinite loops
        });
        
        // Apply fixes when questions change
        document.addEventListener('click', (e) => {
            if (e.target.id === 'nextBtn' || e.target.id === 'prevBtn') {
                setTimeout(applyTextFixes, 50);
            }
        });
        
        // Load patterns from API (optional)
        fetch('/api/smart-prd/patterns')
            .then(res => res.json())
            .then(data => {
                console.log('Patterns loaded:', data);
            })
            .catch(err => console.error('Error loading patterns:', err));
    </script>
</body>
</html>