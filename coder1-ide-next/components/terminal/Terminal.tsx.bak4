'use client';

import React, { useEffect, useRef, useState, useCallback } from 'react';
import dynamic from 'next/dynamic';

// Dynamic imports for xterm to prevent SSR issues
let XTerm: any;
let FitAddon: any;

if (typeof window !== 'undefined') {
  const xtermModule = require('@xterm/xterm');
  const fitModule = require('@xterm/addon-fit');
  XTerm = xtermModule.Terminal;
  FitAddon = fitModule.FitAddon;
  require('@xterm/xterm/css/xterm.css');
}
import './Terminal.css'; // Re-enabled - critical for xterm viewport fixes
import { Zap, StopCircle, Brain, Eye, Code2, Mic, MicOff, Speaker, ChevronDown, Plus } from '@/lib/icons';
import TerminalSettings, { TerminalSettingsState } from './TerminalSettings';
import { glows, spacing } from '@/lib/design-tokens';
import { getSocket } from '@/lib/socket';
// import ErrorDoctor from './ErrorDoctor'; // Removed to fix terminal overlap issue
import { soundAlertService, SoundPreset } from '@/lib/sound-alert-service';
import { useEnhancedSupervision } from '@/contexts/EnhancedSupervisionContext';
import SupervisionConfigModal from '@/components/supervision/SupervisionConfigModal';
import { useSessionMemory } from '@/hooks/useSessionMemory';
import { useUIStore } from '@/stores/useUIStore';
import { filterThinkingAnimations, extractClaudeCommands } from '@/lib/checkpoint-utils';
import { getCompanionClient } from '@/lib/companion-client';
import { terminalCommandHandler } from '@/lib/terminal-commands';
import { debounce } from '@/lib/debounce';
// import EnhancedStatusline from '@/components/statusline/EnhancedStatusline'; // Temporarily disabled for debugging

// Defensive filtering for status lines - Layer 3 protection
const cleanStatusLines = (data: string): string => {
  if (!data) return data;
  
  // Critical patterns that MUST be filtered
  let cleaned = data;
  
  // Remove any line with "esc to interrupt" control hint
  cleaned = cleaned.replace(/.*\(esc to interrupt.*?\).*$/gm, '');
  
  // Remove "Next:" indicators with special arrow
  cleaned = cleaned.replace(/.*‚éø\s*Next:.*$/gm, '');
  
  // Remove lines with "ctrl+t" hints
  cleaned = cleaned.replace(/.*ctrl\+t.*todos.*$/gm, '');
  
  // Remove statusline task symbols followed by text
  cleaned = cleaned.replace(/^[‚ú∂‚ú≥‚ú¢¬∑‚úª‚úΩ‚ú¶‚òÜ‚òÖ‚ñ™‚ñ´‚óÜ‚óá‚óã‚óè]\s+.*$/gm, '');
  
  return cleaned;
};

// TypeScript declarations for Web Speech API
declare global {
  interface Window {
    webkitSpeechRecognition: any;
    SpeechRecognition: any;
  }
}

interface TerminalProps {
  onAgentsSpawn?: () => void;
  onTerminalClick?: () => void;
  onClaudeTyped?: () => void;
  onTerminalData?: (data: string) => void;
  onTerminalCommand?: (command: string) => void;
  onTerminalReady?: (sessionId: string | null, ready: boolean) => void;
  sandboxMode?: boolean;
  sandboxSession?: {
    id: string;
    name: string;
    checkpointData: any;
    terminalHistory?: string;
    createdAt: Date;
  }; // Session data from checkpoint
  agentMode?: boolean; // New prop to indicate agent terminal
  agentSession?: {
    id: string;
    name: string;
    role: string;
    teamId: string;
    terminalHistory?: string;
    status: string;
    progress: number;
    currentTask: string;
    createdAt: Date;
  }; // Agent session data
  isVisible?: boolean; // Whether this terminal is currently visible
}

/**
 * Terminal Component
 * 
 * PRESERVED FROM ORIGINAL:
 * - AI Team button position: right: 120px from edge
 * - Terminal header height: 40px
 * - Orange glow on button hover
 * - Exact padding and spacing
 * 
 * DO NOT MODIFY button positioning without checking original
 */
export default function Terminal({ onAgentsSpawn, onTerminalClick, onClaudeTyped, onTerminalData, onTerminalCommand, onTerminalReady, sandboxMode = false, sandboxSession, agentMode = false, agentSession, isVisible = true }: TerminalProps) {
  // REMOVED: // REMOVED: console.log('üñ•Ô∏è Terminal component rendering...');
  const terminalRef = useRef<HTMLDivElement>(null);
  const xtermRef = useRef<XTerm | null>(null);
  const fitAddonRef = useRef<FitAddon | null>(null);
  const sessionIdForVoiceRef = useRef<string | null>(null); // Move this up here
  const sessionCreatedRef = useRef(false); // Track if session was already created
  const onDataDisposableRef = useRef<any>(null); // Store onData disposable
  const connectionInProgressRef = useRef(false); // Prevent concurrent connections
  const [isConnected, setIsConnected] = useState(false);
  const [agentsRunning, setAgentsRunning] = useState(false);
  const [voiceListening, setVoiceListening] = useState(false);
  const [companionConnected, setCompanionConnected] = useState(false);
  const companionClientRef = useRef<any>(null);
  const currentCommandBuffer = useRef<string>('');
  
  // Use enhanced supervision context
  const { 
    isSupervisionActive, 
    toggleSupervision, 
    enableSupervision,
    activeConfiguration,
    isConfigModalOpen,
    setConfigModalOpen,
    saveConfiguration,
    configurations,
    templates
  } = useEnhancedSupervision();
  const [terminalMode, setTerminalMode] = useState<'normal' | 'vim' | 'emacs'>('normal');
  // Load Claude model from localStorage or use default
  const [selectedClaudeModel, setSelectedClaudeModel] = useState<string>(() => {
    if (typeof window !== 'undefined') {
      return localStorage.getItem('coder1-selected-claude-model') || 'claude-4-sonnet-20250510';
    }
    return 'claude-4-sonnet-20250510';
  });
  const [showModelDropdown, setShowModelDropdown] = useState(false);

  // Handle Claude model changes with persistence
  const handleModelChange = (model: string) => {
    setSelectedClaudeModel(model);
    if (typeof window !== 'undefined') {
      localStorage.setItem('coder1-selected-claude-model', model);
    }
  };
  const [audioAlertsEnabled, setAudioAlertsEnabled] = useState(false);
  const [recognition, setRecognition] = useState<any | null>(null);
  const [claudeActive, setClaudeActive] = useState(false);
  const claudeActivityTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const [commandHistory, setCommandHistory] = useState<string[]>([]);
  const [currentCommand, setCurrentCommand] = useState('');
  const [conversationMode, setConversationMode] = useState(false);
  const [sessionTokens, setSessionTokens] = useState(0);
  const [currentFile, setCurrentFile] = useState<string | null>(null);
  const [totalTokens, setTotalTokens] = useState(0);
  const [usageCost, setUsageCost] = useState('$0.0000');
  const [mcpStatus, setMcpStatus] = useState<{ healthy: number; total: number; status: string }>({
    healthy: 0,
    total: 0,
    status: 'unknown'
  });
  const [blockResetTime, setBlockResetTime] = useState<string>('--:--:--');
  
  // Memory system integration
  const [memoryEnabled, setMemoryEnabled] = useState(true);
  const memory = useSessionMemory({
    enabled: memoryEnabled,
    sessionId: sessionIdForVoiceRef.current || `alpha_session_${Date.now()}`,
    platform: 'Claude Code',
    autoInject: true
  });
  
  // UI Store for toasts
  const { addToast } = useUIStore();
  
  // Sandbox creation state
  const [sandboxCreationStatus, setSandboxCreationStatus] = useState<'idle' | 'creating' | 'success' | 'error'>('idle');
  const [sandboxCreationMessage, setSandboxCreationMessage] = useState<string>('');
  const [createdSandboxId, setCreatedSandboxId] = useState<string>('');
  
  // Default terminal settings - guaranteed structure
  const defaultTerminalSettings: TerminalSettingsState = {
    skipPermissions: false,
    statusLine: {
      enabled: false,
      showFile: true,
      showModel: true,
      showTokens: true
    }
  };

  // Validate and migrate terminal settings
  const validateTerminalSettings = (settings: any): TerminalSettingsState => {
    logger.debug('[Terminal] Validating settings:', settings);
    
    // Handle legacy or malformed data
    if (!settings || typeof settings !== 'object') {
      logger.debug('[Terminal] Invalid settings object, using defaults');
      return defaultTerminalSettings;
    }

    // Ensure statusLine structure exists and is valid
    const statusLine = settings.statusLine || {};
    const validatedSettings: TerminalSettingsState = {
      skipPermissions: typeof settings.skipPermissions === 'boolean' ? settings.skipPermissions : defaultTerminalSettings.skipPermissions,
      statusLine: {
        enabled: typeof statusLine.enabled === 'boolean' ? statusLine.enabled : defaultTerminalSettings.statusLine.enabled,
        showFile: typeof statusLine.showFile === 'boolean' ? statusLine.showFile : defaultTerminalSettings.statusLine.showFile,
        showModel: typeof statusLine.showModel === 'boolean' ? statusLine.showModel : defaultTerminalSettings.statusLine.showModel,
        showTokens: typeof statusLine.showTokens === 'boolean' ? statusLine.showTokens : defaultTerminalSettings.statusLine.showTokens
      }
    };

    logger.debug('[Terminal] Validated settings:', validatedSettings);
    return validatedSettings;
  };

  // Terminal settings state - guaranteed to have proper structure
  const [terminalSettings, setTerminalSettings] = useState<TerminalSettingsState>(defaultTerminalSettings);

  // Fetch context stats (moved from StatusBarCore)
  const fetchContextStats = async () => {
    try {
      console.log('üîç Terminal: Fetching context stats...');
      setContextStats(prev => ({ ...prev, isLoading: true }));
      
      const response = await fetch('/api/context/stats', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (response.ok) {
        const stats = await response.json();
        console.log('üîç Terminal: Context stats received:', stats);
        
        const newContextStats = {
          totalSessions: stats.totalSessions || 0,
          totalMemories: stats.totalConversations || 0,
          isActive: (stats.totalConversations || 0) > 0 || (stats.totalSessions || 0) > 0,
          isLoading: false
        };
        
        console.log('üîç Terminal: Setting context stats:', newContextStats);
        setContextStats(newContextStats);
      } else {
        console.log('üîç Terminal: Context stats response not ok:', response.status);
        setContextStats(prev => ({ ...prev, isLoading: false }));
      }
    } catch (error) {
      console.log('üîç Terminal: Context stats fetch failed:', error);
      setContextStats(prev => ({ ...prev, isLoading: false }));
    }
  };

  // Load terminal settings from localStorage on mount
  useEffect(() => {
    logger.debug('[Terminal] Loading terminal settings from localStorage on mount');
    const savedSettings = localStorage.getItem('coder1-terminal-settings');
    if (savedSettings) {
      try {
        const parsed = JSON.parse(savedSettings);
        logger.debug('[Terminal] Raw loaded settings:', parsed);
        const validatedSettings = validateTerminalSettings(parsed);
        setTerminalSettings(validatedSettings);
        
        // Save back the validated settings to ensure localStorage is clean
        localStorage.setItem('coder1-terminal-settings', JSON.stringify(validatedSettings));
        logger.debug('[Terminal] Settings validated and saved back to localStorage');
      } catch (error) {
        logger.error('[Terminal] Failed to parse terminal settings, using defaults:', error);
        setTerminalSettings(defaultTerminalSettings);
        // Save defaults to localStorage to fix corrupted data
        localStorage.setItem('coder1-terminal-settings', JSON.stringify(defaultTerminalSettings));
      }
    } else {
      logger.debug('[Terminal] No saved settings found in localStorage, saving defaults');
      // Save defaults on first run
      localStorage.setItem('coder1-terminal-settings', JSON.stringify(defaultTerminalSettings));
    }
  }, []);

  // Load sound alert settings from localStorage on mount
  useEffect(() => {
    logger.debug('[Terminal] Loading sound alert settings from localStorage');
    try {
      const savedEnabled = localStorage.getItem('soundAlertsEnabled');
      const savedPreset = localStorage.getItem('soundAlertPreset');
      
      console.log('üîä Terminal: Loading sound settings from localStorage', {
        savedEnabled,
        savedPreset
      });
      
      if (savedEnabled !== null) {
        const enabled = JSON.parse(savedEnabled);
        setAudioAlertsEnabled(enabled);
        logger.debug('[Terminal] Audio alerts enabled set to:', enabled);
      } else {
        // Default to enabled for new users
        setAudioAlertsEnabled(true);
        localStorage.setItem('soundAlertsEnabled', 'true');
        logger.debug('[Terminal] No saved audio alert setting, defaulting to enabled');
      }
      
      if (savedPreset && ['gentle', 'chime', 'bell', 'chirp', 'pop'].includes(savedPreset)) {
        setSelectedSoundPreset(savedPreset as SoundPreset);
        logger.debug('[Terminal] Sound preset set to:', savedPreset);
      }
    } catch (error) {
      logger.error('[Terminal] Failed to load sound alert settings:', error);
      setAudioAlertsEnabled(true); // Default to enabled
      localStorage.setItem('soundAlertsEnabled', 'true');
    }
  }, []);

  // Fetch context stats on mount and set up interval
  useEffect(() => {
    console.log('üîç Terminal: Component mounted, calling fetchContextStats...');
    fetchContextStats();
    const statsInterval = setInterval(() => {
      console.log('üîç Terminal: Interval fetchContextStats...');
      fetchContextStats();
    }, 60000); // Update every 60 seconds
    
    return () => {
      clearInterval(statsInterval);
    };
  }, []);

  // Initialize companion service connection for Claude Code CLI access
  useEffect(() => {
    if (typeof window === 'undefined') return;
    
    const initCompanion = async () => {
      try {
        const companion = getCompanionClient();
        companionClientRef.current = companion;
        
        // Listen for companion status changes
        companion.on('status-changed', (status: any) => {
          setCompanionConnected(status.connected);
          
          // Only show success message when Companion IS connected
          // Don't show installation tip - the server.js help message is better
          if (status.connected && xtermRef.current) {
            xtermRef.current.writeln('\r\n\x1b[32m‚úÖ Claude Code CLI connected via Companion!\x1b[0m\r\n');
          }
        });
        
        // Check companion status
        await companion.checkInstallation();
      } catch (error) {
        console.error('Failed to initialize companion client:', error);
      }
    };
    
    initCompanion();
    
    // Check companion status periodically
    const checkInterval = setInterval(() => {
      if (companionClientRef.current) {
        companionClientRef.current.checkInstallation();
      }
    }, 30000); // Check every 30 seconds
    
    return () => {
      clearInterval(checkInterval);
      if (companionClientRef.current) {
        companionClientRef.current.disconnect();
      }
    };
  }, []);

  // Listen for terminal settings changes from TerminalSettings component
  useEffect(() => {
    const handleSettingsChange = (event: CustomEvent) => {
      logger.debug('[Terminal] Received terminalSettingsChanged event:', event.detail);
      
      // Reload settings from localStorage with validation
      const savedSettings = localStorage.getItem('coder1-terminal-settings');
      if (savedSettings) {
        try {
          const parsed = JSON.parse(savedSettings);
          logger.debug('[Terminal] Raw updated settings from localStorage:', parsed);
          const validatedSettings = validateTerminalSettings(parsed);
          setTerminalSettings(validatedSettings);
          logger.debug('[Terminal] Settings updated and validated after event');
        } catch (error) {
          logger.error('[Terminal] Failed to parse updated terminal settings, reverting to defaults:', error);
          setTerminalSettings(defaultTerminalSettings);
          localStorage.setItem('coder1-terminal-settings', JSON.stringify(defaultTerminalSettings));
        }
      } else {
        logger.warn('[Terminal] No settings found in localStorage after change event, using defaults');
        setTerminalSettings(defaultTerminalSettings);
        localStorage.setItem('coder1-terminal-settings', JSON.stringify(defaultTerminalSettings));
      }
    };

    // Add event listener for settings changes
    window.addEventListener('terminalSettingsChanged', handleSettingsChange as EventListener);
    
    // Cleanup event listener
    return () => {
      window.removeEventListener('terminalSettingsChanged', handleSettingsChange as EventListener);
    };
  }, []);
  
  // Fetch token usage periodically when statusline is enabled
  useEffect(() => {
    if (!terminalSettings.statusLine.enabled) return;
    
    const fetchUsage = async () => {
      try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 5000);
        
        const response = await fetch('/api/claude/usage', {
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            setTotalTokens(data.tokens || 0);
            setUsageCost(data.formattedCost || '$0.0000');
          }
        }
      } catch (error) {
        // Use console.warn instead of console.error to reduce noise
        // logger?.warn('Failed to fetch Claude usage:', error);
      }
    };
    
    // Fetch immediately and then every 60 seconds (reduced from 30)
    fetchUsage();
    const interval = setInterval(fetchUsage, 60000);
    
    return () => clearInterval(interval);
  }, [terminalSettings.statusLine.enabled]);
  
  // Fetch MCP server status periodically when statusline is enabled
  useEffect(() => {
    if (!terminalSettings.statusLine.enabled) return;
    
    const fetchMCPStatus = async () => {
      try {
        const response = await fetch('/api/claude/mcp-status');
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            setMcpStatus({
              healthy: data.summary.healthy,
              total: data.summary.total,
              status: data.healthStatus
            });
          }
        }
      } catch (error) {
        // logger?.error('Failed to fetch MCP status:', error);
      }
    };
    
    // Fetch immediately and then every 60 seconds
    fetchMCPStatus();
    const interval = setInterval(fetchMCPStatus, 60000);
    
    return () => clearInterval(interval);
  }, [terminalSettings.statusLine.enabled]);
  
  // Calculate block reset timer (resets every 3 hours)
  useEffect(() => {
    if (!terminalSettings.statusLine.enabled) return;
    
    const updateBlockTimer = () => {
      // Get or create the block start time
      const blockStartKey = 'claude-block-start-time';
      let blockStartTime = localStorage.getItem(blockStartKey);
      
      if (!blockStartTime) {
        // If no start time, set it now
        blockStartTime = new Date().toISOString();
        localStorage.setItem(blockStartKey, blockStartTime);
      }
      
      const startTime = new Date(blockStartTime);
      const now = new Date();
      const resetTime = new Date(startTime.getTime() + (3 * 60 * 60 * 1000)); // 3 hours from start
      
      // Check if we've passed the reset time
      if (now >= resetTime) {
        // Reset the timer
        const newStartTime = new Date().toISOString();
        localStorage.setItem(blockStartKey, newStartTime);
        setBlockResetTime('3:00:00');
      } else {
        // Calculate time remaining
        const remaining = resetTime.getTime() - now.getTime();
        const hours = Math.floor(remaining / (60 * 60 * 1000));
        const minutes = Math.floor((remaining % (60 * 60 * 1000)) / (60 * 1000));
        const seconds = Math.floor((remaining % (60 * 1000)) / 1000);
        
        setBlockResetTime(`${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`);
      }
    };
    
    // Update immediately and then every second
    updateBlockTimer();
    const interval = setInterval(updateBlockTimer, 1000);
    
    return () => clearInterval(interval);
  }, [terminalSettings.statusLine.enabled]);

  // Save terminal settings to localStorage when they change
  useEffect(() => {
    localStorage.setItem('coder1-terminal-settings', JSON.stringify(terminalSettings));
  }, [terminalSettings]);

  // State declarations - moved before useEffect hooks that use them
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [terminalReady, setTerminalReady] = useState(false);
  const [lastError, setLastError] = useState<string | null>(null);
  const [errorDoctorActive, setErrorDoctorActive] = useState(true);
  const socketRef = useRef<any>(null); // Will be Socket instance after async init
  const [currentLineBuffer, setCurrentLineBuffer] = useState('');
  const [selectedSoundPreset, setSelectedSoundPreset] = useState<SoundPreset>('gentle');

  // Save sound alert settings to localStorage when they change
  useEffect(() => {
    localStorage.setItem('soundAlertsEnabled', JSON.stringify(audioAlertsEnabled));
    logger.debug('[Terminal] Saved audio alerts enabled setting:', audioAlertsEnabled);
  }, [audioAlertsEnabled]);

  useEffect(() => {
    localStorage.setItem('soundAlertPreset', selectedSoundPreset);
    logger.debug('[Terminal] Saved sound preset setting:', selectedSoundPreset);
  }, [selectedSoundPreset]);
  
  // Performance-safe callback helper - no intervals, immediate execution
  const notifyTerminalReady = React.useCallback((newSessionId: string | null, ready: boolean) => {
    if (onTerminalReady) {
      try {
        onTerminalReady(newSessionId, ready);
      } catch (error) {
        // logger?.error('[Terminal] onTerminalReady callback error:', error);
      }
    }
  }, [onTerminalReady]);
  const [showSoundPresetDropdown, setShowSoundPresetDropdown] = useState(false);
  const soundButtonRef = useRef<HTMLButtonElement>(null);
  const soundDropdownRef = useRef<HTMLDivElement>(null);
  const [showMemoryDropdown, setShowMemoryDropdown] = useState(false);
  const memoryDropdownRef = useRef<HTMLDivElement>(null);
  
  // State for Claude copy button (drag-drop files)
  const [showClaudeCopyButton, setShowClaudeCopyButton] = useState(false);
  const [claudeCopyContent, setClaudeCopyContent] = useState('');
  
  // State for simple button management (no complex positioning needed)
  const [currentFileCount, setCurrentFileCount] = useState<number>(0);

  // Context stats state (moved from StatusBarCore)
  const [contextStats, setContextStats] = useState<{
    totalSessions: number;
    totalMemories: number;
    isActive: boolean;
    isLoading: boolean;
  }>({
    totalSessions: 0,
    totalMemories: 0,
    isActive: false,
    isLoading: false
  });
  
  // Scroll tracking - Phase 1: Read-only monitoring
  const [isUserScrolled, setIsUserScrolled] = useState(false);
  const scrollCheckIntervalRef = useRef<NodeJS.Timeout | null>(null);
  // Phase 4: Debouncing for flicker reduction
  const scrollDebounceRef = useRef<NodeJS.Timeout | null>(null);
  
  // Output buffering for performance optimization
  const outputBufferRef = useRef<string[]>([]);
  const outputFlushTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const writeRAFRef = useRef<number | null>(null);

  // Refit terminal when status line is toggled
  useEffect(() => {
    if (fitAddonRef.current && xtermRef.current) {
      setTimeout(() => {
        fitAddonRef.current?.fit();
      }, 50);
    }
  }, [terminalSettings.statusLine.enabled]);

  // Create terminal session on mount via REST API
  useEffect(() => {
    // Prevent duplicate session creation
    if (sessionCreatedRef.current) {
      // REMOVED: // REMOVED: console.log('Session already created, skipping');
      return;
    }
    
    const createTerminalSession = async () => {
      // Always create a fresh terminal session on page load
      // This ensures terminal starts clean on refresh
      
      sessionCreatedRef.current = true;
      // REMOVED: // REMOVED: console.log('üöÄ CREATING TERMINAL SESSION...');
      
      try {
        // Always try REST API first, regardless of environment
        // This ensures proper session creation on the server
        const response = await fetch('/api/terminal-rest/sessions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            cols: 130,
            rows: 30,
            sandbox: sandboxMode,
            checkpointName: sandboxSession?.name || 'Sandbox Session',
            // Add agent session info for Claude tabs
            agentMode: agentMode || false,
            agentSession: agentMode ? {
              id: agentSession?.id,
              name: agentSession?.name,
              role: agentSession?.role
            } : undefined
          }),
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log('‚úÖ Session created via REST API:', data.sessionId);
          setSessionId(data.sessionId);
          // Immediately update the ref for voice recognition
          sessionIdForVoiceRef.current = data.sessionId;
          // Make session ID globally available for drag-drop
          if (typeof window !== 'undefined') {
            (window as any).terminalSessionId = data.sessionId;
            console.log('üîå Terminal session ID made globally available for drag-drop');
          }
          setTerminalReady(true);
          // Notify parent component - performance-safe callback
          notifyTerminalReady(data.sessionId, true);
        } else {
          // Fallback: let server generate session ID via Socket.IO
          console.log('‚ö†Ô∏è REST API failed, will use Socket.IO session creation');
          // Don't set a session ID here - let the server generate one
          setTerminalReady(true);
          notifyTerminalReady(null, true);
        }
      } catch (error) {
        console.log('‚ö†Ô∏è REST API error, will use Socket.IO session creation:', error);
        // Don't set a session ID here - let the server generate one via Socket.IO
        setTerminalReady(true);
        notifyTerminalReady(null, true);
      }
    };
    
    createTerminalSession();
    
    // Cleanup function
    return () => {
      // Session cleanup will be handled in separate effect
    };
  }, []);
  
  // Store whether component is mounted
  const isMountedRef = useRef(true);
  const lastCleanupTimeRef = useRef(0);
  const cleanupInProgressRef = useRef(false);
  const failedCleanupSessionsRef = useRef(new Set<string>());
  
  // Session validation and management functions
  const isValidSession = (sid: string | null): boolean => {
    if (!sid || sid.startsWith('simulated-')) return false;
    if (failedCleanupSessionsRef.current.has(sid)) return false;
    return true;
  };
  
  const validateCurrentSession = (): boolean => {
    const currentSid = sessionIdForVoiceRef.current || sessionId;
    return isValidSession(currentSid);
  };
  
  const checkSessionExists = async (sid: string): Promise<boolean> => {
    try {
      const response = await fetch(`/api/terminal-rest/sessions/${sid}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      });
      return response.ok;
    } catch (error) {
      console.log('Session existence check failed:', error);
      return false;
    }
  };
  
  // Cleanup session only on actual unmount
  useEffect(() => {
    isMountedRef.current = true;
    
    return () => {
      isMountedRef.current = false;
      
      // Clean up Claude activity timeout
      if (claudeActivityTimeoutRef.current) {
        clearTimeout(claudeActivityTimeoutRef.current);
        claudeActivityTimeoutRef.current = null;
      }
      
      // Clean up scroll tracking interval
      if (scrollCheckIntervalRef.current) {
        clearInterval(scrollCheckIntervalRef.current);
        scrollCheckIntervalRef.current = null;
      }
      
      // Clean up scroll debounce timer
      if (scrollDebounceRef.current) {
        clearTimeout(scrollDebounceRef.current);
        scrollDebounceRef.current = null;
      }
      
      // Clean up output buffering timers
      if (outputFlushTimeoutRef.current) {
        clearTimeout(outputFlushTimeoutRef.current);
        outputFlushTimeoutRef.current = null;
      }
      
      if (writeRAFRef.current) {
        cancelAnimationFrame(writeRAFRef.current);
        writeRAFRef.current = null;
      }
      
      // Clear output buffer
      outputBufferRef.current = [];
      
      // Dispose of onData handler
      if (onDataDisposableRef.current) {
        onDataDisposableRef.current.dispose();
        onDataDisposableRef.current = null;
      }
      
      // Stop speech recognition if active
      if (recognition) {
        try {
          recognition.stop();
          recognition.onresult = null;
          recognition.onerror = null;
          recognition.onend = null;
        } catch (error) {
          // Silently handle
        }
      }
      
      // Disconnect socket if needed
      if (socketRef.current) {
        socketRef.current.off('terminal:data');
        socketRef.current.off('terminal:created');
        socketRef.current.off('terminal:error');
        socketRef.current.off('claude:output');
        socketRef.current.off('claude:sessionComplete');
        socketRef.current.off('claude:error');
        socketRef.current.off('ai-team:progress');
        socketRef.current.off('ai-team:complete');
      }
      
      // DISABLED: HTTP DELETE cleanup that was causing server crashes
      // The unified server manages terminal sessions entirely in-memory via Socket.IO.
      // HTTP DELETE requests are unnecessary and were causing DELETE cascades that
      // overwhelmed the server with hundreds of 500 errors leading to EMFILE crashes.
      // 
      // Session cleanup is now handled automatically by the unified server's
      // memory management system (server.js lines 784-851).
      const currentSessionId = sessionIdForVoiceRef.current || sessionId;
      if (currentSessionId && !currentSessionId.startsWith('simulated-')) {
        console.log('üßπ Terminal component cleanup (HTTP DELETE disabled):', currentSessionId);
        console.log('üìù Sessions are managed by unified server memory management');
        
        // Only perform local component cleanup - no HTTP requests
        // The unified server will handle session cleanup automatically
      }
    };
  }, []); // Empty dependency array - only run on mount/unmount

  // This useEffect has been removed to prevent duplicate socket connections
  // All socket connection logic is now handled in connectToBackend function

  useEffect(() => {
    // REMOVED: // REMOVED: console.log('üñ•Ô∏è INITIALIZING XTERM...');
    if (!terminalRef.current) {
      // REMOVED: // REMOVED: console.log('‚ùå Terminal ref not ready');
      return;
    }

    const initializeTerminal = async () => {
      try {
        // REMOVED: // REMOVED: console.log('üîß Creating XTerm instance...');
        // Wait for xterm.js to load if not already available
        if (!XTerm && typeof window !== 'undefined') {
          console.log('‚è≥ Waiting for xterm.js to load...');
          // Dynamically import xterm modules
          const xtermModule = await import('@xterm/xterm');
          const fitModule = await import('@xterm/addon-fit');
          XTerm = xtermModule.Terminal;
          FitAddon = fitModule.FitAddon;
          
          // Import CSS
          await import('@xterm/xterm/css/xterm.css');
          console.log('‚úÖ xterm.js loaded successfully');
        }
        
        // Initialize terminal with performance-optimized settings
        if (!XTerm) {
          console.error('XTerm not loaded - running in SSR environment');
          return;
        }
        
        const term = new XTerm({
          theme: {
            background: '#0a0a0a',
            foreground: '#ffffff',
            cursor: '#00D9FF',
            cursorAccent: '#00D9FF',
            selectionBackground: 'rgba(0, 217, 255, 0.3)',
          },
          fontSize: 13,
          fontFamily: 'Menlo, Monaco, "Courier New", monospace',
          cursorBlink: true,
          cursorStyle: 'block',
          allowProposedApi: true, // Add this to prevent API warnings
          // Performance optimizations and scrolling configuration
          scrollback: 10000, // Limit scrollback buffer
          fastScrollModifier: 'ctrl', // Enable fast scrolling with Ctrl key
          smoothScrollDuration: 0, // Disable smooth scrolling animations
          scrollOnUserInput: true,
          scrollSensitivity: 1,
          // Enhanced scrolling for better bottom access
          minimumContrastRatio: 1, // Ensures all content is visible
          allowTransparency: false, // Improve rendering consistency
        });

      if (!FitAddon) {
        console.error('FitAddon not loaded - running in SSR environment');
        return;
      }
      const fitAddon = new FitAddon();
      term.loadAddon(fitAddon);
      
      // Ensure the container is ready before opening
      if (terminalRef.current && terminalRef.current.offsetParent !== null) {
        term.open(terminalRef.current);
        
        // Use same timing as ResizeObserver which works correctly
        setTimeout(() => {
          try {
            // Safety check: Ensure terminal has dimensions before fitting
            if (terminalRef.current && terminalRef.current.offsetWidth > 0 && terminalRef.current.offsetHeight > 0) {
              fitAddon.fit();
              
              // Second fit after DOM settles, matching resize timing
              setTimeout(() => {
                if (terminalRef.current && terminalRef.current.offsetWidth > 0 && terminalRef.current.offsetHeight > 0) {
                  fitAddon.fit();
                }
              }, 50);
            }
            term.focus();
            
            // Add custom welcome message
            if (process.env.NODE_ENV !== 'production' || sandboxMode || agentMode) {
              term.clear();
              
              // Handle agent terminals (including Claude tabs)
              if (agentMode && agentSession) {
                console.log('ü§ñ Terminal: Agent mode with session:', agentSession);
                
                // Check if this is a Claude tab (starts with "Claude ")
                const isClaudeTab = agentSession.name && agentSession.name.startsWith('Claude ');
                
                if (isClaudeTab) {
                  // Simple header for Claude tabs
                  term.writeln(`\x1b[38;5;39m${agentSession.name}\x1b[0m`);
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  term.writeln('Starting Claude CLI...');
                  term.writeln('');
                  
                  // Auto-run claude command after a short delay
                  setTimeout(async () => {
                    // Import getSocket to get the socket instance
                    const { getSocket } = await import('@/lib/socket');
                    const socket = await getSocket();
                    const sessionId = sessionIdForVoiceRef.current;
                    
                    if (socket?.connected && sessionId) {
                      console.log('üöÄ Auto-running claude command for tab:', agentSession.name);
                      socket.emit('terminal:input', {
                        id: sessionId,
                        data: 'claude\r'
                      });
                    }
                  }, 1000);
                } else {
                  // Original agent terminal display (for future use)
                  const roleColors: Record<string, string> = {
                    frontend: '\x1b[38;5;39m',   // Blue
                    backend: '\x1b[38;5;34m',    // Green
                    database: '\x1b[38;5;129m',  // Purple
                    testing: '\x1b[38;5;226m',   // Yellow
                    devops: '\x1b[38;5;208m',    // Orange
                    fullstack: '\x1b[38;5;244m'  // Gray
                  };
                  
                  const color = roleColors[agentSession.role] || roleColors.fullstack;
                  term.writeln(`${color}${agentSession.name}\x1b[0m`);
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  
                  // Show agent status
                  term.writeln(`\x1b[38;5;245mRole: ${agentSession.role}\x1b[0m`);
                  term.writeln(`\x1b[38;5;245mTeam: ${agentSession.teamId}\x1b[0m`);
                  if (agentSession.currentTask) {
                    term.writeln(`\x1b[38;5;245mCurrent Task: ${agentSession.currentTask}\x1b[0m`);
                  }
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  
                  // Write any existing terminal history  
                  if (agentSession.terminalHistory) {
                    term.write(agentSession.terminalHistory);
                  }
                  
                  term.writeln('');
                  term.writeln('ü§ñ AGENT TERMINAL - Interactive AI workspace');
                  term.writeln('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
                  term.writeln('');
                }
                
                // Add mock output for fallback agents
                if (agentSession.status === 'waiting' || agentSession.status === 'setup_required') {
                  // This is a fallback agent, generate some mock output
                  setTimeout(() => {
                    if (term && !term.isDisposed) {
                      // Generate mock agent output based on role
                      const mockCommands = {
                        frontend: [
                          '$ npm install react react-dom',
                          '‚è≥ Installing frontend dependencies...',
                          '‚úÖ Dependencies installed successfully',
                          '',
                          '$ npx create-react-app frontend --template typescript',
                          '‚è≥ Creating React application structure...',
                          '‚úÖ Frontend scaffold created',
                          '',
                          '$ cd frontend && npm run start',
                          '‚è≥ Starting development server...',
                          '‚úÖ Development server running on http://localhost:3000',
                          '',
                          'üí° Frontend Developer is setting up the UI components...'
                        ],
                        backend: [
                          '$ npm init -y',
                          '‚è≥ Initializing backend project...',
                          '‚úÖ Package.json created',
                          '',
                          '$ npm install express cors body-parser',
                          '‚è≥ Installing backend dependencies...',
                          '‚úÖ Backend packages installed',
                          '',
                          '$ touch server.js routes.js',
                          '‚è≥ Creating server files...',
                          '‚úÖ Server structure created',
                          '',
                          'üí° Backend Developer is configuring API endpoints...'
                        ],
                        database: [
                          '$ npm install mongoose mongodb',
                          '‚è≥ Installing database drivers...',
                          '‚úÖ Database dependencies installed',
                          '',
                          '$ mkdir models && touch models/schema.js',
                          '‚è≥ Creating database models...',
                          '‚úÖ Schema structure created',
                          '',
                          'üí° Database Engineer is designing data models...'
                        ],
                        testing: [
                          '$ npm install --save-dev jest @types/jest',
                          '‚è≥ Installing testing framework...',
                          '‚úÖ Jest configured',
                          '',
                          '$ npm run test',
                          '‚è≥ Running test suite...',
                          '‚úÖ All tests passing',
                          '',
                          'üí° Test Engineer is writing test cases...'
                        ],
                        devops: [
                          '$ docker --version',
                          'Docker version 20.10.17',
                          '',
                          '$ touch Dockerfile docker-compose.yml',
                          '‚è≥ Creating container configuration...',
                          '‚úÖ Docker setup complete',
                          '',
                          'üí° DevOps Engineer is configuring deployment pipeline...'
                        ],
                        fullstack: [
                          '$ npm create vite@latest app -- --template react-ts',
                          '‚è≥ Creating full-stack application...',
                          '‚úÖ Project scaffolded successfully',
                          '',
                          '$ cd app && npm install',
                          '‚è≥ Installing dependencies...',
                          '‚úÖ All packages installed',
                          '',
                          'üí° Full-Stack Developer is building the application...'
                        ]
                      };
                      
                      const commands = mockCommands[agentSession.role] || mockCommands.fullstack;
                      
                      // Write commands with delays to simulate real work
                      let delay = 0;
                      commands.forEach((line) => {
                        setTimeout(() => {
                          if (term && !term.isDisposed) {
                            term.writeln(line);
                          }
                        }, delay);
                        delay += 300; // 300ms between lines
                      });
                      
                      // Add a final status message
                      setTimeout(() => {
                        if (term && !term.isDisposed) {
                          term.writeln('');
                          term.writeln(`\x1b[38;5;245m‚ö†Ô∏è Note: This is a mock demonstration. Configure Claude CLI for real AI agents.\x1b[0m`);
                          term.writeln(`\x1b[38;5;245mSee documentation for setup instructions.\x1b[0m`);
                        }
                      }, delay + 500);
                    }
                  }, 500); // Initial delay before starting mock output
                }
                
              } else if (sandboxMode) {
                console.log('üéØ Terminal: Sandbox mode with session:', sandboxSession);
                
                // Display checkpoint terminal history if available
                if (sandboxSession?.terminalHistory) {
                  // Clean the terminal history to remove thinking animations and control sequences
                  let cleanedHistory = filterThinkingAnimations(sandboxSession.terminalHistory);
                  cleanedHistory = cleanStatusLines(cleanedHistory);  // Layer 3 defense
                  
                  // Write header - format checkpoint name to include date if not already present
                  let displayName = sandboxSession?.name || 'Checkpoint Session';
                  // Check if the name already has a date (contains /) or if we need to add it
                  if (sandboxSession?.checkpointData?.timestamp && !displayName.includes('/')) {
                    const checkpointDate = new Date(sandboxSession.checkpointData.timestamp);
                    const dateStr = checkpointDate.toLocaleDateString('en-US');
                    // Extract the time part from the existing name (e.g., "Checkpoint 2:58:28 PM" -> "2:58:28 PM")
                    const timePart = displayName.replace('Checkpoint ', '').replace('Auto-checkpoint ', '');
                    displayName = displayName.startsWith('Auto') 
                      ? `Auto-checkpoint ${dateStr} ${timePart}`
                      : `Checkpoint ${dateStr} ${timePart}`;
                  }
                  term.writeln('\x1b[38;5;214m' + displayName + '\x1b[0m');
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  term.writeln('\x1b[38;5;245mThis is a read-only view of the checkpoint. Use action buttons to interact.\x1b[0m');
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  term.writeln('');
                  
                  // Write the actual checkpoint content
                  term.write(cleanedHistory);
                  
                  // Add footer with instructions
                  term.writeln('');
                  term.writeln('\x1b[38;5;240m' + '‚îÄ'.repeat(80) + '\x1b[0m');
                  term.writeln('\x1b[38;5;245m[End of checkpoint data]\x1b[0m');
                } else {
                  // No terminal history available - format checkpoint name to include date if not already present
                  let displayName = sandboxSession?.name || 'Checkpoint Session';
                  // Check if the name already has a date (contains /) or if we need to add it
                  if (sandboxSession?.checkpointData?.timestamp && !displayName.includes('/')) {
                    const checkpointDate = new Date(sandboxSession.checkpointData.timestamp);
                    const dateStr = checkpointDate.toLocaleDateString('en-US');
                    // Extract the time part from the existing name (e.g., "Checkpoint 2:58:28 PM" -> "2:58:28 PM")
                    const timePart = displayName.replace('Checkpoint ', '').replace('Auto-checkpoint ', '');
                    displayName = displayName.startsWith('Auto') 
                      ? `Auto-checkpoint ${dateStr} ${timePart}`
                      : `Checkpoint ${dateStr} ${timePart}`;
                  }
                  term.writeln(displayName);
                  term.writeln('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
                  term.writeln('\x1b[38;5;208m‚ö†Ô∏è No terminal history available in this checkpoint\x1b[0m');
                  term.writeln('');
                  term.writeln('\x1b[38;5;245mThis may happen if:\x1b[0m');
                  term.writeln('\x1b[38;5;245m‚Ä¢ The checkpoint was created before terminal history tracking\x1b[0m');
                  term.writeln('\x1b[38;5;245m‚Ä¢ No terminal commands were run before the checkpoint\x1b[0m');
                  term.writeln('\x1b[38;5;245m‚Ä¢ Terminal history collection was not working at checkpoint time\x1b[0m');
                  term.writeln('');
                  term.writeln('\x1b[38;5;82mYou can start typing commands now to begin a new session.\x1b[0m');
                }
                
                if (sandboxSession?.checkpointData) {
                  const data = sandboxSession.checkpointData;
                  console.log('üìä Terminal: Checkpoint data:', data);
                  if (data.timestamp) {
                    term.writeln(`üìÖ Created: ${new Date(data.timestamp).toLocaleString()}`);
                  }
                  if (data.files && Array.isArray(data.files) && data.files.length > 0) {
                    term.writeln(`üìÅ Files: ${data.files.join(', ')}`);
                  }
                  if (data.commands && Array.isArray(data.commands) && data.commands.length > 0) {
                    // Show last 3 commands for context
                    term.writeln(`‚ö° Recent commands:`);
                    data.commands.slice(-3).forEach((cmd: string) => {
                      term.writeln(`   ‚Ä¢ ${cmd}`);
                    });
                  }
                  term.writeln('');
                }
                term.writeln('üõ°Ô∏è SANDBOX MODE - Safe exploration environment');
                term.writeln("Type 'claude' for AI assistance in sandbox");
                term.writeln('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
                term.writeln('');
              } else {
                term.writeln('Coder1 Terminal Ready');
                term.writeln("Type 'claude' to start AI-assisted coding");
                term.writeln('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
                term.writeln('');
              }
            }
            
            // Don't show initial prompt - backend will provide it
            // Note: Connection to backend will happen via useEffect when both sessionId and terminalReady are set
          } catch (error) {
            // REMOVED: // REMOVED: console.log('FitAddon error (non-critical):', error);
          }
        }, 100);
        
        xtermRef.current = term;
        fitAddonRef.current = fitAddon;

        // ENHANCED SCROLL TRACKING: Better user intent detection
        let lastViewportY = 0;
        const checkScrollPosition = () => {
          if (term && term.buffer && term.buffer.active) {
            try {
              const buffer = term.buffer.active;
              const viewportY = buffer.viewportY;
              const baseY = buffer.baseY;
              const linesFromBottom = baseY - viewportY;
              
              // Detect scroll direction and magnitude
              const scrollDelta = viewportY - lastViewportY;
              const isScrollingUp = scrollDelta < 0;
              const isSignificantScroll = Math.abs(scrollDelta) > 3;
              
              // User intentionally scrolled up if:
              // 1. They scrolled up significantly (more than 3 lines)
              // 2. They're more than 10 lines from bottom
              if (isScrollingUp && isSignificantScroll && linesFromBottom > 10) {
                setIsUserScrolled(true);
              } 
              // Reset user scroll if they're back near bottom
              else if (linesFromBottom <= 2) {
                setIsUserScrolled(false);
              }
              // If Claude is active and we're somewhat close, reset user scroll
              else if (claudeActive && linesFromBottom <= 15 && !isScrollingUp) {
                setIsUserScrolled(false);
              }
              
              lastViewportY = viewportY;
            } catch (e) {
              // Silently handle errors
            }
          }
        };
        
        // Set up scroll interval - reduced frequency for better performance
        scrollCheckIntervalRef.current = setInterval(checkScrollPosition, 500); // Reduced to 500ms to prevent aggressive scrolling

        // Handle resize
        const resizeObserver = new ResizeObserver(() => {
          if (fitAddonRef.current && term) {
            try {
              const beforeBuffer = term.buffer?.active;
              const wasAtBottom = beforeBuffer ? beforeBuffer.viewportY === beforeBuffer.baseY : false;

              setTimeout(() => {
                fitAddonRef.current?.fit();
                
                // Check state after resize
                const afterBuffer = term.buffer?.active;
                
                // If resize broke the viewport sync and we were at bottom, fix it
                if (wasAtBottom && afterBuffer && afterBuffer.viewportY !== afterBuffer.baseY) {
                  term.scrollLines(afterBuffer.baseY - afterBuffer.viewportY);
                }
                
                // If we were at bottom before resize, ensure we stay at bottom
                if (wasAtBottom) {
                  // Small delay to let DOM settle
                  setTimeout(() => {
                    term.scrollToBottom();
                  }, 50);
                }
              }, 10);
            } catch (error) {
              // Silently handle resize errors
            }
          }
        });

        if (terminalRef.current && terminalRef.current.parentElement) {
          resizeObserver.observe(terminalRef.current.parentElement);
        }

        // Return cleanup function
        const cleanup = () => {
          try {
            resizeObserver.disconnect();
            // Clean up scroll monitoring
            if (scrollCheckIntervalRef.current) {
              clearInterval(scrollCheckIntervalRef.current);
              scrollCheckIntervalRef.current = null;
            }
            // Clean up debounce timer
            if (scrollDebounceRef.current) {
              clearTimeout(scrollDebounceRef.current);
              scrollDebounceRef.current = null;
            }
            // Clean up output buffering timers
            if (outputFlushTimeoutRef.current) {
              clearTimeout(outputFlushTimeoutRef.current);
              outputFlushTimeoutRef.current = null;
            }
            if (writeRAFRef.current) {
              cancelAnimationFrame(writeRAFRef.current);
              writeRAFRef.current = null;
            }
            // Clear any pending buffer
            outputBufferRef.current = [];
            // Dispose of onData handler
            if (onDataDisposableRef.current) {
              onDataDisposableRef.current.dispose();
              onDataDisposableRef.current = null;
            }
            if (term) {
              term.dispose();
            }
          } catch (error) {
            // Silently handle cleanup errors
          }
        };

        return cleanup;
        
      } else {
        // REMOVED: // REMOVED: console.log('Terminal container not ready, retrying...');
        // Retry after a short delay if container isn't ready
        setTimeout(() => {
          if (terminalRef.current && !xtermRef.current && terminalRef.current.offsetWidth > 0) {
            term.open(terminalRef.current);
            // Safety check for dimensions
            if (terminalRef.current.offsetWidth > 0 && terminalRef.current.offsetHeight > 0) {
              fitAddon.fit();
            }
            term.focus();
            xtermRef.current = term;
            fitAddonRef.current = fitAddon;
          }
        }, 200);
        }
      } catch (error) {
        console.error('Terminal initialization error:', error);
        // Set up a basic fallback
        if (terminalRef.current) {
          terminalRef.current.innerHTML = '<div style="color: #ff6b6b; padding: 20px;">Terminal initialization failed. Please refresh the page.</div>';
        }
      }
    };

    // Call the async initialization function
    initializeTerminal();
  }, []);

  // Close dropdowns when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showSoundPresetDropdown && 
          soundDropdownRef.current && 
          !soundDropdownRef.current.contains(event.target as Node) &&
          soundButtonRef.current &&
          !soundButtonRef.current.contains(event.target as Node)) {
        setShowSoundPresetDropdown(false);
      }
      if (showMemoryDropdown && 
          memoryDropdownRef.current && 
          !memoryDropdownRef.current.contains(event.target as Node)) {
        setShowMemoryDropdown(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showSoundPresetDropdown, showMemoryDropdown]);

  // Load sound preferences
  useEffect(() => {
    setAudioAlertsEnabled(soundAlertService.getEnabled());
    setSelectedSoundPreset(soundAlertService.getPreset());
  }, []);

  // Simplified: No complex positioning - work WITH terminal architecture
  const positionButtonSimply = (fileCount: number) => {
    console.log('üîß Positioning copy button simply for', fileCount, 'files');
    // No complex calculations - use predictable CSS positioning
    // Button will appear in bottom-right of terminal area, clearly visible
    // Button uses simple CSS positioning - no complex calculations needed
    return; // Simple function - no positioning logic needed
  };
  
  // Listen for Claude files ready event from IDE page (drag-drop files)
  useEffect(() => {
    const handleClaudeFilesReady = (event: CustomEvent) => {
      console.log('üìã Terminal: Received Claude files ready event', event.detail);
      const { content, fileCount } = event.detail;
      console.log('üìã Terminal: Processing event - content length:', content?.length, 'fileCount:', fileCount);
      
      if (content && fileCount > 0) {
        console.log('üìã Terminal: Setting up copy button and calculating position...');
        setClaudeCopyContent(content);
        setShowClaudeCopyButton(true);
        setCurrentFileCount(fileCount); // Store file count for resize recalculation
        
        // Button will use simple, predictable positioning - no complex calculations needed
        console.log('üìã Terminal: File drop completed, button will appear in predictable location');
        
        // Auto-hide after 30 seconds
        setTimeout(() => {
          setShowClaudeCopyButton(false);
        }, 30000);
      }
    };
    
    window.addEventListener('claudeFilesReady', handleClaudeFilesReady as EventListener);
    
    return () => {
      window.removeEventListener('claudeFilesReady', handleClaudeFilesReady as EventListener);
    };
  }, []);

  // Keep sessionId ref in sync for voice callbacks
  useEffect(() => {
    sessionIdForVoiceRef.current = sessionId;
    // Make session ID globally available for drag-drop when it changes
    if (typeof window !== 'undefined' && sessionId) {
      (window as any).terminalSessionId = sessionId;
    }
    // REMOVED: // REMOVED: console.log('üìù Updated sessionIdForVoiceRef:', sessionId);
  }, [sessionId]);

  // Connect to backend when both terminal and session are ready
  useEffect(() => {
    // Don't connect to backend if in sandbox mode - it's read-only (but allow agent terminals)
    if (sandboxMode && !agentMode) {
      console.log('üèñÔ∏è Sandbox mode - skipping backend connection');
      return;
    }
    
    // Agent terminals need backend connection for interactive commands
    if (agentMode) {
      console.log('ü§ñ Agent terminal mode - enabling backend connection for:', agentSession?.name);
    }
    
    // Connect when terminal is ready (session ID can be created by server if needed)
    if (terminalReady && xtermRef.current && !isConnected && !connectionInProgressRef.current) {
      console.log('üöÄ Terminal ready, connecting to backend...', { sessionId, agentMode, agentSession });
      connectToBackend(xtermRef.current);
    }
  }, [sessionId, terminalReady, isConnected, sandboxMode, agentMode]);

  // Handle terminal dimension recalculation when sandbox mode changes
  useEffect(() => {
    if (fitAddonRef.current && xtermRef.current) {
      // Wait for DOM to update after sandbox button row appears/disappears
      const timer = setTimeout(() => {
        try {
          fitAddonRef.current?.fit();
          // Ensure we stay scrolled to bottom after resize
          if (xtermRef.current) {
            xtermRef.current.scrollToBottom();
          }
        } catch (error) {
          console.warn('Terminal fit error after sandbox mode change:', error);
        }
      }, 100); // Allow time for button row to render/remove

      return () => clearTimeout(timer);
    }
  }, [sandboxMode]);

  // Store isConnected in a ref for use in callbacks
  const isConnectedRef = useRef(false);
  useEffect(() => {
    isConnectedRef.current = isConnected;
  }, [isConnected]);

  // Auto-focus terminal when component mounts and after interactions
  useEffect(() => {
    // Only focus if this terminal is visible
    if (!isVisible) {
      console.log(`üö´ Terminal ${sessionId} not visible, skipping focus`);
      return;
    }

    // Focus terminal after a short delay to ensure DOM is ready
    const focusTimer = setTimeout(() => {
      if (xtermRef.current && terminalRef.current && isVisible) {
        try {
          xtermRef.current.focus();
          console.log(`‚úÖ Terminal ${sessionId} auto-focused (visible)`);
        } catch (error) {
          console.warn('Could not auto-focus terminal:', error);
        }
      }
    }, 500);

    // Add global click handler to refocus terminal when clicked anywhere in terminal area
    const handleTerminalAreaClick = (e: MouseEvent) => {
      const target = e.target as HTMLElement;
      // Check if click is within terminal container and terminal is visible
      if (terminalRef.current && terminalRef.current.contains(target) && isVisible) {
        // Notify parent that terminal was clicked (hides hero section)
        onTerminalClick?.();
        
        if (xtermRef.current) {
          try {
            xtermRef.current.focus();
            console.log(`üñ±Ô∏è Terminal ${sessionId} focused on click`);
          } catch (error) {
            console.warn('Could not focus terminal on click:', error);
          }
        }
      }
    };

    document.addEventListener('click', handleTerminalAreaClick);

    return () => {
      clearTimeout(focusTimer);
      document.removeEventListener('click', handleTerminalAreaClick);
    };
  }, [terminalReady, isVisible, sessionId]);

  // Handle visibility changes - focus when becoming visible
  useEffect(() => {
    if (isVisible && xtermRef.current) {
      // Small delay to ensure DOM updates are complete
      const timer = setTimeout(() => {
        try {
          xtermRef.current?.focus();
          console.log(`üëÅÔ∏è Terminal ${sessionId} focused on visibility change`);
        } catch (error) {
          console.warn('Could not focus terminal on visibility change:', error);
        }
      }, 100);
      
      return () => clearTimeout(timer);
    }
  }, [isVisible, sessionId]);

  // Listen for checkpoint restoration events
  useEffect(() => {
    
    // Debounced handler to prevent rapid-fire restoration attempts
    const debouncedCheckpointRestore = debounce((event: CustomEvent) => {
      console.log('üîÑ Terminal: Checkpoint restoration event received (debounced)', event.detail);
      
      // For checkpointRestored event: { checkpoint, snapshot }
      const snapshot = event.detail?.snapshot;
      const terminalData = snapshot?.terminal;
      const conversationHistory = snapshot?.conversationHistory;
      
      if (!xtermRef.current) {
        console.log('‚ö†Ô∏è Terminal: Terminal not initialized yet');
        return;
      }
      
      // Clear current terminal
      xtermRef.current.clear();
      
      // ENHANCED: Display conversation history first if available
      if (conversationHistory && Array.isArray(conversationHistory) && conversationHistory.length > 0) {
        console.log(`üìö Terminal: Restoring ${conversationHistory.length} previous conversations`);
        
        // Display conversation history header
        xtermRef.current.write('\r\n\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n');
        xtermRef.current.write('\x1b[38;5;174müìÇ Session restored from checkpoint\x1b[0m\r\n');
        xtermRef.current.write('\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n\r\n');
        
        // Display each conversation
        conversationHistory.forEach((conversation: any, index: number) => {
          if (conversation.user_input && conversation.claude_reply) {
            // User input
            xtermRef.current?.write(`\x1b[38;5;147müí¨ You:\x1b[0m ${conversation.user_input}\r\n\r\n`);
            
            // Claude response (truncated for readability)
            const response = conversation.claude_reply.length > 500 
              ? conversation.claude_reply.substring(0, 500) + '...'
              : conversation.claude_reply;
            xtermRef.current?.write(`\x1b[38;5;174mü§ñ Claude:\x1b[0m ${response}\r\n\r\n`);
            
            if (index < conversationHistory.length - 1) {
              xtermRef.current?.write('\x1b[38;5;244m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\x1b[0m\r\n\r\n');
            }
          }
        });
        
        xtermRef.current.write('\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n');
        xtermRef.current.write('\x1b[38;5;147müìÖ Continuing from where you left off...\x1b[0m\r\n');
        xtermRef.current.write('\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n\r\n');
      }
      
      // Restore current terminal session (if available)
      if (terminalData && typeof terminalData === 'string') {
        console.log(`üìú Terminal: Restoring current terminal session from checkpoint`);
        
        // üö® DIAGNOSTIC: Log raw terminal data before filtering
        console.log('üîç TERMINAL DIAGNOSTIC: Raw terminal data analysis:');
        console.log('  üìè Raw data length:', terminalData.length);
        console.log('  üìù Raw data first 500 chars:', terminalData.substring(0, 500));
        console.log('  üìù Raw data last 500 chars:', terminalData.substring(terminalData.length - 500));
        
        const rawPlanModeCount = (terminalData.match(/plan mode on/gi) || []).length;
        const rawPauseCount = (terminalData.match(/‚è∏/g) || []).length;
        const rawShiftTabCount = (terminalData.match(/shift\+tab/gi) || []).length;
        
        console.log('üîç TERMINAL DIAGNOSTIC: Raw data pattern analysis:');
        console.log('  üìù "plan mode on" occurrences:', rawPlanModeCount);
        console.log('  ‚è∏ Pause symbol occurrences:', rawPauseCount);
        console.log('  üìù "shift+tab" occurrences:', rawShiftTabCount);
        
        if (rawPlanModeCount > 10) {
          console.log('üö® TERMINAL DIAGNOSTIC: HIGH REPETITION detected in raw terminal data!');
          const lines = terminalData.split('\n');
          const planModeLines = lines.filter(line => line.toLowerCase().includes('plan mode on'));
          console.log('üîç TERMINAL DIAGNOSTIC: Plan mode lines sample (first 3):');
          planModeLines.slice(0, 3).forEach((line, i) => {
            console.log(`    ${i + 1}. "${line.substring(0, 100)}${line.length > 100 ? '...' : ''}"`);
          });
          console.log('üîç TERMINAL DIAGNOSTIC: Total plan mode lines in raw data:', planModeLines.length);
        }
        
        // Filter out thinking animations before writing
        console.log('üßΩ TERMINAL DIAGNOSTIC: Applying filterThinkingAnimations...');
        let filteredData = filterThinkingAnimations(terminalData);
        filteredData = cleanStatusLines(filteredData);  // Layer 3 defense
        
        // üö® DIAGNOSTIC: Compare before and after filtering
        const filteredPlanModeCount = (filteredData.match(/plan mode on/gi) || []).length;
        const filteredPauseCount = (filteredData.match(/‚è∏/g) || []).length;
        const filteredShiftTabCount = (filteredData.match(/shift\+tab/gi) || []).length;
        
        console.log('üßΩ TERMINAL DIAGNOSTIC: Filtering results:');
        console.log('  üìè Data length: ', terminalData.length, '‚Üí', filteredData.length, '(', terminalData.length - filteredData.length, 'chars removed)');
        console.log('  üìù "plan mode on": ', rawPlanModeCount, '‚Üí', filteredPlanModeCount, '(', rawPlanModeCount - filteredPlanModeCount, 'instances removed)');
        console.log('  ‚è∏ Pause symbols: ', rawPauseCount, '‚Üí', filteredPauseCount, '(', rawPauseCount - filteredPauseCount, 'symbols removed)');
        console.log('  üìù "shift+tab": ', rawShiftTabCount, '‚Üí', filteredShiftTabCount, '(', rawShiftTabCount - filteredShiftTabCount, 'instances removed)');
        
        if (filteredPlanModeCount > 0) {
          console.log('üö® TERMINAL DIAGNOSTIC: FILTERING FAILED - "plan mode on" still present after filtering!');
          const filteredLines = filteredData.split('\n');
          const remainingPlanModeLines = filteredLines.filter(line => line.toLowerCase().includes('plan mode on'));
          console.log('üîç TERMINAL DIAGNOSTIC: Remaining plan mode lines (first 3):');
          remainingPlanModeLines.slice(0, 3).forEach((line, i) => {
            console.log(`    ${i + 1}. "${line.substring(0, 100)}${line.length > 100 ? '...' : ''}"`);
          });
        } else {
          console.log('‚úÖ TERMINAL DIAGNOSTIC: Filtering successful - all "plan mode on" removed');
        }
        
        console.log('üíª TERMINAL DIAGNOSTIC: Writing filtered data to xterm...');
        console.log('  üìè Writing', filteredData.length, 'characters to terminal');
        
        // Write the filtered terminal string
        xtermRef.current.write(filteredData);
        
        console.log('‚úÖ TERMINAL DIAGNOSTIC: Data written to xterm successfully');
      } else {
        console.log('‚ö†Ô∏è Terminal: No current terminal data in checkpoint');
        // Start fresh Claude CLI session
        xtermRef.current.write('Terminal ready. Type \x1b[38;5;174mclaude\x1b[0m to start a new session.\r\n\r\n');
      }
      
      // Add a separator to show where restoration ends
      xtermRef.current.writeln('\r\n' + '='.repeat(50));
      xtermRef.current.writeln('üìÇ Session restored from checkpoint');
      xtermRef.current.writeln('='.repeat(50) + '\r\n');
      
      // Ensure terminal is scrolled to bottom and properly fitted after restoration
      setTimeout(() => {
        if (xtermRef.current) {
          xtermRef.current.focus();
          // Scroll to bottom to show all restored content
          xtermRef.current.scrollToBottom();
          // Fit the terminal viewport with safety check
          if (fitAddonRef.current && terminalRef.current && 
              terminalRef.current.offsetWidth > 0 && terminalRef.current.offsetHeight > 0) {
            fitAddonRef.current.fit();
          }
        }
      }, 200);
      
      // ENHANCED: Reconnect to backend after checkpoint restoration with better session management
      // WITHOUT THIS: the terminal displays content but cannot accept keyboard input
      // CRITICAL FIX: Only run enhanced reconnection for sandbox terminals, NOT main terminals
      // Main terminals should maintain their existing connection to prevent focus/input issues
      if (sandboxMode) {
        // Check if Claude is already active - don't reinitialize if it is
        if (claudeActive) {
          console.log('‚ÑπÔ∏è Terminal: Claude already active, skipping reconnection');
          setTimeout(() => {
            if (xtermRef.current) {
              xtermRef.current.focus();
              console.log('üéØ Terminal: Focused existing Claude session');
            }
          }, 200);
          return;
        }
        
        setTimeout(async () => {
          console.log('üîÑ TERMINAL DIAGNOSTIC: Enhanced reconnection for sandbox after checkpoint restoration...');
          console.log('üîç TERMINAL DIAGNOSTIC: Current terminal state before reconnection:');
          console.log('  üìç sessionId:', sessionId);
          console.log('  üìç claudeActive:', claudeActive);
          console.log('  üìç isConnected:', isConnected);
          console.log('  üìç sandboxMode:', sandboxMode);
          
          // Clear any old session references that might cause conflicts
          const oldSessionId = sessionIdForVoiceRef.current || sessionId;
          if (oldSessionId) {
            console.log('üßπ TERMINAL DIAGNOSTIC: Clearing old session reference:', oldSessionId);
            // Add to failed cleanup list to prevent cleanup attempts
            failedCleanupSessionsRef.current.add(oldSessionId);
          }
          
          // Always create a fresh session after checkpoint restoration
          console.log('üì° TERMINAL DIAGNOSTIC: Creating fresh session for restored checkpoint...');
          console.log('‚ö†Ô∏è  TERMINAL DIAGNOSTIC: CRITICAL - This is where live Claude Code might be triggered!');
          try {
            const response = await fetch('/api/terminal-rest/sessions', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ cols: 130, rows: 30 })
            });
            
            if (response.ok) {
              const data = await response.json();
              const newSessionId = data.sessionId;
              
              console.log('üì° TERMINAL DIAGNOSTIC: Session creation response:', {
                sessionId: newSessionId,
                responseData: data
              });
              
              // Update all session references
              setSessionId(newSessionId);
              sessionIdForVoiceRef.current = newSessionId;
              setTerminalReady(true);
              
              console.log('‚úÖ TERMINAL DIAGNOSTIC: Fresh session created after restoration:', newSessionId);
              console.log('üîç TERMINAL DIAGNOSTIC: Session state updated - sessionId, voiceRef, terminalReady all set');
              
              // Only connect if we have a valid terminal instance and haven't connected already
              if (xtermRef.current && (!socketRef.current?.connected || !onDataDisposableRef.current)) {
                console.log('üîå TERMINAL DIAGNOSTIC: About to connect to backend with fresh session...');
                console.log('‚ö†Ô∏è  TERMINAL DIAGNOSTIC: CRITICAL - connectToBackend() might trigger Claude Code statusline!');
                console.log('üîç TERMINAL DIAGNOSTIC: Connection state before connectToBackend:');
                console.log('  üìç socket connected:', socketRef.current?.connected || 'no socket');
                console.log('  üìç onData disposable exists:', !!onDataDisposableRef.current);
                console.log('  üìç terminal exists:', !!xtermRef.current);
                
                await connectToBackend(xtermRef.current);
                
                console.log('‚úÖ TERMINAL DIAGNOSTIC: connectToBackend completed');
                console.log('üîç TERMINAL DIAGNOSTIC: Connection state after connectToBackend:');
                console.log('  üìç socket connected:', socketRef.current?.connected || 'no socket');
                console.log('  üìç onData disposable exists:', !!onDataDisposableRef.current);
                console.log('  üìç isConnected state:', isConnected);
              } else {
                console.log('‚ÑπÔ∏è TERMINAL DIAGNOSTIC: Skipping connection - already connected or terminal not ready');
                console.log('üîç TERMINAL DIAGNOSTIC: Skip reasons:');
                console.log('  üìç terminal exists:', !!xtermRef.current);
                console.log('  üìç socket connected:', socketRef.current?.connected || 'no socket');
                console.log('  üìç onData disposable exists:', !!onDataDisposableRef.current);
              }
            } else {
              console.error('‚ùå Terminal: Failed to create session, status:', response.status);
              const errorText = await response.text();
              console.error('‚ùå Terminal: Session creation error:', errorText);
            }
          } catch (error) {
            console.error('‚ùå Terminal: Network error creating session after restoration:', error);
          }
          
          // Ensure terminal has focus for immediate typing
          setTimeout(() => {
            if (xtermRef.current) {
              xtermRef.current.focus();
              console.log('üéØ Terminal: Focused and ready for input after restoration');
            }
          }, 500);
        }, 300); // Small delay to ensure terminal content is rendered first
      } else {
        // Main terminal - just ensure focus, don't disrupt existing connection
        // Also check if Claude is already active to prevent reinitializing
        if (claudeActive) {
          console.log('‚ÑπÔ∏è Main terminal: Claude already active, preserving session');
        }
        setTimeout(() => {
          if (xtermRef.current) {
            xtermRef.current.focus();
            console.log('üéØ Main terminal: Focused after checkpoint event (no reconnection needed)');
          }
        }, 500);
      }
    }, 300); // 300ms debounce delay to prevent rapid-fire restoration
    
    // Wrapper to handle the event listener properly
    const handleCheckpointRestored = (event: CustomEvent) => {
      debouncedCheckpointRestore(event);
    };
    
    const handleIdeStateChanged = (event: CustomEvent) => {
      if (event.detail?.type === 'checkpoint-restored') {
        // For ideStateChanged: event.detail.data IS the snapshot
        const terminalData = event.detail?.data?.terminal;
        
        if (!terminalData || typeof terminalData !== 'string') {
          console.log('‚ö†Ô∏è Terminal: No terminal data in ide state change');
          return;
        }
        
        if (!xtermRef.current) {
          console.log('‚ö†Ô∏è Terminal: Terminal not initialized yet');
          return;
        }
        
        // Clear and restore terminal
        xtermRef.current.clear();
        console.log(`üìú Terminal: Restoring terminal from IDE state change`);
        // Filter out thinking animations before writing
        let filteredData = filterThinkingAnimations(terminalData);
        filteredData = cleanStatusLines(filteredData);  // Layer 3 defense
        xtermRef.current.write(filteredData);
        
        // Add separator
        xtermRef.current.writeln('\r\n' + '='.repeat(50));
        xtermRef.current.writeln('üìÇ Session restored from checkpoint');
        xtermRef.current.writeln('='.repeat(50) + '\r\n');
        
        // Focus terminal
        setTimeout(() => {
          if (xtermRef.current) {
            xtermRef.current.focus();
          }
        }, 100);
      }
    };
    
    // Listen for both possible events
    // Removed handleInjectHistory - Copy to Main functionality removed to prevent server crashes
    // Users should manually copy/paste instead
    
    // Handle sandbox command injection
    const handleInjectCommand = (event: CustomEvent) => {
      const { command } = event.detail;
      if (command && xtermRef.current && !sandboxMode && socketRef.current?.connected) {
        console.log('üéØ Injecting Claude command into main terminal:', command);
        
        // Inject the command into the terminal as if the user typed it
        xtermRef.current.write('\r\n\x1b[38;5;214müéØ Executing extracted command:\x1b[0m\r\n');
        xtermRef.current.write('$ ' + command + '\r\n');
        
        // Send the command to the backend
        socketRef.current.emit('terminal:input', { 
          id: sessionId, 
          data: command + '\r',
          selectedClaudeModel 
        });
      }
    };
    
    // Remove any existing listeners first to prevent duplicates
    window.removeEventListener('checkpointRestored', handleCheckpointRestored as any);
    window.removeEventListener('ideStateChanged', handleIdeStateChanged as any);
    window.removeEventListener('terminal:injectCommand', handleInjectCommand as any);
    
    // Add fresh listeners
    window.addEventListener('checkpointRestored', handleCheckpointRestored as any);
    window.addEventListener('ideStateChanged', handleIdeStateChanged as any);
    window.addEventListener('terminal:injectCommand', handleInjectCommand as any);
    
    return () => {
      window.removeEventListener('checkpointRestored', handleCheckpointRestored as any);
      window.removeEventListener('ideStateChanged', handleIdeStateChanged as any);
      window.removeEventListener('terminal:injectCommand', handleInjectCommand as any);
    };
  }, [sessionId]); // Removed sandboxMode dependency to prevent event listener churn

  // Initialize speech recognition
  useEffect(() => {
    if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
      const SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = false; // Changed to false for better control
      recognitionInstance.interimResults = true;
      recognitionInstance.lang = 'en-US';
      recognitionInstance.maxAlternatives = 1;
      
      recognitionInstance.onresult = async (event: any) => {
        let finalTranscript = '';
        let interimTranscript = '';
        
        for (let i = event.resultIndex; i < event.results.length; i++) {
          const result = event.results[i];
          if (result && result[0] && result[0].transcript) {
            const transcript = result[0].transcript;
            if (result.isFinal) {
              finalTranscript += transcript;
            } else {
              interimTranscript += transcript;
            }
          }
        }
        
        // Show interim results as user speaks (but don't spam the terminal)
        if (interimTranscript && xtermRef.current) {
          // REMOVED: // REMOVED: console.log('Interim transcript:', interimTranscript);
          // Only show interim feedback in console, not in terminal to avoid spam
          // xtermRef.current.write(`\r\nüí¨ Hearing: "${interimTranscript}"`);
        }
        
        if (finalTranscript && finalTranscript.trim()) {
          // Clean up the transcript
          const cleanTranscript = finalTranscript.trim();
          // REMOVED: // REMOVED: console.log('Final speech recognized:', cleanTranscript);
          
          // Clear interim feedback and show final (minimal UI feedback)
          if (xtermRef.current) {
            // Minimal feedback - just show that voice was recognized
            // // xtermRef.current.writeln(`\r\nüé§ Voice: ${cleanTranscript}`); // REMOVED: Voice status message
            
            // Check if it's a Claude activation command
            if (cleanTranscript.toLowerCase().includes('claude')) {
              xtermRef.current.writeln('ü§ñ Claude mode activated');
              setClaudeActive(true);
              setConversationMode(true);
              
              // Activate supervision
              if (!isSupervisionActive) {
                enableSupervision();
              }
            }
            
            // Don&apos;t write to terminal UI directly - let the backend handle it
            // The text will appear when the backend processes it
            
            // Get the socket from the global socket service
            const socket = await getSocket();
            const currentSessionId = sessionIdForVoiceRef.current;
            
            // REMOVED: console.log('üé§ Voice input debug:', {
            //   sessionIdFromRef: currentSessionId,
            //   sessionIdFromState: sessionId,
            //   socketConnected: socket?.connected,
            //   transcript: cleanTranscript
            // });
            
            // Send to backend if we have a valid session
            if (socket && socket.connected && currentSessionId && !currentSessionId.startsWith('simulated-')) {
              // REMOVED: console.log('‚úÖ Sending voice input to real session:', currentSessionId);
              
              // Send as a single message (not character by character)
              socket.emit('terminal:input', { 
                id: currentSessionId, 
                data: cleanTranscript,
                selectedClaudeModel 
              });
              
              // Auto-execute for Claude commands  
              if (cleanTranscript.toLowerCase().includes('claude')) {
                xtermRef.current.write('\r\n');
                socket.emit('terminal:input', { 
                  id: currentSessionId, 
                  data: '\r',
                  selectedClaudeModel 
                });
              }
            } else {
              // logger?.warn('Cannot send voice input to backend:', {
              //   socketConnected: socket?.connected,
              //   sessionId: currentSessionId
              // });
              
              // Still show in terminal UI
              if (cleanTranscript.toLowerCase().includes('claude')) {
                xtermRef.current.write('\r\n');
              }
            }
            
            // Update current command buffer
            setCurrentCommand(prev => prev + cleanTranscript);
          }
        }
      };
      
      recognitionInstance.onerror = (event: any) => {
        // logger?.error('Speech recognition error:', event.error);
        setVoiceListening(false);
        if (xtermRef.current) {
          let errorMessage = '';
          switch (event.error) {
            case 'not-allowed':
              errorMessage = 'Microphone permission denied. Please allow microphone access.';
              break;
            case 'no-speech':
              errorMessage = 'No speech detected. Try speaking more clearly.';
              break;
            case 'audio-capture':
              errorMessage = 'No microphone found or audio capture failed.';
              break;
            case 'network':
              errorMessage = 'Network error occurred during speech recognition.';
              break;
            case 'service-not-allowed':
              errorMessage = 'Speech recognition service not allowed. Try using HTTPS.';
              break;
            case 'bad-grammar':
              errorMessage = 'Speech recognition grammar error.';
              break;
            default:
              errorMessage = `Speech recognition error: ${event.error}`;
          }
          xtermRef.current.writeln(`\r\n‚ùå ${errorMessage}`);
        }
      };
      
      recognitionInstance.onend = () => {
        // Auto-restart recognition if user is still in voice mode
        if (voiceListening && recognitionInstance) {
          try {
            setTimeout(() => {
              if (voiceListening) {
                recognitionInstance.start();
              }
            }, 100); // Small delay before restarting
          } catch (error) {
            // REMOVED: // REMOVED: console.log('Auto-restart failed:', error);
            setVoiceListening(false);
            if (xtermRef.current) {
              // xtermRef.current.writeln('\r\nüé§ Voice input ended');
            }
          }
        } else {
          setVoiceListening(false);
          if (xtermRef.current) {
            // xtermRef.current.writeln('\r\nüé§ Voice input ended');
          }
        }
      };
      
      setRecognition(recognitionInstance);
    } else {
      // logger?.warn('Speech recognition not supported in this browser');
    }
  }, []);

  const toggleVoiceRecognition = async () => {
    if (!recognition) {
      xtermRef.current?.writeln('\r\n‚ùå Speech recognition not supported in this browser');
      xtermRef.current?.writeln('Try using Chrome, Edge, or Safari for speech recognition');
      return;
    }
    
    if (voiceListening) {
      recognition.stop();
      setVoiceListening(false);
      xtermRef.current?.writeln('\r\nüé§ Voice input stopped');
    } else {
      try {
        // Request microphone permission first
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
          try {
            await navigator.mediaDevices.getUserMedia({ audio: true });
            xtermRef.current?.writeln('\r\nüé§ Microphone access granted');
          } catch (permError) {
            xtermRef.current?.writeln('\r\n‚ùå Microphone permission denied');
            xtermRef.current?.writeln('Please allow microphone access to use speech-to-text');
            return;
          }
        }
        
        // Check if we're on HTTPS (required for speech recognition in many browsers)
        if (location.protocol !== 'https:' && location.hostname !== 'localhost') {
          xtermRef.current?.writeln('\r\n‚ö†Ô∏è Speech recognition may require HTTPS');
        }
        
        recognition.start();
        setVoiceListening(true);
        xtermRef.current?.writeln('\r\nüé§ Voice input started - speak now...');
        xtermRef.current?.writeln('Say your commands clearly. Speech will be converted to text.');
      } catch (error) {
        // logger?.error('Failed to start speech recognition:', error);
        setVoiceListening(false);
        xtermRef.current?.writeln('\r\n‚ùå Failed to start voice input');
        xtermRef.current?.writeln(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
  };

  // Input buffer for when socket is reconnecting (moved to component scope)
  const inputBufferRef = useRef<string[]>([]);
  const isProcessingBufferRef = useRef(false);
  
  // Function to process buffered input (moved to component scope)
  const processInputBuffer = useCallback(() => {
    const socket = socketRef.current;
    const currentSessionId = sessionIdForVoiceRef.current || sessionId;
    
    if (!isProcessingBufferRef.current && inputBufferRef.current.length > 0 && socket?.connected && currentSessionId) {
      isProcessingBufferRef.current = true;
      while (inputBufferRef.current.length > 0) {
        const bufferedData = inputBufferRef.current.shift();
        if (bufferedData) {
          socket.emit('terminal:input', { 
            id: currentSessionId, 
            data: bufferedData,
            selectedClaudeModel 
          });
        }
      }
      isProcessingBufferRef.current = false;
    }
  }, [sessionId]);

  const connectToBackend = async (term: XTerm) => {
    // REMOVED: // REMOVED: console.log('üîå CONNECTING TO BACKEND:', { sessionId, terminalReady });
    
    // Prevent concurrent connections
    if (connectionInProgressRef.current) {
      // REMOVED: // REMOVED: console.log('‚ö†Ô∏è Connection already in progress, skipping...');
      return;
    }
    
    // Allow connection even without sessionId (server will generate one)
    if (!terminalReady) {
      console.log('‚ùå Terminal not ready yet');
      return;
    }
    
    // If we have a session ID, validate it
    if (sessionId && !validateCurrentSession()) {
      console.log('‚ùå Invalid session, will let server generate new one');
      // Don't return - continue and let server generate a new session
    }
    
    // Mark connection as in progress
    connectionInProgressRef.current = true;

    // Get Socket.IO instance to connect to Express backend
    // REMOVED: // REMOVED: console.log('üîß Getting Socket.IO instance...');
    const socket = await getSocket();
    // REMOVED: // REMOVED: console.log('‚úÖ Socket.IO instance obtained:', socket.connected ? 'CONNECTED' : 'DISCONNECTED');
    socketRef.current = socket;
    
    // Make socket globally available for file drop functionality
    if (typeof window !== 'undefined') {
      (window as any).terminalSocket = socket;
      console.log('üîå Terminal socket made globally available for drag-drop');
    }
    
    // Critical diagnostic: Check if we're using mock socket
    if (socket?.io?.engine?.transport?.name === 'mock' || socket?.id === 'mock-socket') {
      console.error('‚ùå CRITICAL: Terminal requires unified server mode!');
      console.error('====================================================');
      console.error('PROBLEM: You are using the wrong development server mode.');
      console.error('');
      console.error('SOLUTION: Stop the server and restart with:');
      console.error('  npm run dev');
      console.error('');
      console.error('DO NOT USE: npm run dev:legacy');
      console.error('');
      console.error('The unified server provides Socket.IO for terminal support.');
      console.error('See DEVELOPMENT.md for more information.');
      console.error('====================================================');
      
      // Visual warning for users
      if (xtermRef.current) {
        xtermRef.current.writeln('\x1b[31m‚ö†Ô∏è ERROR: Wrong server mode - Terminal disabled\x1b[0m');
        xtermRef.current.writeln('');
        xtermRef.current.writeln('\x1b[33mYou are using legacy mode which has no Socket.IO support.\x1b[0m');
        xtermRef.current.writeln('');
        xtermRef.current.writeln('To fix: Stop the server and run:');
        xtermRef.current.writeln('\x1b[36m  npm run dev\x1b[0m');
        xtermRef.current.writeln('');
        xtermRef.current.writeln('See DEVELOPMENT.md for details.');
      }
    } else {
      console.log('‚úÖ Using real Socket.IO connection');
    }
    
    // Focus terminal immediately when backend is connected
    const focusOnConnect = () => {
      if (term && !term.element?.contains(document.activeElement)) {
        setTimeout(() => {
          try {
            term.focus();
            console.log('‚úÖ Terminal focused after backend connection');
          } catch (error) {
            console.warn('Could not focus terminal after connection:', error);
          }
        }, 100);
      }
    };

    // Add connection status listeners for debugging
    socket.on('connect', () => {
      // REMOVED: // REMOVED: console.log('üü¢ Socket.IO CONNECTED to backend');
      // If reconnecting, re-establish terminal session
      if (isConnected && sessionId) {
        console.log('üîÑ Reconnected - re-establishing terminal session');
        socket.emit('terminal:create', { id: sessionId });
        focusOnConnect();
      }
    });
    
    // Handle terminal created response from server
    socket.on('terminal:created', ({ sessionId: serverSessionId, pid }) => {
      console.log('‚úÖ Terminal created on server:', { sessionId: serverSessionId, pid });
      
      // If we didn't have a session ID, use the one from the server
      if (!sessionId || sessionId === 'undefined' || sessionId === 'null') {
        console.log('üìù Updating session ID from server:', serverSessionId);
        setSessionId(serverSessionId);
        sessionIdForVoiceRef.current = serverSessionId;
      }
    });
    
    socket.on('disconnect', (reason) => {
      // REMOVED: // REMOVED: console.log('üî¥ Socket.IO DISCONNECTED:', reason);
      if (term) {
        term.writeln(`\r\n‚ö†Ô∏è Connection lost: ${reason}`);
      }
    });
    
    socket.on('connect_error', (error) => {
      // logger?.error('‚ùå Socket.IO CONNECTION ERROR:', error);
    });

    // Join the terminal session
    console.log('üì° Emitting terminal:create for session:', sessionId, 'Type:', typeof sessionId);
    
    // Critical fix: Don't send undefined or null as the session ID
    // Let the server generate one if we don't have a valid ID
    if (sessionId && sessionId !== 'undefined' && sessionId !== 'null') {
      socket.emit('terminal:create', { id: sessionId });
    } else {
      console.log('‚ö†Ô∏è No valid session ID, letting server generate one');
      socket.emit('terminal:create', {}); // Let server generate ID
    }

    // Flush buffered output to terminal (performance optimization)
    const flushOutput = () => {
      if (outputBufferRef.current.length > 0 && term) {
        const output = outputBufferRef.current.join('');
        outputBufferRef.current = [];
        term.write(output);
        
        // Removed forced scroll to bottom to prevent aggressive scrolling
        // Users should be able to scroll up to read history without being forced down
        
        // Smart auto-scroll logic for better Claude session tracking
        if (term.buffer && term.buffer.active) {
          const buffer = term.buffer.active;
          const viewportY = buffer.viewportY;
          const baseY = buffer.baseY;
          
          // Calculate how far from bottom (in lines)
          const linesFromBottom = baseY - viewportY;
          
          // Smart auto-scroll conditions (less aggressive):
          // 1. If exactly at bottom
          // 2. If within 2 lines of bottom (very close)
          // 3. If Claude is active, only scroll if user hasn't manually scrolled
          const shouldAutoScroll = 
            viewportY === baseY || // Exactly at bottom
            linesFromBottom <= 2 || // Within 2 lines (very close)
            (claudeActive && linesFromBottom <= 5 && !isUserScrolled); // Claude active, only if not manually scrolled
          
          if (shouldAutoScroll) {
            term.scrollToBottom();
            // Reset user scroll flag only if we're at the very bottom
            if (isUserScrolled && linesFromBottom <= 1) {
              setIsUserScrolled(false);
            }
          }
        }
      }
      outputFlushTimeoutRef.current = null;
    };

    // üß† CONTEXTUAL MEMORY FIX: Handle commands from server for contextual memory
    socket.on('terminal:command', ({ id, command }: { id: string; command: string }) => {
      if (id === sessionIdForVoiceRef.current) {
        console.log('üß† [CLIENT] Received command from server for contextual memory:', command);
        if (onTerminalCommand) {
          onTerminalCommand(command);
          console.log('‚úÖ [CLIENT] Forwarded command to contextual memory system');
        } else {
          console.warn('‚ö†Ô∏è [CLIENT] onTerminalCommand callback not available');
        }
      }
    });

    // Handle terminal output from backend
    socket.on('terminal:data', ({ id, data }: { id: string; data: string }) => {
      // Use the ref which gets updated immediately when session is created
      if (id === sessionIdForVoiceRef.current && term) {
        // Buffer the output for performance
        outputBufferRef.current.push(data);
        
        // Cancel any pending flush
        if (outputFlushTimeoutRef.current) {
          clearTimeout(outputFlushTimeoutRef.current);
        }
        
        // Detect Claude activity based on output patterns
        // Claude outputs typically have certain patterns or continuous streams
        if (data.length > 20 || data.includes('```') || data.includes('I\'ll') || data.includes('Let me')) {
          setClaudeActive(true);
          
          // Clear existing activity timeout
          if (claudeActivityTimeoutRef.current) {
            clearTimeout(claudeActivityTimeoutRef.current);
          }
          
          // Set new timeout - consider Claude inactive after 2 seconds of no output
          claudeActivityTimeoutRef.current = setTimeout(() => {
            setClaudeActive(false);
          }, 2000);
        }
        
        // Simplified flush: Always flush quickly for responsiveness
        // Use a very short timeout to batch rapid updates
        outputFlushTimeoutRef.current = setTimeout(flushOutput, 10);
        
        // Memory system: Track Claude interactions
        if (memory.isEnabled && sessionStorage.getItem('memory_context_injected') === 'true') {
          const lastCommand = sessionStorage.getItem('last_claude_command');
          if (lastCommand && data.length > 50) { // Only track substantial responses
            // Add interaction to memory
            memory.addInteraction(lastCommand, data, 'command').then(() => {
              // Clear the tracking flags
              sessionStorage.removeItem('last_claude_command');
              sessionStorage.removeItem('memory_context_injected');
            });
          }
        }
        
        // Check if we should display statusline after command completion
        if (terminalSettings.statusLine.enabled && data.includes('\n')) {
          // Check for command prompt pattern (indicates command completed)
          if (data.match(/\$\s*$/) || data.match(/>\s*$/) || data.match(/#\s*$/) || data.match(/‚ùØ\s*$/)) {
            // Generate and display statusline
            const width = term.cols || 80;
            const separator = '‚îÄ'.repeat(width);
            
            // Line 1: Session info and tokens
            const sessionInfo = `Session: ${sessionId?.slice(-8) || 'none'} | Tokens: ${totalTokens || 0} | Cost: ${usageCost} | Reset: ${blockResetTime}`;
            const model = 'claude-3-5-sonnet';
            const line1 = `${sessionInfo}${' '.repeat(Math.max(0, width - sessionInfo.length - model.length))}${model}`;
            
            // Line 2: Current file and git info
            const currentFileDisplay = currentFile || 'No file open';
            const gitBranch = 'main'; // TODO: Get from git status
            const line2 = `File: ${currentFileDisplay} | Branch: ${gitBranch}`;
            
            // Line 3: Status and model
            const modelDisplay = selectedClaudeModel.includes('4-opus') ? 'Opus 4.1' :
                                selectedClaudeModel.includes('4-sonnet') ? 'Sonnet 4.0' :
                                selectedClaudeModel.includes('3-7-sonnet') ? 'Sonnet 3.7' :
                                selectedClaudeModel.includes('3-5-sonnet') ? 'Sonnet 3.5' :
                                selectedClaudeModel.includes('3-5-haiku') ? 'Haiku 3.5' :
                                selectedClaudeModel.includes('sonnet') ? 'Sonnet' : 
                                selectedClaudeModel.includes('opus') ? 'Opus' : 
                                selectedClaudeModel.includes('haiku') ? 'Haiku' : 'Claude';
            const mode = `Model: ${modelDisplay}`;
            const status = agentsRunning ? 'AI Team Active' : claudeActive ? 'Claude Active' : 'Ready';
            const mcpInfo = mcpStatus.total > 0 ? ` | MCP: ${mcpStatus.healthy}/${mcpStatus.total} ` : '';
            const line3 = `${mode} | ${status}${mcpInfo}`;
            
            // Write the statusline
            term.write('\r\n' + separator);
            term.write('\r\n' + line1);
            term.write('\r\n' + line2);
            term.write('\r\n' + line3);
            term.write('\r\n' + separator + '\r\n');
          }
        }
        
        // Capture terminal output for session tracking
        if (onTerminalData) {
          onTerminalData(data);
        }
        
        // Check for Claude activation in output
        if (data.includes('Claude conversation mode') || data.includes('Claude>')) {
          // REMOVED: // REMOVED: console.log('ü§ñ CLAUDE ACTIVATED');
          setClaudeActive(true);
          setConversationMode(true);
        }
        
        // Track current file for status line
        // Simple pattern matching for common file operations
        const lines = data.split('\n');
        for (const line of lines) {
          // Look for editor commands with file names
          const editorMatch = line.match(/(?:code|vim|nano|edit)\s+([^\s]+\.[a-zA-Z0-9]+)/);
          if (editorMatch) {
            setCurrentFile(editorMatch[1]);
          }
          // Look for cd commands to track current directory
          const cdMatch = line.match(/cd\s+([^\s]+)/);
          if (cdMatch && !cdMatch[1].startsWith('-')) {
            // Reset file when changing directories
            setCurrentFile(null);
          }
        }
        
        // Check for errors to trigger Error Doctor
        if (data.includes('error') || data.includes('Error') || data.includes('failed')) {
          // REMOVED: // REMOVED: console.log('‚ùå ERROR DETECTED:', data.substring(0, 100));
          setLastError(data);
        }
      }
    });

    // Handle terminal creation confirmation
    socket.on('terminal:created', ({ id }: { id: string }) => {
      if (id === sessionId) {
        // REMOVED: // REMOVED: console.log('‚úÖ Terminal connected to Express backend');
        setIsConnected(true);
        
        // For sandbox mode, restore the terminal history from checkpoint
        if (sandboxMode && sandboxSession && term) {
          // Check if this is an agent terminal (Phase 2)
          const isAgentTerminal = !!(sandboxSession.checkpointData?.role || sandboxSession.checkpointData?.teamId);
          
          if (isAgentTerminal) {
            console.log('ü§ñ Connecting to agent terminal:', sandboxSession.id);
            
            // Connect to agent terminal session via WebSocket
            socket.emit('agent:terminal:connect', {
              agentId: sandboxSession.id
            });
            
            // Listen for agent terminal data
            const handleAgentData = ({ agentId, data }: { agentId: string; data: string }) => {
              if (agentId === sandboxSession.id && term) {
                term.write(data);
              }
            };
            
            socket.on('agent:terminal:data', handleAgentData);
            
            // Clean up listener on unmount
            return () => {
              socket.off('agent:terminal:data', handleAgentData);
            };
          } else if (sandboxSession.terminalHistory) {
            // Regular sandbox mode - restore history
            console.log('üìú Restoring terminal history for sandbox, length:', sandboxSession.terminalHistory.length);
            
            // Write the historical terminal content
            // Use the same comprehensive cleaning as initial sandbox setup to remove Claude thinking animations
            let cleanedHistory = filterThinkingAnimations(sandboxSession.terminalHistory);
            cleanedHistory = cleanStatusLines(cleanedHistory);  // Layer 3 defense
            
            // Write the history
            term.write(cleanedHistory);
            
            // Add a separator to show where history ends and new session begins
            term.write('\r\n\r\n');
            term.write('\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n');
            term.write('\x1b[38;5;174müìÇ Checkpoint restored - Continue from here\x1b[0m\r\n');
            term.write('\x1b[38;5;174m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\x1b[0m\r\n');
            term.write('\r\n');
          }
        } else if (!sandboxMode && term) {
          // Normal mode - just show connection message
          term.write('\r\n‚úÖ Connected to backend terminal\r\n');
        }
        connectionInProgressRef.current = false; // Connection complete
        
        // Focus terminal after successful connection
        focusOnConnect();
        
        // Send initial resize
        if (fitAddonRef.current && xtermRef.current) {
          const { cols, rows } = xtermRef.current;
          socket.emit('terminal:resize', { id: sessionId, cols, rows });
        }
        
        // Process any buffered input after connection
        if (typeof processInputBuffer === 'function') {
          processInputBuffer();
        }
      }
    });

    // Handle errors
    socket.on('terminal:error', ({ message }: { message: string }) => {
      // logger?.error('Terminal error:', message);
      term.writeln(`\r\n‚ùå Terminal error: ${message}`);
      setIsConnected(false);
      connectionInProgressRef.current = false; // Connection failed
    });

    // Handle Claude session events
    socket.on('claude:output', ({ sessionId: claudeSessionId, data }: { sessionId: string; data: string }) => {
      if (term) {
        term.write(data);
      }
    });

    socket.on('claude:sessionComplete', ({ sessionId: claudeSessionId, duration }: { sessionId: string; duration: number }) => {
      if (term) {
        term.writeln(`\r\n‚úÖ Claude session completed in ${(duration / 1000).toFixed(2)}s`);
        
        // Debug logging for audio alert decision
        console.log('üîä Audio Alert Debug:', {
          sessionId: claudeSessionId,
          duration: duration,
          durationSeconds: (duration / 1000).toFixed(2),
          audioAlertsEnabled: audioAlertsEnabled,
          meetsThreshold: duration > 20000,
          willPlaySound: audioAlertsEnabled && duration > 20000
        });
        
        // Play sound alert if enabled and duration > 20s
        if (audioAlertsEnabled && duration > 20000) {
          console.log('üîä Playing completion alert sound...');
          soundAlertService.playCompletionAlert().then(() => {
            console.log('üîä Completion alert sound played successfully');
          }).catch((error) => {
            console.warn('üîá Failed to play completion alert:', error);
          });
        } else {
          if (!audioAlertsEnabled) {
            console.log('üîá Audio alerts disabled - no sound played');
          }
          if (duration <= 20000) {
            console.log(`üîá Session too short (${(duration / 1000).toFixed(2)}s ‚â§ 20s) - no sound played`);
          }
        }
      }
      setClaudeActive(false);
      setConversationMode(false);
    });

    socket.on('claude:error', ({ message }: { message: string }) => {
      if (term) {
        term.writeln(`\r\n‚ùå Claude Error: ${message}`);
      }
    });

    // Handle AI Team progress updates
    socket.on('ai-team:progress', (data: any) => {
      if (term && data.agent) {
        // Clear current line and write progress update
        term.write('\r\x1b[K'); // Clear current line
        term.writeln(`[${data.agent.name}] ${data.agent.currentTask} (${data.agent.progress}%)`);
        term.write('$ '); // Restore prompt
      }
    });

    // Handle AI Team completion
    socket.on('ai-team:complete', (data: any) => {
      if (term) {
        term.writeln(`\r\n‚úÖ AI Team completed! Generated ${data.filesCount || 0} files`);
        term.write('$ ');
      }
    });

    // Set up terminal input handling - send to backend
    // Skip in sandbox mode - it's read-only (but allow agent terminals)
    if (sandboxMode && !agentMode) {
      console.log('üèñÔ∏è Sandbox mode - terminal is read-only');
      return;
    }
    
    // Agent terminals can accept input for interactive commands
    if (agentMode) {
      console.log('ü§ñ Agent terminal input enabled for:', agentSession?.name);
    }
    
    // Clean up any existing handler first
    if (onDataDisposableRef.current) {
      onDataDisposableRef.current.dispose();
      onDataDisposableRef.current = null;
    }
    
    // Create new handler and store the disposable
    onDataDisposableRef.current = term.onData((data) => {
      // Only log important events, not every character
      
      // Use the ref for most current session ID
      const currentSessionId = sessionIdForVoiceRef.current || sessionId;
      
      // Check session validity first
      if (!currentSessionId) {
        term.writeln('\r\n‚ö†Ô∏è Terminal session not initialized. Please refresh the page.');
        return;
      }
      
      // Validate session before processing input (updated to use current session)
      if (!isValidSession(currentSessionId)) {
        term.writeln('\r\n‚ö†Ô∏è Terminal session is invalid. Please refresh the page.');
        return;
      }
      
      if (!socket.connected) {
        // Buffer input when disconnected
        inputBufferRef.current.push(data);
        // Show local echo for better UX
        term.write(data);
        
        // Show reconnection message once
        if (!term.buffer.active.getLine(term.buffer.active.cursorY)?.translateToString().includes('Reconnecting')) {
          term.writeln('\r\n‚ö†Ô∏è Connection lost. Reconnecting... (your input is buffered)');
        }
        return;
      }
      
      // Send input to backend via Socket.IO with current session ID
      console.log('üì§ Sending terminal input for session:', currentSessionId);
      socket.emit('terminal:input', { 
        id: currentSessionId, 
        data,
        selectedClaudeModel 
      });
      
      // Process any buffered input
      processInputBuffer();
      
      // Track current line buffer for command history
      if (data === '\r') {
        // üîç SIMPLE DEBUG: Only log Enter key events
        if (currentLineBuffer.trim()) {
          console.log('üéØ [ENTER-KEY] Command typed:', currentLineBuffer.trim());
        } else {
          console.log('üéØ [ENTER-KEY] Enter pressed but no command typed');
        }
        
        // Enter pressed - command was sent
        if (currentLineBuffer.trim()) {
          const command = currentLineBuffer.trim();
          console.log('üîç [CONTEXTUAL-DEBUG] Processing command:', command);
          setCommandHistory(prev => [...prev, command]);
          
          // Check for copy-files command first
          if (command === 'copy-files' || command === 'copy-for-claude') {
            // Try to copy the uploaded files to clipboard
            const copyFunction = (window as any).copyFilesForClaude;
            if (copyFunction && typeof copyFunction === 'function') {
              copyFunction().then((success: boolean) => {
                if (success) {
                  console.log('‚úÖ Files copied to clipboard via terminal command');
                } else {
                  console.log('‚ùå Failed to copy files via terminal command');
                }
              });
            } else {
              term.write('\r\n‚ö†Ô∏è No files have been uploaded yet.\r\n');
              term.write('Drag and drop files into the terminal first.\r\n\r\n');
            }
            return; // Don't process this command further
          }
          
          // Check if this is an AI command that should be handled locally
          terminalCommandHandler.processCommand(command).then(result => {
            if (result.handled) {
              // Command was handled by the AI system
              if (result.output) {
                term.write(result.output);
              }
              if (result.error) {
                term.write(result.error);
              }
              // Don't send to backend - it was handled locally
              return;
            }
            
            // Not an AI command - continue with normal processing
            // Memory system: Inject context for Claude commands
            if (memory.isEnabled && memory.isActive && command.toLowerCase().includes('claude')) {
              // Get memory context and inject it
              memory.getInjectionContext().then(memoryContext => {
                if (memoryContext) {
                  // Prepend memory context to the command
                  const contextPrefix = `\n[Memory Context: ${memoryContext}]\n`;
                  // Note: Since we're using PTY, we can't modify the command that was already sent
                  // Instead, we'll track it for response handling
                  sessionStorage.setItem('last_claude_command', command);
                  sessionStorage.setItem('memory_context_injected', 'true');
                }
              });
            }
          });
            
          // Notify parent component about the command
          if (onTerminalCommand) {
            onTerminalCommand(command);
            console.log('‚úÖ [CALLBACK] onTerminalCommand called with:', command);
          } else {
            console.warn('‚ö†Ô∏è [CALLBACK] onTerminalCommand callback missing');
          }
        }
        setCurrentLineBuffer('');
      } else if (data === '\x7F') {
        // Backspace
        setCurrentLineBuffer(prev => prev.slice(0, -1));
      } else if (data >= ' ' || data === '\t') {
        // Regular character
        setCurrentLineBuffer(prev => {
          const newBuffer = prev + data;
          // Check if "claude" has been typed
          if (newBuffer.toLowerCase().includes('claude')) {
            // Activate supervision when claude is typed
            if (!isSupervisionActive) {
              enableSupervision();
              // REMOVED: // REMOVED: console.log('üëÅÔ∏è Supervision auto-activated: claude detected');
            }
            if (onClaudeTyped) {
              onClaudeTyped();
            }
          }
          return newBuffer;
        });
      }
    });

    // Handle resize
    const handleResize = () => {
      if (fitAddonRef.current && xtermRef.current && socket.connected) {
        // Safety check: Ensure terminal container has valid dimensions
        if (terminalRef.current && terminalRef.current.offsetWidth > 0 && terminalRef.current.offsetHeight > 0) {
          try {
            fitAddonRef.current.fit();
            const { cols, rows } = xtermRef.current;
            socket.emit('terminal:resize', { id: sessionId, cols, rows });
            
            // Button positioning is handled by CSS - no recalculation needed
          } catch (error) {
            // Silently handle dimension errors during resize
            console.warn('Terminal resize skipped - dimensions not ready');
          }
        }
      }
    };

    // Duplicate resize observer removed - already handled in createTerminal
  };

  // Removed duplicate useEffect - connection is already handled above

  // Handle AI Team spawn
  const handleSpawnAgents = async () => {
    if (!xtermRef.current) return;
    
    xtermRef.current.writeln('\r\n‚ö° Spawning AI Team...');
    xtermRef.current.writeln('ü§ñ Connecting to AI Team Management System...');
    
    try {
      // Call the new Claude Bridge API endpoint on the unified server
      // Use the current origin to handle dynamic ports
      const unifiedServerUrl = typeof window !== 'undefined' 
        ? window.location.origin 
        : (process.env.NEXT_PUBLIC_UNIFIED_SERVER_URL || 'http://localhost:3001');
      const response = await fetch(`${unifiedServerUrl}/api/claude-bridge/spawn`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          requirement: 'Build a complete project based on user requirements',
          sessionId: sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setAgentsRunning(true);
        
        xtermRef.current.writeln(`‚úÖ AI Team spawned with ${data.agents?.length || 0} automated agents`);
        xtermRef.current.writeln(`üìä Team ID: ${data.teamId}`);
        xtermRef.current.writeln(`üë• ${data.agents?.length || 0} agents deployed`);
        
        // Display agent details
        if (data.agents && data.agents.length > 0) {
          xtermRef.current.writeln('\r\nü§ñ Agent Roster:');
          data.agents.forEach((agent: any) => {
            xtermRef.current?.writeln(`  ‚Ä¢ ${agent.name} - ${agent.role}`);
          });
        }
        
        xtermRef.current.writeln('\r\nAgents are now working in parallel. Updates will appear here.');
        xtermRef.current.write('\r\n$ ');
        
        // Create agent terminal tabs (Phase 1) if feature flag enabled
        const agentTabsEnabled = process.env.NEXT_PUBLIC_ENABLE_AGENT_TABS === 'true';
        if (agentTabsEnabled && data.agents && data.agents.length > 0) {
          xtermRef.current.writeln('\r\nüìã Creating agent terminal tabs...');
          
          // Get socket for WebSocket communication
          const socket = await getSocket();
          
          data.agents.forEach((agent: any, index: number) => {
            // Add a small delay for each agent to ensure events are processed
            setTimeout(() => {
              // Create agent session data with unique ID
              const agentSessionData = {
                id: agent.id || `agent_${data.teamId}_${index}_${Date.now()}`,
                name: agent.name || `${agent.role} Agent`,
                role: agent.role?.toLowerCase() || 'fullstack',
                teamId: data.teamId,
                workTreePath: agent.workTreePath,
                terminalHistory: `Agent initialized: ${agent.name}\nRole: ${agent.role}\nTeam: ${data.teamId}\n`,
                status: agent.status || 'initializing',
                progress: 0,
                currentTask: agent.currentTask || 'Setting up workspace...',
                processId: agent.processId
              };
              
              console.log(`üìã Creating agent tab for: ${agentSessionData.name} (${agentSessionData.id})`);
              
              // Dispatch event to create agent tab
              window.dispatchEvent(new CustomEvent('terminal:createAgentSession', {
                detail: agentSessionData
              }));
              
              // Phase 2: Also create agent terminal session via WebSocket
              if (socket?.connected) {
                socket.emit('agent:terminal:create', {
                  agentId: agentSessionData.id,
                  teamId: agentSessionData.teamId,
                  role: agentSessionData.role
                });
                console.log(`ü§ñ Created agent terminal session for ${agentSessionData.name}`);
              }
            }, index * 100); // 100ms delay between each agent
          });
          
          xtermRef.current.writeln(`‚úÖ Created ${data.agents.length} agent terminal tabs`);
        }
        
        // Notify parent component
        if (onAgentsSpawn) {
          onAgentsSpawn();
        }
        
        // Update the AITeamDashboard in PreviewPanel
        if (typeof window !== 'undefined' && (window as any).updateAITeamDashboard) {
          (window as any).updateAITeamDashboard({
            teamId: data.teamId,
            status: data.status || 'active',
            agents: data.agents || [],
            progress: { overall: 0 },
            generatedFiles: 0,
            requirement: 'Build a complete project based on user requirements',
            workflow: data.workflow,
            executionType: data.executionType
          });
        }
      } else {
        throw new Error(data.error || 'Failed to spawn AI team');
      }
    } catch (error) {
      // logger?.error('AI Team spawn failed:', error);
      xtermRef.current.writeln(`‚ùå Failed to spawn AI team: ${error}`);
      xtermRef.current.writeln('üîß Check that the server is running and try again');
      xtermRef.current.write('\r\n$ ');
      
      setAgentsRunning(false);
    }
  };

  // Handle sandbox creation
  const handleSandboxAction = async () => {
    console.log('üéØ handleSandboxAction called from Terminal');
    
    // Reset previous status
    console.log('üîÑ Setting status to: creating');
    setSandboxCreationStatus('creating');
    setSandboxCreationMessage('');
    setCreatedSandboxId('');
    
    // Add console logging for debugging
    console.log('üöÄ Creating new sandbox...');
    
    const projectName = `sandbox-${Date.now().toString(36).slice(-6)}`;
    
    try {
      const response = await fetch('/api/sandbox', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-user-id': 'default-user'
        },
        body: JSON.stringify({
          projectId: projectName
        })
      });
      
      const data = await response.json();
      console.log('üì¶ Sandbox API response:', data);
      
      if (data.success) {
        console.log('üîÑ Setting status to: success');
        setSandboxCreationStatus('success');
        setSandboxCreationMessage(`‚úÖ Sandbox "${projectName}" created successfully!`);
        setCreatedSandboxId(data.sandbox.id);
        
        // Log success
        console.log('‚úÖ Sandbox created:', data.sandbox);
        
        // Show alert for immediate feedback
        alert(`‚úÖ Sandbox created successfully!\n\nID: ${data.sandbox.id}\nProject: ${data.sandbox.projectId}\nPath: ${data.sandbox.path}\n\nA new tab will open with your sandbox workspace.`);
        
        // Try to show toast (may fail with CSS issues)
        try {
          addToast({
            message: `‚úÖ Sandbox "${projectName}" created!`,
            type: 'success'
          });
        } catch (e) {
          console.warn('Toast notification failed:', e);
        }
        
        // Emit event for other components
        window.dispatchEvent(new CustomEvent('sandbox:created', {
          detail: { sandboxId: data.sandbox.id }
        }));
        
        // Navigate to consultation workspace after short delay
        setTimeout(() => {
          console.log('üîÑ Opening sandbox workspace:', data.sandbox.id);
          // Open consultation page with sandbox ID as parameter
          const workspaceUrl = `/consultation?sandbox=${data.sandbox.id}`;
          window.open(workspaceUrl, '_blank');
          
          // Reset status after navigation
          setSandboxCreationStatus('idle');
          setSandboxCreationMessage('');
        }, 2000); // Shorter delay before opening
        
      } else {
        throw new Error(data.error || 'Unknown error');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      
      setSandboxCreationStatus('error');
      setSandboxCreationMessage(`‚ùå Failed: ${errorMessage}`);
      
      // Console error for debugging
      console.error('‚ùå Sandbox creation failed:', error);
      
      // Try toast (may fail)
      try {
        addToast({
          message: `‚ùå Failed to create sandbox: ${errorMessage}`,
          type: 'error'
        });
      } catch (e) {
        console.warn('Toast notification failed:', e);
      }
      
      // For critical errors, use browser alert as fallback
      if (errorMessage.includes('Maximum sandbox limit')) {
        alert(`Cannot create sandbox: ${errorMessage}`);
      }
      
      // Keep error visible for 5 seconds
      setTimeout(() => {
        setSandboxCreationStatus('idle');
        setSandboxCreationMessage('');
      }, 5000);
    }
  };

  // Get current context for Claude
  const getCurrentContext = () => {
    const context = {
      project: 'Next.js 14 + TypeScript + Tailwind IDE',
      directory: 'coder1-ide-next',
      agents_active: agentsRunning,
      supervision_active: isSupervisionActive,
      terminal_mode: terminalMode,
      voice_input: voiceListening
    };
    return JSON.stringify(context, null, 2);
  };

  return (
    <div className="h-full flex flex-col bg-bg-primary relative">
      {/* Terminal Header - Exact 40px height */}
      <div 
        className={`flex items-center justify-between border-b border-border-default px-3 bg-bg-secondary ${
          sandboxMode 
            ? 'border-t border-t-orange-500/50 shadow-glow-orange' 
            : 'border-t border-t-coder1-cyan/50 shadow-glow-cyan'
        }`}
        style={{ height: spacing.terminalHeader.height }}
      >
        {/* Left section - Edit mode and settings */}
        <div className="flex items-center gap-2">
          {/* Voice-to-text button */}
          <button
            data-tour="voice-input-button"
            onClick={toggleVoiceRecognition}
            className={`terminal-control-btn p-1.5 rounded-md ${voiceListening ? 'bg-red-600 bg-opacity-20' : ''}`}
            title={voiceListening ? 'Stop voice input (LISTENING)' : 'Start voice-to-text'}
          >
            {voiceListening ? <MicOff className="w-4 h-4 text-red-500" /> : <Mic className="w-4 h-4" />}
          </button>

          {/* Terminal Settings */}
          <TerminalSettings
            selectedClaudeModel={selectedClaudeModel}
            setSelectedClaudeModel={handleModelChange}
            showModelDropdown={showModelDropdown}
            setShowModelDropdown={setShowModelDropdown}
            audioAlertsEnabled={audioAlertsEnabled}
            setAudioAlertsEnabled={setAudioAlertsEnabled}
            selectedSoundPreset={selectedSoundPreset}
            setSelectedSoundPreset={setSelectedSoundPreset}
            showSoundPresetDropdown={showSoundPresetDropdown}
            setShowSoundPresetDropdown={setShowSoundPresetDropdown}
            soundButtonRef={soundButtonRef}
            soundDropdownRef={soundDropdownRef}
            terminalSettings={terminalSettings}
            setTerminalSettings={setTerminalSettings}
            xtermRef={xtermRef}
          />
        </div>

        {/* Right section - All terminal control buttons */}
        <div className="flex items-center gap-2">
          {/* Stop button */}
          <button
            onClick={() => {
              // Stop all running processes
              setAgentsRunning(false);
              setVoiceListening(false);
              // Supervision is managed by context, not local state
              
              // Stop speech recognition if active
              if (recognition && voiceListening) {
                recognition.stop();
              }
              
              xtermRef.current?.writeln('\r\nüõë Emergency Stop Activated:');
              xtermRef.current?.writeln('‚Ä¢ All AI agents stopped');
              xtermRef.current?.writeln('‚Ä¢ Voice input disabled');
              xtermRef.current?.writeln('‚Ä¢ Supervision disabled');
              xtermRef.current?.writeln('‚Ä¢ Terminal processes killed');
              xtermRef.current?.writeln('\r\nSystem ready for new commands.');
            }}
            className="terminal-stop-btn flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md"
            title="Emergency stop - halt all processes"
          >
            <StopCircle className="w-4 h-4" />
            <span>Stop</span>
          </button>


          {/* Memory button with dropdown */}
          <div className="relative">
            <button
              data-tour="memory-button"
              onClick={() => setShowMemoryDropdown(!showMemoryDropdown)}
              className="terminal-control-btn flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md"
              title="Memory system status and controls"
            >
              <Brain className="w-4 h-4" />
              <span>Memory</span>
            </button>
            
            {/* Memory dropdown */}
            {showMemoryDropdown && (
              <div 
                ref={memoryDropdownRef}
                className="absolute top-full mt-2 right-0 bg-bg-secondary border border-border-default rounded-lg shadow-lg p-3 z-50 min-w-[250px]"
              >
                <div className="text-xs space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-gray-400">Status:</span>
                    <span className={memory.isActive ? "text-green-400" : "text-yellow-400"}>
                      {memory.isActive ? 'Active' : 'Initializing'}
                    </span>
                  </div>
                  {memory.stats.sessions > 0 && (
                    <>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-400">Sessions:</span>
                        <span className="text-gray-300">{memory.stats.sessions}</span>
                      </div>
                      <div className="flex items-center justify-between">
                        <span className="text-gray-400">Tokens:</span>
                        <span className="text-gray-300">{memory.stats.tokens}</span>
                      </div>
                    </>
                  )}
                  
                  {/* Context Statistics (moved from footer) */}
                  {contextStats.isActive && (
                    <>
                      <div className="border-t border-border-default pt-2 mt-2">
                        <div className="text-xs text-gray-400 uppercase tracking-wider mb-2">Context Memory</div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400">Memories:</span>
                          <span className="text-purple-400 font-medium">{contextStats.totalMemories}</span>
                        </div>
                        <div className="flex items-center justify-between">
                          <span className="text-gray-400">Contexts:</span>
                          <span className="text-purple-400 font-medium">{contextStats.totalSessions}</span>
                        </div>
                      </div>
                    </>
                  )}
                  
                  <div className="border-t border-border-default pt-2 mt-2">
                    <button
                      onClick={() => {
                        memory.toggleMemory();
                        setMemoryEnabled(!memoryEnabled);
                      }}
                      className="w-full flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md bg-gradient-to-br from-sky-100/10 to-purple-100/10 border border-cyan-500/50 text-white backdrop-blur-sm transition-all duration-300 hover:border-orange-400/70 hover:bg-gradient-to-br hover:from-orange-100/10 hover:to-amber-100/10 hover:backdrop-blur-md"
                      style={{
                        background: 'linear-gradient(135deg, rgba(125, 211, 252, 0.1) 0%, rgba(187, 154, 247, 0.1) 100%)',
                        border: '1px solid rgba(0, 217, 255, 0.5)',
                        backdropFilter: 'blur(4px)',
                        WebkitBackdropFilter: 'blur(4px)'
                      }}
                    >
                      {memory.isEnabled ? 'Disable Memory' : 'Enable Memory'}
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>


          {/* Enhanced Supervision button */}
          <button
            data-tour="supervision-button"
            onClick={() => {
              if (isSupervisionActive) {
                // If supervision is active, disable it
                toggleSupervision();
                xtermRef.current?.writeln('\r\nüëÅÔ∏è AI Supervision Disabled');
                xtermRef.current?.writeln('Manual oversight mode restored.');
              } else {
                // If not active, open configuration modal
                setConfigModalOpen(true);
                xtermRef.current?.writeln('\r\nüß† Opening AI Supervision Configuration...');
                xtermRef.current?.writeln('Program your custom supervision bot for this project.');
              }
            }}
            className="terminal-control-btn flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md"
            title="AI monitors and guides your work"
          >
            <Eye className="w-4 h-4" />
            <span>Supervision</span>
          </button>

          {/* Sandbox Button */}
          <button
            onClick={handleSandboxAction}
            className="terminal-control-btn flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium rounded-md"
            title="Create new sandbox workspace for isolated development"
          >
            <Plus className="w-4 h-4" />
            <span>Sandbox</span>
          </button>

        </div>
      </div>

      {/* Terminal Content - Let xterm.js handle scrolling */}
      <div 
        className="flex-1 relative"
        style={{
          backgroundColor: '#0a0a0a',
          overflow: 'auto',
          paddingBottom: '200px'  // Increased black box space to clear footer/status bar
        }}
        onClick={() => {
          // Focus the terminal when clicked
          if (xtermRef.current) {
            xtermRef.current.focus();
          }
        }}
      >
        <div 
          ref={terminalRef} 
          data-tour="terminal-input"
          style={{
            width: '100%',
            minHeight: '100%'
          }}
        />
      </div>

      {/* Error Doctor removed to fix terminal overlap issue */}

      {/* Supervision Configuration Modal */}
      <SupervisionConfigModal 
        isOpen={isConfigModalOpen}
        onClose={() => setConfigModalOpen(false)}
        onSave={saveConfiguration}
        currentConfig={activeConfiguration}
        templates={templates}
      />
      
      {/* Claude Copy Button - appears when files are dropped */}
      {showClaudeCopyButton && (
        <button
          onClick={async () => {
            try {
              await navigator.clipboard.writeText(claudeCopyContent);
              
              // Show success in terminal with clear paste instructions
              if (xtermRef.current) {
                xtermRef.current.writeln('\r\n\x1b[32m‚úÖ FILES COPIED!\x1b[0m');
                xtermRef.current.writeln('\x1b[36müìã Next:\x1b[0m Press \x1b[33mCmd+V\x1b[0m (Mac) or \x1b[33mCtrl+V\x1b[0m (PC) to paste in Claude Code');
                xtermRef.current.writeln('\x1b[2m   Or click in any text field and paste\x1b[0m\r\n');
              }
              
              // Hide button after successful copy
              setTimeout(() => {
                setShowClaudeCopyButton(false);
              }, 2000);
            } catch (err) {
              console.error('Failed to copy:', err);
              if (xtermRef.current) {
                xtermRef.current.writeln('\r\n\x1b[31m‚ùå Copy failed. Please try again.\x1b[0m\r\n');
              }
            }
          }}
          className="absolute px-2 py-1 bg-cyan-500 hover:bg-cyan-400 text-black text-xs font-medium rounded shadow hover:shadow-md transition-all duration-150 flex items-center gap-1 z-50 border border-cyan-400"
          title="Copy files for Claude Code"
          style={{
            position: 'absolute',
            // Simple, predictable positioning in terminal area
            bottom: '20px', // Close to bottom of terminal
            right: '20px',  // Right side, clearly visible
            background: 'linear-gradient(135deg, #06b6d4 0%, #0891b2 100%)',
            backdropFilter: 'blur(2px)',
            WebkitBackdropFilter: 'blur(2px)',
            pointerEvents: 'auto',
            zIndex: 1000    // Ensure it's above everything
          }}
        >
          <svg 
            className="w-3 h-3" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              strokeLinecap="round" 
              strokeLinejoin="round" 
              strokeWidth={2} 
              d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" 
            />
          </svg>
          <span className="text-xs">Copy</span>
        </button>
      )}
      
      {/* Phase 2: Scroll to bottom button - appears when user has scrolled up OR Claude is active */}
      {(isUserScrolled || claudeActive) && (
        <button
          onClick={() => {
            if (xtermRef.current) {
              try {
                // First try standard method
                xtermRef.current.scrollToBottom();
                
                // Check if it worked, if not force sync
                if (xtermRef.current.buffer && xtermRef.current.buffer.active) {
                  const buffer = xtermRef.current.buffer.active;
                  if (buffer.viewportY !== buffer.baseY) {
                    xtermRef.current.scrollLines(buffer.baseY - buffer.viewportY);
                  }
                }
                
                setIsUserScrolled(false);
              } catch (error) {
                // Silently handle scroll errors
              }
            }
          }}
          className={`
            scroll-to-follow-btn absolute bottom-24 right-4 px-4 py-2.5 rounded-lg 
            flex items-center gap-2 text-sm font-medium shadow-lg z-50 transition-all
            ${claudeActive 
              ? 'bg-gradient-to-r from-purple-600 to-blue-600 text-white animate-pulse' 
              : 'bg-gray-800 text-gray-200 hover:bg-gray-700'
            }
          `}
          title={claudeActive ? "Claude is active - click to follow output (Ctrl+End)" : "Scroll to bottom and follow output (Ctrl+End)"}
        >
          <ChevronDown className={`w-4 h-4 ${claudeActive ? 'animate-bounce' : ''}`} />
          <span>{claudeActive ? 'Follow Claude' : 'Follow Output'}</span>
        </button>
      )}

      {/* Enhanced Status Line - Professional Claude Code statusline */}
      {/* <EnhancedStatusline
        terminalRef={terminalRef}
        settingsButtonRef={settingsButtonRef}
        xtermRef={xtermRef}
      /> */}

      {/* Status Line - Fixed positioning without covering content */}
      {(() => {
        const isEnabled = terminalSettings.statusLine.enabled;
        logger.debug('[Terminal] Status line check:', { 
          enabled: isEnabled, 
          settings: terminalSettings.statusLine,
          shouldShow: isEnabled 
        });
        return isEnabled;
      })() && (
        <div 
          className="border-t border-border-default px-4 py-2 text-xs text-text-secondary flex items-center justify-between" 
          style={{ 
            position: 'relative', 
            height: '40px',
            backgroundColor: 'rgba(0, 0, 0, 0.8)', 
            backdropFilter: 'blur(8px)',
            flexShrink: 0
          }}
        >
          <div className="flex items-center gap-4">
            {terminalSettings.statusLine.showFile && (
              <div className="flex items-center gap-1">
                <span className="text-coder1-cyan">üìÅ</span>
                <span>{currentFile || 'No file selected'}</span>
              </div>
            )}
            {terminalSettings.statusLine.showModel && (
              <div className="flex items-center gap-1">
                <span className="text-coder1-cyan">ü§ñ</span>
                <span>Claude Sonnet 3.5</span>
              </div>
            )}
          </div>
          {terminalSettings.statusLine.showTokens && (
            <div className="flex items-center gap-1">
              <span className="text-coder1-cyan">üí¨</span>
              <span>{sessionTokens} tokens</span>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
