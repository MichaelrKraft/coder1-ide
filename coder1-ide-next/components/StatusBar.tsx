'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { Save, Clock, Download, FileText, BookOpen, GitBranch, Check, Loader2, X, Eye, Compass, Grid, Code, Sparkles, Terminal, Plus, ChevronUp, ChevronDown } from 'lucide-react';
import { glows } from '@/lib/design-tokens';
import { useSessionSummary } from '@/lib/hooks/useSessionSummary';
import { useEnhancedSupervision } from '@/contexts/EnhancedSupervisionContext';

interface StatusBarProps {
  activeFile?: string | null;
  isConnected?: boolean;
  openFiles?: any[];
  terminalHistory?: string;
  terminalCommands?: string[];
}

export default function StatusBar({ 
  activeFile, 
  isConnected = false, 
  openFiles = [], 
  terminalHistory = '', 
  terminalCommands = [] 
}: StatusBarProps) {
  const [lastCheckpoint, setLastCheckpoint] = useState<Date | null>(null);
  const [isLoading, setIsLoading] = useState<string | null>(null);
  const [sessionId, setSessionId] = useState<string>('');
  const [toastMessage, setToastMessage] = useState<string>('');
  const [showSessionModal, setShowSessionModal] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);
  const [exportFormat, setExportFormat] = useState<'markdown' | 'json' | 'html' | 'all'>('markdown');
  const [activeTab, setActiveTab] = useState<'summary' | 'insights' | 'nextSteps'>('summary');
  const [storeSuccess, setStoreSuccess] = useState(false);
  const [isStoringInDocs, setIsStoringInDocs] = useState(false);
  
  // Discover Panel State
  const [showDiscoverPanel, setShowDiscoverPanel] = useState(false);
  const [commandInput, setCommandInput] = useState('');
  const [customCommands, setCustomCommands] = useState<Array<{id: string, name: string, description: string, action: string}>>([]);
  
  // Add Command Form State
  const [showAddForm, setShowAddForm] = useState(false);
  const [newCommandName, setNewCommandName] = useState('');
  const [newCommandDesc, setNewCommandDesc] = useState('');
  const [newCommandAction, setNewCommandAction] = useState('');

  const {
    isGenerating,
    summary,
    insights,
    nextSteps,
    error: summaryError,
    hasGenerated,
    progress,
    currentStep,
    generateSummary,
    clearSummary,
    copySummaryToClipboard,
    exportSummary,
    storeInDocumentation
  } = useSessionSummary();
  
  // Get supervision state from context
  const { isSupervisionActive, supervisionStatus, lastSupervisionCheck } = useEnhancedSupervision();

  // Initialize sessionId on mount
  useEffect(() => {
    let storedSessionId = localStorage.getItem('currentSessionId');
    if (!storedSessionId) {
      storedSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      localStorage.setItem('currentSessionId', storedSessionId);
    }
    setSessionId(storedSessionId);
  }, []);

  // Load custom commands and setup keyboard shortcuts for Discover panel
  useEffect(() => {
    const saved = localStorage.getItem('coder1-custom-commands');
    if (saved) {
      setCustomCommands(JSON.parse(saved));
    }

    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.ctrlKey && e.shiftKey && e.key === 'D') {
        e.preventDefault();
        setShowDiscoverPanel(prev => !prev);
      }
      if (e.key === 'Escape') {
        if (showAddForm) {
          setNewCommandName('');
          setNewCommandDesc('');
          setNewCommandAction('');
          setShowAddForm(false);
        } else if (showDiscoverPanel) {
          setShowDiscoverPanel(false);
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [showDiscoverPanel, showAddForm]);

  // Auto-checkpoint every 10 minutes
  useEffect(() => {
    if (!sessionId) return;

    const autoCheckpoint = async () => {
      try {
        // Only auto-checkpoint if there's meaningful activity
        const hasActivity = localStorage.getItem('openFiles') || 
                           localStorage.getItem('terminalHistory') || 
                           localStorage.getItem('editorContent');
        
        if (!hasActivity) return;

        await fetch('/api/checkpoint', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            sessionId,
            timestamp: new Date().toISOString(),
            activeFile,
            snapshot: {
              files: localStorage.getItem('openFiles') || '[]',
              terminal: localStorage.getItem('terminalHistory') || '',
              editor: localStorage.getItem('editorContent') || ''
            },
            autoGenerated: true
          })
        });

        const now = new Date();
        setLastCheckpoint(now);
        console.log('🕐 Auto-checkpoint saved at:', now.toLocaleTimeString());
      } catch (error) {
        console.error('Auto-checkpoint failed:', error);
      }
    };

    // Set up interval for auto-checkpoints (10 minutes)
    const interval = setInterval(autoCheckpoint, 10 * 60 * 1000); // 10 minutes

    // Also create initial checkpoint after 30 seconds (to catch early work)
    const initialTimeout = setTimeout(autoCheckpoint, 30 * 1000);

    return () => {
      clearInterval(interval);
      clearTimeout(initialTimeout);
    };
  }, [sessionId, activeFile]);

  // Show toast message
  const showToast = (message: string) => {
    setToastMessage(message);
    setTimeout(() => setToastMessage(''), 3000);
  };

  const handleCheckpoint = async () => {
    setIsLoading('checkpoint');
    const now = new Date();
    
    try {
      // Use Next.js API route that proxies to Express
      const response = await fetch('/api/checkpoint', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId,
          timestamp: now.toISOString(),
          activeFile,
          snapshot: {
            files: localStorage.getItem('openFiles') || '[]',
            terminal: localStorage.getItem('terminalHistory') || '',
            editor: localStorage.getItem('editorContent') || ''
          },
          autoGenerated: false
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.sessionId) {
          // Update sessionId if a new one was created
          localStorage.setItem('currentSessionId', data.sessionId);
          setSessionId(data.sessionId);
        }
        setLastCheckpoint(now);
        showToast('✅ Checkpoint saved successfully');
        console.log('✅ Checkpoint saved at:', now.toLocaleTimeString());
      } else {
        throw new Error('Failed to save checkpoint');
      }
    } catch (error) {
      console.error('Failed to save checkpoint:', error);
      showToast('⚠️ Failed to save checkpoint');
    }
    
    setIsLoading(null);
  };

  const handleTimeline = async () => {
    setIsLoading('timeline');
    
    try {
      // Use Next.js API route with sessionId
      const response = await fetch(`/api/timeline?sessionId=${sessionId}`);
      const data = await response.json();
      
      if (response.ok) {
        console.log('📊 Timeline data:', data);
        // Open timeline page with sessionId
        window.open(`/timeline?sessionId=${sessionId}`, '_blank');
        showToast('📊 Opening timeline view');
      } else {
        throw new Error('Failed to fetch timeline');
      }
    } catch (error) {
      console.error('Failed to fetch timeline:', error);
      showToast('⚠️ Failed to load timeline');
    }
    
    setIsLoading(null);
  };

  const handleExport = async () => {
    setIsLoading('export');
    
    try {
      // Use Next.js API route with sessionId for session export
      const response = await fetch('/api/export', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          format: 'zip',
          includeNodeModules: false,
          includeGitHistory: true,
          sessionId // Include sessionId for session data export
        })
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `export-${sessionId}-${Date.now()}.${sessionId ? 'json' : 'zip'}`;
        a.click();
        window.URL.revokeObjectURL(url);
        showToast('📦 Export completed successfully');
        console.log('📦 Project exported successfully');
      } else {
        throw new Error('Failed to export');
      }
    } catch (error) {
      console.error('Failed to export project:', error);
      showToast('⚠️ Failed to export project');
    }
    
    setIsLoading(null);
  };

  const handleSessionSummary = async () => {
    setShowSessionModal(true);
    setCopySuccess(false);
    setActiveTab('summary');
    
    // Clear previous results if regenerating
    if (hasGenerated) {
      clearSummary();
    }

    // Start generation with current session data
    await generateSummary({
      openFiles,
      activeFile,
      terminalHistory,
      terminalCommands
    });
  };

  // Handle copy to clipboard with success feedback
  const handleCopyToClipboard = async () => {
    const content = activeTab === 'summary' ? summary :
                   activeTab === 'insights' ? insights : nextSteps;
    const success = await copySummaryToClipboard(content || '');
    if (success) {
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    }
  };

  // Store session summary in Documentation Intelligence System
  const handleStoreInDocs = async () => {
    setIsStoringInDocs(true);
    setStoreSuccess(false);
    
    const success = await storeInDocumentation();
    if (success) {
      setStoreSuccess(true);
      setTimeout(() => setStoreSuccess(false), 3000);
    }
    
    setIsStoringInDocs(false);
  };

  // Handle export button click
  const handleExportSummary = async () => {
    const success = await exportSummary(exportFormat);
    if (success) {
      showToast('📦 Export completed successfully');
    } else {
      showToast('⚠️ Failed to export summary');
    }
  };

  // Close modal and reset state
  const handleCloseModal = () => {
    setShowSessionModal(false);
    setCopySuccess(false);
    setActiveTab('summary');
  };

  const handleDocs = async () => {
    // Open the documentation page in a new tab
    window.open('/documentation', '_blank');
  };

  // Discover Panel Functions
  const handleDiscoverToggle = () => {
    setShowDiscoverPanel(prev => !prev);
  };

  const toggleAddForm = () => {
    setShowAddForm(prev => !prev);
    // Reset form when opening
    if (!showAddForm) {
      setNewCommandName('');
      setNewCommandDesc('');
      setNewCommandAction('');
    }
  };

  const handleSaveCommand = () => {
    const name = newCommandName.trim();
    const description = newCommandDesc.trim();
    const action = newCommandAction.trim();
    
    if (name && description && action) {
      const newCommand = {
        id: Date.now().toString(),
        name,
        description,
        action
      };
      const updatedCommands = [...customCommands, newCommand];
      localStorage.setItem('coder1-custom-commands', JSON.stringify(updatedCommands));
      setCustomCommands(updatedCommands);
      
      // Reset form and close
      setNewCommandName('');
      setNewCommandDesc('');
      setNewCommandAction('');
      setShowAddForm(false);
      
      showToast(`✅ Command "/${name}" added successfully`);
    }
  };

  const handleCancelAddCommand = () => {
    setNewCommandName('');
    setNewCommandDesc('');
    setNewCommandAction('');
    setShowAddForm(false);
  };

  const executeSlashCommand = (command: string) => {
    console.log('Executing command:', command);
    // This would integrate with the Terminal component
    showToast(`Executing: /${command}`);
  };

  return (
    <>
      {/* Toast Notification */}
      {toastMessage && (
        <div className="fixed bottom-14 right-4 bg-bg-secondary border border-border-default rounded-lg px-4 py-2 shadow-lg z-50 animate-fade-in">
          <span className="text-sm text-text-primary">{toastMessage}</span>
        </div>
      )}
      
      <div className="h-11 bg-bg-secondary border-t border-border-default flex items-center justify-center px-4 relative">
      {/* Left section - Discover Button (absolute positioned) */}
      <div className="absolute left-4 flex items-center gap-4 text-sm text-text-muted">
        <button
          onClick={handleDiscoverToggle}
          className="flex items-center gap-1.5 px-3 py-1 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200"
          style={{
            border: '1px solid #00D9FF',
            backgroundColor: showDiscoverPanel ? 'rgba(0, 217, 255, 0.1)' : 'transparent',
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.borderColor = '#FB923C';
            e.currentTarget.style.boxShadow = glows.orange.soft;
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#00D9FF';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="Open Discover Panel (Ctrl+Shift+D)"
        >
          <Compass className="w-4 h-4 text-coder1-cyan" />
          <span>Discover</span>
          {showDiscoverPanel ? (
            <ChevronDown className="w-3 h-3" />
          ) : (
            <ChevronUp className="w-3 h-3" />
          )}
        </button>
        
        {/* Supervision Indicator */}
        {isSupervisionActive && (
          <div className="flex items-center gap-1 text-coder1-cyan animate-pulse">
            <Eye className="w-4 h-4" />
            <span className="font-medium">Supervision Active</span>
          </div>
        )}
        
        {activeFile && (
          <div className="flex items-center gap-1">
            <GitBranch className="w-4 h-4" />
            <span>{activeFile}</span>
          </div>
        )}
        {lastCheckpoint && (
          <div className="flex items-center gap-1">
            <Check className="w-4 h-4 text-green-400" />
            <span>Checkpoint: {lastCheckpoint.toLocaleTimeString()}</span>
          </div>
        )}
      </div>

      {/* Center section - Action buttons (centered) */}
      <div className="flex items-center gap-2">
        {/* CheckPoint Button */}
        <div className="p-[1px] rounded-md bg-gradient-to-r from-purple-500 to-cyan-500">
          <button
            onClick={handleCheckpoint}
            disabled={isLoading === 'checkpoint'}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded-md transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
          onMouseEnter={(e) => {
            if (isLoading !== 'checkpoint') {
              e.currentTarget.style.borderColor = glows.orange.borderHover;
              e.currentTarget.style.boxShadow = glows.orange.soft;
            }
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#9333EA';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="Save a checkpoint of your current work"
        >
          {isLoading === 'checkpoint' ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <Save className="w-4 h-4" />
          )}
          <span>CheckPoint</span>
        </button>
        </div>

        {/* TimeLine Button */}
        <div className="p-[1px] rounded-md bg-gradient-to-r from-purple-500 to-cyan-500">
          <button
            onClick={handleTimeline}
            disabled={isLoading === 'timeline'}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded-md transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
          onMouseEnter={(e) => {
            if (isLoading !== 'timeline') {
              e.currentTarget.style.borderColor = glows.orange.borderHover;
              e.currentTarget.style.boxShadow = glows.orange.soft;
            }
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#9333EA';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="View timeline of changes"
        >
          {isLoading === 'timeline' ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <Clock className="w-4 h-4" />
          )}
          <span>TimeLine</span>
        </button>
        </div>

        {/* Export Button */}
        <button
          onClick={handleExport}
          disabled={isLoading === 'export'}
          className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded-md transition-all duration-200 disabled:opacity-50"
          style={{
            background: 'transparent padding-box, linear-gradient(135deg, #8b5cf6, #06b6d4) border-box',
            border: '1px solid transparent',
            borderRadius: '6px',
          }}
          onMouseEnter={(e) => {
            if (isLoading !== 'export') {
              e.currentTarget.style.borderColor = glows.orange.borderHover;
              e.currentTarget.style.boxShadow = glows.orange.soft;
            }
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#9333EA';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="Export your project"
        >
          {isLoading === 'export' ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <Download className="w-4 h-4" />
          )}
          <span>Export</span>
        </button>

        {/* Session Summary Button */}
        <button
          onClick={handleSessionSummary}
          disabled={isLoading === 'session'}
          className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded-md transition-all duration-200 disabled:opacity-50"
          style={{
            background: 'transparent padding-box, linear-gradient(135deg, #8b5cf6, #06b6d4) border-box',
            border: '1px solid transparent',
            borderRadius: '6px',
          }}
          onMouseEnter={(e) => {
            if (isLoading !== 'session') {
              e.currentTarget.style.borderColor = glows.orange.borderHover;
              e.currentTarget.style.boxShadow = glows.orange.soft;
            }
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#9333EA';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="Generate AI session summary"
        >
          {isLoading === 'session' ? (
            <Loader2 className="w-4 h-4 animate-spin" />
          ) : (
            <FileText className="w-4 h-4" />
          )}
          <span>Session Summary</span>
        </button>

        {/* Docs Button */}
        <button
          onClick={handleDocs}
          className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200"
          style={{
            background: 'transparent padding-box, linear-gradient(135deg, #8b5cf6, #06b6d4) border-box',
            border: '1px solid transparent',
            borderRadius: '6px',
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.borderColor = glows.orange.borderHover;
            e.currentTarget.style.boxShadow = glows.orange.soft;
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.borderColor = '#9333EA';
            e.currentTarget.style.boxShadow = 'none';
          }}
          title="Open documentation"
        >
          <BookOpen className="w-4 h-4" />
          <span>Docs</span>
        </button>
      </div>
    </div>

    {/* Discover Slide-Up Panel */}
    <div 
      className={`fixed bottom-0 left-0 bg-bg-secondary border-r border-t border-border-default rounded-tr-lg transition-all duration-300 ease-in-out z-40 shadow-xl ${
        showDiscoverPanel ? 'translate-y-0' : 'translate-y-full'
      }`}
      style={{ width: '600px', height: '320px' }}
    >
      {/* Panel Header */}
      <div className="flex items-center justify-between px-3 py-2 border-b border-border-default">
        <div className="flex items-center gap-2">
          <Compass className="w-4 h-4 text-coder1-cyan" />
          <h3 className="text-sm font-semibold text-text-primary">Discover</h3>
          <span className="text-xs text-text-muted px-1.5 py-0.5 bg-bg-tertiary rounded text-xs">Ctrl+Shift+D</span>
        </div>
        <button
          onClick={() => setShowDiscoverPanel(false)}
          className="p-1 hover:bg-bg-primary rounded transition-colors"
        >
          <X className="w-4 h-4 text-text-muted" />
        </button>
      </div>

      {/* Panel Content */}
      <div className="flex h-full overflow-hidden">
        {/* Commands Section */}
        <div className="flex-1 p-3 border-r border-border-default">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-xs font-semibold text-coder1-cyan uppercase tracking-wider">Commands</h4>
            <button 
              onClick={toggleAddForm}
              className="text-xs text-coder1-cyan hover:text-coder1-cyan-secondary transition-colors flex items-center gap-1"
            >
              {showAddForm ? (
                <>
                  <X className="w-3 h-3" />
                  Cancel
                </>
              ) : (
                <>
                  <Plus className="w-3 h-3" />
                  Add
                </>
              )}
            </button>
          </div>

          {/* Add Command Form */}
          <div className={`overflow-hidden transition-all duration-200 ${showAddForm ? 'max-h-56 mb-2' : 'max-h-0'}`}>
            <div className="p-2 bg-bg-tertiary rounded border border-border-default space-y-2">
              <input
                type="text"
                placeholder="Command name (without /)"
                value={newCommandName}
                onChange={(e) => setNewCommandName(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    document.getElementById('command-desc-input')?.focus();
                  }
                }}
                className="w-full px-2 py-1 text-xs bg-bg-primary border border-border-default rounded outline-none text-text-primary placeholder-text-muted focus:border-coder1-cyan"
                autoFocus
              />
              <input
                id="command-desc-input"
                type="text"
                placeholder="Description"
                value={newCommandDesc}
                onChange={(e) => setNewCommandDesc(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    document.getElementById('command-action-input')?.focus();
                  }
                }}
                className="w-full px-2 py-1 text-xs bg-bg-primary border border-border-default rounded outline-none text-text-primary placeholder-text-muted focus:border-coder1-cyan"
              />
              <input
                id="command-action-input"
                type="text"
                placeholder="Action/Command"
                value={newCommandAction}
                onChange={(e) => setNewCommandAction(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    e.preventDefault();
                    handleSaveCommand();
                  }
                }}
                className="w-full px-2 py-1 text-xs bg-bg-primary border border-border-default rounded outline-none text-text-primary placeholder-text-muted focus:border-coder1-cyan"
              />
              <div className="flex gap-1">
                <button
                  onClick={handleSaveCommand}
                  disabled={!newCommandName.trim() || !newCommandDesc.trim() || !newCommandAction.trim()}
                  className="px-2 py-1 text-xs bg-coder1-cyan text-black rounded hover:bg-coder1-cyan-secondary disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  Save
                </button>
                <button
                  onClick={handleCancelAddCommand}
                  className="px-2 py-1 text-xs bg-bg-primary border border-border-default rounded hover:bg-bg-secondary text-text-secondary transition-colors"
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
          
          {/* Slash Command Input */}
          <div className="relative mb-2">
            <div className="flex items-center gap-1 px-2 py-1 bg-bg-tertiary rounded text-xs">
              <Terminal className="w-3 h-3 text-text-muted" />
              <span className="text-text-muted">/</span>
              <input 
                type="text" 
                value={commandInput}
                onChange={(e) => setCommandInput(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter' && commandInput.trim()) {
                    executeSlashCommand(commandInput);
                    setCommandInput('');
                  }
                }}
                placeholder="type command..."
                className="flex-1 bg-transparent border-none outline-none text-text-primary placeholder-text-muted"
              />
            </div>
          </div>
          
          {/* Scrollable Commands Container */}
          <div 
            className={`overflow-y-auto scrollbar-thin scrollbar-track-bg-tertiary scrollbar-thumb-text-muted hover:scrollbar-thumb-text-secondary transition-all ${
              showAddForm ? 'max-h-32' : 'max-h-52'
            }`}
            style={{
              scrollbarWidth: 'thin',
              scrollbarColor: 'rgba(156, 163, 175, 0.5) transparent'
            }}
          >
            {/* Built-in Commands */}
            <div className="space-y-0.5">
              <button 
                onClick={() => executeSlashCommand('help')}
                className="w-full text-left px-2 py-1 text-xs text-text-secondary hover:text-text-primary hover:bg-bg-tertiary rounded transition-colors"
              >
                /help - Show available commands
              </button>
              <button 
                onClick={() => executeSlashCommand('clear')}
                className="w-full text-left px-2 py-1 text-xs text-text-secondary hover:text-text-primary hover:bg-bg-tertiary rounded transition-colors"
              >
                /clear - Clear terminal
              </button>
              <button 
                onClick={() => executeSlashCommand('build')}
                className="w-full text-left px-2 py-1 text-xs text-text-secondary hover:text-text-primary hover:bg-bg-tertiary rounded transition-colors"
              >
                /build - Run build command
              </button>
            </div>
            
            {/* Custom Commands */}
            {customCommands.length > 0 && (
              <div className="space-y-0.5 mt-2 pt-2 border-t border-border-default">
                {customCommands.map((cmd) => (
                  <button 
                    key={cmd.id}
                    onClick={() => executeSlashCommand(cmd.action)}
                    className="w-full text-left px-2 py-1 text-xs text-text-secondary hover:text-text-primary hover:bg-bg-tertiary rounded transition-colors"
                    title={cmd.description}
                  >
                    /{cmd.name} - {cmd.description}
                  </button>
                ))}
              </div>
            )}
            
            {/* Scroll indicator when many commands */}
            {customCommands.length > 10 && (
              <div className="flex items-center justify-center py-1 text-xs text-text-muted opacity-50">
                <span>• • • scroll for more commands • • •</span>
              </div>
            )}
          </div>
        </div>

        {/* AI Tools Section */}
        <div className="flex-1 p-3">
          <h4 className="text-xs font-semibold text-coder1-cyan mb-2 uppercase tracking-wider">AI Tools</h4>
          <div className="grid grid-cols-2 gap-2">
            <Link 
              href="/components" 
              className="flex items-center gap-2 p-2 rounded border border-border-default hover:border-coder1-cyan hover:bg-bg-tertiary transition-all group"
            >
              <Grid className="w-4 h-4 text-text-muted group-hover:text-coder1-cyan" />
              <span className="text-xs text-text-secondary group-hover:text-text-primary">Components</span>
            </Link>
            
            <Link 
              href="/templates" 
              className="flex items-center gap-2 p-2 rounded border border-border-default hover:border-coder1-cyan hover:bg-bg-tertiary transition-all group"
            >
              <FileText className="w-4 h-4 text-text-muted group-hover:text-coder1-cyan" />
              <span className="text-xs text-text-secondary group-hover:text-text-primary">Templates</span>
            </Link>
            
            <Link 
              href="/hooks" 
              className="flex items-center gap-2 p-2 rounded border border-border-default hover:border-coder1-cyan hover:bg-bg-tertiary transition-all group"
            >
              <Code className="w-4 h-4 text-text-muted group-hover:text-coder1-cyan" />
              <span className="text-xs text-text-secondary group-hover:text-text-primary">Hooks</span>
            </Link>
            
            <Link 
              href="/features" 
              className="flex items-center gap-2 p-2 rounded border border-border-default hover:border-coder1-cyan hover:bg-bg-tertiary transition-all group"
            >
              <Sparkles className="w-4 h-4 text-green-400 group-hover:text-green-300" />
              <span className="text-xs text-text-secondary group-hover:text-text-primary">Features</span>
            </Link>
          </div>
        </div>
      </div>
    </div>

    {/* Session Summary Modal */}
    {showSessionModal && (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <div className="bg-bg-secondary border border-border-default rounded-lg w-full max-w-4xl max-h-[80vh] flex flex-col">
          {/* Modal Header */}
          <div className="flex items-center justify-between p-4 border-b border-border-default">
            <h2 className="text-lg font-semibold text-text-primary">Session Summary</h2>
            <button
              onClick={handleCloseModal}
              className="p-1 hover:bg-bg-primary rounded transition-colors"
            >
              <X className="w-5 h-5 text-text-muted" />
            </button>
          </div>

          {/* Modal Tabs */}
          <div className="flex gap-1 p-4 border-b border-border-default">
            <button
              onClick={() => setActiveTab('summary')}
              className={`px-4 py-2 rounded transition-all ${
                activeTab === 'summary' 
                  ? 'bg-orange-500/20 text-orange-400 border border-orange-500/50' 
                  : 'hover:bg-bg-primary text-text-muted'
              }`}
            >
              Summary
            </button>
            <button
              onClick={() => setActiveTab('insights')}
              className={`px-4 py-2 rounded transition-all ${
                activeTab === 'insights' 
                  ? 'bg-orange-500/20 text-orange-400 border border-orange-500/50' 
                  : 'hover:bg-bg-primary text-text-muted'
              }`}
            >
              Insights
            </button>
            <button
              onClick={() => setActiveTab('nextSteps')}
              className={`px-4 py-2 rounded transition-all ${
                activeTab === 'nextSteps' 
                  ? 'bg-orange-500/20 text-orange-400 border border-orange-500/50' 
                  : 'hover:bg-bg-primary text-text-muted'
              }`}
            >
              Next Steps
            </button>
          </div>

          {/* Modal Content */}
          <div className="flex-1 overflow-auto p-4">
            {isGenerating ? (
              <div className="flex flex-col items-center justify-center h-full gap-4">
                <Loader2 className="w-8 h-8 animate-spin text-orange-400" />
                <div className="text-center">
                  <p className="text-text-primary mb-2">Generating {currentStep}...</p>
                  <div className="w-64 h-2 bg-bg-primary rounded-full overflow-hidden">
                    <div 
                      className="h-full bg-orange-400 transition-all duration-300"
                      style={{ width: `${progress}%` }}
                    />
                  </div>
                </div>
              </div>
            ) : summaryError ? (
              <div className="text-red-400">
                <p>Error generating summary: {summaryError}</p>
              </div>
            ) : (
              <div className="whitespace-pre-wrap text-text-secondary">
                {activeTab === 'summary' && (summary || 'No summary generated yet. Click regenerate to start.')}
                {activeTab === 'insights' && (insights || 'No insights generated yet.')}
                {activeTab === 'nextSteps' && (nextSteps || 'No next steps generated yet.')}
              </div>
            )}
          </div>

          {/* Modal Footer */}
          <div className="flex items-center justify-between gap-4 p-4 border-t border-border-default">
            <div className="flex items-center gap-2">
              {/* Export Format Selector */}
              <select
                value={exportFormat}
                onChange={(e) => setExportFormat(e.target.value as any)}
                className="px-3 py-1.5 bg-bg-primary border border-border-default rounded text-sm text-text-primary"
              >
                <option value="markdown">Markdown</option>
                <option value="json">JSON</option>
                <option value="html">HTML</option>
                <option value="all">All Formats</option>
              </select>
            </div>

            <div className="flex items-center gap-2">
              {/* Store in Docs Button */}
              <button
                onClick={handleStoreInDocs}
                disabled={!hasGenerated || isStoringInDocs}
                className="px-4 py-1.5 bg-green-500/20 text-green-400 border border-green-500/50 rounded hover:bg-green-500/30 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center gap-2"
              >
                {isStoringInDocs ? (
                  <Loader2 className="w-4 h-4 animate-spin" />
                ) : storeSuccess ? (
                  <Check className="w-4 h-4" />
                ) : (
                  <Save className="w-4 h-4" />
                )}
                {storeSuccess ? 'Stored!' : 'Store in Docs'}
              </button>

              {/* Copy Button */}
              <button
                onClick={handleCopyToClipboard}
                disabled={!hasGenerated}
                className="px-4 py-1.5 bg-blue-500/20 text-blue-400 border border-blue-500/50 rounded hover:bg-blue-500/30 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center gap-2"
              >
                {copySuccess ? (
                  <>
                    <Check className="w-4 h-4" />
                    Copied!
                  </>
                ) : (
                  <>
                    <FileText className="w-4 h-4" />
                    Copy
                  </>
                )}
              </button>

              {/* Export Button */}
              <button
                onClick={handleExportSummary}
                disabled={!hasGenerated}
                className="px-4 py-1.5 bg-gradient-to-r from-purple-500/20 to-cyan-500/20 text-white border border-transparent bg-clip-padding rounded hover:from-purple-500/30 hover:to-cyan-500/30 disabled:opacity-50 disabled:cursor-not-allowed transition-all flex items-center gap-2"
                style={{
                  borderImage: 'linear-gradient(135deg, #8b5cf6, #06b6d4) 1'
                }}
              >
                <Download className="w-4 h-4" />
                Export
              </button>

              {/* Regenerate Button */}
              <button
                onClick={() => handleSessionSummary()}
                disabled={isGenerating}
                className="px-4 py-1.5 bg-orange-500/20 text-orange-400 border border-orange-500/50 rounded hover:bg-orange-500/30 disabled:opacity-50 disabled:cursor-not-allowed transition-all"
              >
                {isGenerating ? 'Generating...' : 'Regenerate'}
              </button>
            </div>
          </div>
        </div>
      </div>
    )}
    </>
  );
}