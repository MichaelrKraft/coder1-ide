/**
 * StatusBarActions - Action Buttons Component
 * 
 * Contains all the action buttons: CheckPoint, TimeLine, Session Summary, Docs
 * Extracted from the original StatusBar for better separation of concerns
 */

'use client';

import React from 'react';
import { Save, Clock, FileText, BookOpen, Loader2 } from '@/lib/icons';
import StatusBarModals from './StatusBarModals';
import { useIDEStore } from '@/stores/useIDEStore';
import { useSessionStore } from '@/stores/useSessionStore';
import { useUIStore } from '@/stores/useUIStore';
import { glows } from '@/lib/design-tokens';
import type { IDEFile } from '@/types';

interface StatusBarActionsProps {
  activeFile?: string | null;
  isConnected?: boolean;
  openFiles?: IDEFile[];
  terminalHistory?: string;
  terminalCommands?: string[];
}

const StatusBarActions = React.memo(function StatusBarActions({
  activeFile,
  isConnected = false,
  openFiles = [],
  terminalHistory = '',
  terminalCommands = []
}: StatusBarActionsProps) {
  // Get state from stores
  const { loading } = useIDEStore();
  const { currentSession, createCheckpoint } = useSessionStore();
  const { addToast, openModal, isModalOpen } = useUIStore();
  
  // Get current session ID
  const [sessionId, setSessionId] = React.useState<string>('');
  
  React.useEffect(() => {
    // Only access localStorage on client side
    const storedId = typeof window !== 'undefined' ? localStorage.getItem('currentSessionId') : null;
    const newSessionId = currentSession?.metadata.sessionId || 
                        storedId || 
                        `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    setSessionId(newSessionId);
    
    // Update localStorage if needed
    if (typeof window !== 'undefined' && !storedId) {
      localStorage.setItem('currentSessionId', newSessionId);
    }
  }, [currentSession]);

  // Button hover effects
  const applyHoverEffect = (e: React.MouseEvent<HTMLButtonElement>, isLoading: boolean) => {
    if (isLoading) return;
    e.currentTarget.style.boxShadow = glows.orange.medium;
    e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #FB923C, #F97316)';
  };

  const removeHoverEffect = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.currentTarget.style.boxShadow = 'none';
    e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #6366f1, #8b5cf6)';
  };

  // Action handlers
  const handleCheckpoint = async () => {
    try {
      // Create checkpoint in session store
      createCheckpoint('Manual checkpoint', false);
      
      // Also save via API for persistence
      const response = await fetch('/api/checkpoint', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          sessionId,
          timestamp: new Date().toISOString(),
          activeFile,
          snapshot: {
            files: JSON.stringify(openFiles),
            terminal: terminalHistory,
            editor: localStorage.getItem('editorContent') || ''
          },
          autoGenerated: false
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // Dispatch event to notify Sessions panel to refresh
        window.dispatchEvent(new CustomEvent('checkpointCreated', { 
          detail: { 
            checkpoint: data.checkpoint,
            sessionId: data.sessionId 
          } 
        }));
        
        addToast({
          message: '✅ Checkpoint saved successfully',
          type: 'success'
        });
        console.log('✅ Checkpoint saved at:', new Date().toLocaleTimeString());
      } else {
        throw new Error('Failed to save checkpoint');
      }
    } catch (error) {
      console.error('Failed to save checkpoint:', error);
      addToast({
        message: '⚠️ Failed to save checkpoint',
        type: 'error'
      });
    }
  };

  const handleTimeline = async () => {
    try {
      const response = await fetch(`/api/timeline?sessionId=${sessionId}`);
      const data = await response.json();
      
      if (response.ok) {
        console.log('📊 Timeline data:', data);
        window.open(`/timeline?sessionId=${sessionId}`, '_blank');
        addToast({
          message: '📊 Opening timeline view',
          type: 'info'
        });
      } else {
        throw new Error('Failed to fetch timeline');
      }
    } catch (error) {
      console.error('Failed to fetch timeline:', error);
      addToast({
        message: '⚠️ Failed to load timeline',
        type: 'error'
      });
    }
  };


  const handleSessionSummary = () => {
    openModal('sessionSummary');
  };

  const handleDocs = () => {
    window.open('/docs-manager', '_blank');
  };

  const isLoadingState = (state: string) => loading === state;

  return (
    <>
      <div className="flex items-center gap-2">
        {/* CheckPoint Button */}
        <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)'}}>
          <button
            onClick={handleCheckpoint}
            disabled={isLoadingState('checkpoint')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('checkpoint'))}
            onMouseLeave={removeHoverEffect}
            title="Save a checkpoint of your current work"
          >
            {isLoadingState('checkpoint') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Save className="w-4 h-4" />
            )}
            <span>CheckPoint</span>
          </button>
        </div>

        {/* TimeLine Button */}
        <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)'}}>
          <button
            onClick={handleTimeline}
            disabled={isLoadingState('timeline')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('timeline'))}
            onMouseLeave={removeHoverEffect}
            title="View timeline of changes"
          >
            {isLoadingState('timeline') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Clock className="w-4 h-4" />
            )}
            <span>TimeLine</span>
          </button>
        </div>


        {/* Session Summary Button */}
        <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)'}}>
          <button
            onClick={handleSessionSummary}
            disabled={isLoadingState('session')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('session'))}
            onMouseLeave={removeHoverEffect}
            title="Generate AI session summary"
          >
            {isLoadingState('session') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <FileText className="w-4 h-4" />
            )}
            <span>Session Summary</span>
          </button>
        </div>

        {/* Docs Button */}
        <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)'}}>
          <button
            onClick={handleDocs}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, false)}
            onMouseLeave={removeHoverEffect}
            title="Open documentation"
          >
            <BookOpen className="w-4 h-4" />
            <span>Docs</span>
          </button>
        </div>
      </div>

      {/* Session Summary Modal */}
      {isModalOpen('sessionSummary') && (
        <StatusBarModals
          activeFile={activeFile}
          openFiles={openFiles}
          terminalHistory={terminalHistory}
          terminalCommands={terminalCommands}
        />
      )}
    </>
  );
});

export default StatusBarActions;