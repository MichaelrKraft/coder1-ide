/**
 * StatusBarActions - Action Buttons Component
 * 
 * Contains all the action buttons: CheckPoint, TimeLine, Session Summary, Docs
 * Extracted from the original StatusBar for better separation of concerns
 */

'use client';

import React from 'react';
import { Save, Clock, FileText, BookOpen, Loader2, Brain, Link, Sparkles } from '@/lib/icons';
import StatusBarModals from './StatusBarModals';
import { useIDEStore } from '@/stores/useIDEStore';
import { useSessionStore } from '@/stores/useSessionStore';
import { useUIStore } from '@/stores/useUIStore';
import { useContextActivation } from '@/lib/hooks/useContextActivation';
import { glows } from '@/lib/design-tokens';
import type { IDEFile } from '@/types';

interface StatusBarActionsProps {
  activeFile?: string | null;
  isConnected?: boolean;
  openFiles?: IDEFile[];
  terminalHistory?: string;
  terminalCommands?: string[];
}

const StatusBarActions = React.memo(function StatusBarActions({
  activeFile,
  isConnected = false,
  openFiles = [],
  terminalHistory = '',
  terminalCommands = []
}: StatusBarActionsProps) {
  // Get state from stores
  const { loading } = useIDEStore();
  const { currentSession, createCheckpoint } = useSessionStore();
  const { addToast, openModal, isModalOpen } = useUIStore();
  
  // PHASE 3: Context activation for AI features
  const { activateContext, isContextActive } = useContextActivation();
  
  // Get current session ID
  const [sessionId, setSessionId] = React.useState<string>('');
  
  React.useEffect(() => {
    // Only access localStorage on client side
    const storedId = typeof window !== 'undefined' ? localStorage.getItem('currentSessionId') : null;
    const newSessionId = currentSession?.metadata.sessionId || 
                        storedId || 
                        `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    setSessionId(newSessionId);
    
    // Update localStorage if needed
    if (typeof window !== 'undefined' && !storedId) {
      localStorage.setItem('currentSessionId', newSessionId);
    }
  }, [currentSession]);

  // Button hover effects
  const applyHoverEffect = (e: React.MouseEvent<HTMLButtonElement>, isLoading: boolean) => {
    if (isLoading) return;
    e.currentTarget.style.boxShadow = glows.orange.medium;
    e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #FB923C, #F97316)';
  };

  const removeHoverEffect = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.currentTarget.style.boxShadow = 'none';
    e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #6366f1, #8b5cf6)';
  };

  // Action handlers
  const handleCheckpoint = async () => {
    try {
      // Import companion client
      const { getCompanionClient } = await import('@/lib/companion-client');
      const companionClient = getCompanionClient();
      
      // Check if companion is connected for enhanced checkpoints
      if (companionClient.isConnected()) {
        // Enhanced checkpoint via companion service with Claude intelligence
        const result = await companionClient.executeClaudeCommand('checkpoint:create', {
          sessionId,
          projectPath: process.cwd(), // TODO: Get actual project path
          files: openFiles.reduce((acc, file) => {
            acc[file.path] = file.content || '';
            return acc;
          }, {}),
          terminal: terminalHistory,
          metadata: {
            activeFile,
            timestamp: new Date().toISOString(),
            autoGenerated: false
          }
        });
        
        addToast({
          message: `✅ Smart checkpoint: ${result.checkpoint?.name || 'Saved successfully'}`,
          type: 'success'
        });
        
      } else {
        // Fallback to original checkpoint system
        createCheckpoint('Manual checkpoint', false);
        
        const response = await fetch('/api/checkpoint', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            sessionId,
            timestamp: new Date().toISOString(),
            activeFile,
            snapshot: {
              files: JSON.stringify(openFiles),
              terminal: terminalHistory,
              editor: localStorage.getItem('editorContent') || ''
            },
            autoGenerated: false
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          
          // Dispatch event to notify Sessions panel to refresh
          window.dispatchEvent(new CustomEvent('checkpointCreated', { 
            detail: { 
              checkpoint: data.checkpoint,
              sessionId: data.sessionId 
            } 
          }));
          
          addToast({
            message: '✅ Checkpoint saved successfully',
            type: 'success'
          });
        } else {
          throw new Error('Failed to save checkpoint');
        }
      }
    } catch (error) {
      // logger?.error('Failed to save checkpoint:', error);
      addToast({
        message: '⚠️ Failed to save checkpoint',
        type: 'error'
      });
    }
  };

  const handleTimeline = async () => {
    try {
      const response = await fetch(`/api/timeline?sessionId=${sessionId}`);
      const data = await response.json();
      
      if (response.ok) {
        // REMOVED: // REMOVED: console.log('📊 Timeline data:', data);
        window.open(`/timeline?sessionId=${sessionId}`, '_blank');
        addToast({
          message: '📊 Opening timeline view',
          type: 'info'
        });
      } else {
        throw new Error('Failed to fetch timeline');
      }
    } catch (error) {
      // logger?.error('Failed to fetch timeline:', error);
      addToast({
        message: '⚠️ Failed to load timeline',
        type: 'error'
      });
    }
  };


  const handleSessionSummary = async () => {
    try {
      // PHASE 3: Enhanced session summary with companion service integration
      await activateContext('Session Summary');
      
      // Check if companion service is available for enhanced summaries
      const { getCompanionClient } = await import('@/lib/companion-client');
      const companionClient = getCompanionClient();
      
      if (companionClient.isConnected()) {
        // Use companion service for AI-powered session analysis via headless Claude
        const sessionData = {
          sessionId,
          activeFile,
          terminalHistory,
          terminalCommands,
          openFiles: openFiles.reduce((acc, file) => {
            acc[file.path] = file.content || '';
            return acc;
          }, {}),
          startTime: localStorage.getItem('sessionStartTime'),
          endTime: new Date().toISOString()
        };
        
        const result = await fetch('http://localhost:57132/session-summary/generate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            projectPath: '/Users/michaelkraft/autonomous_vibe_interface', // TODO: Get from project context
            sessionData
          })
        });
        
        if (result.ok) {
          const summaryData = await result.json();
          
          // Store summary data for modal display
          localStorage.setItem('latestSessionSummary', JSON.stringify(summaryData));
          
          addToast({
            message: `🤖 AI Session Summary generated: ${summaryData.template} (${summaryData.context.filesChanged} files, ${summaryData.context.linesAdded}+ lines)`,
            type: 'success'
          });
        } else {
          throw new Error('Failed to generate AI session summary');
        }
      }
      
      // Always open the modal for display
      openModal('sessionSummary');
      
    } catch (error) {
      // Fallback to original session summary system
      await activateContext('Session Summary');
      openModal('sessionSummary');
      
      addToast({
        message: '⚠️ Using basic session summary (companion service unavailable)',
        type: 'warning'
      });
    }
  };

  const handleDocs = () => {
    window.open('/docs-manager', '_blank');
  };


  const handleConnectBridge = async () => {
    try {
      // Generate pairing code through the bridge manager
      const response = await fetch('/api/bridge/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId: sessionId // Use session ID as user ID
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // Show pairing code to user
        addToast({
          message: `🔑 Pairing code: ${data.code}`,
          type: 'info',
          duration: 60000 // Show for 1 minute
        });
        
        // Also show in modal
        alert(`🌉 Connect Coder1 Bridge\n\nPairing Code: ${data.code}\n\n1. Run: coder1-bridge start\n2. Enter this code when prompted\n3. Bridge will connect automatically\n\nCode expires in 5 minutes.`);
        
      } else {
        throw new Error('Failed to generate pairing code');
      }
    } catch (error) {
      addToast({
        message: '⚠️ Failed to generate pairing code',
        type: 'error'
      });
    }
  };

  // ParaThinker handler - Only for Beta IDE
  const handleParaThinker = async () => {
    try {
      // Check if we have a problem context (from terminal errors or current code)
      const problemContext = localStorage.getItem('lastTerminalError') || 
                            localStorage.getItem('currentProblem') || 
                            'Help me solve the current coding problem';

      // Start parallel reasoning
      const response = await fetch('/api/beta/parallel-reasoning/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          problem: problemContext,
          metadata: {
            triggeredBy: 'manual',
            activeFile,
            terminalHistory: terminalHistory?.slice(-1000) // Last 1000 chars
          }
        })
      });

      if (response.ok) {
        const data = await response.json();
        
        // Store session ID for tracking
        localStorage.setItem('activeParaThinkSession', data.sessionId);
        
        // Open dashboard in preview panel
        window.dispatchEvent(new CustomEvent('openParaThinkerDashboard', {
          detail: { sessionId: data.sessionId }
        }));
        
        addToast({
          message: `🧠 ParaThinker started with ${data.strategies.length} strategies`,
          type: 'success'
        });
      } else {
        throw new Error('Failed to start ParaThinker');
      }
    } catch (error) {
      addToast({
        message: '⚠️ Failed to start ParaThinker',
        type: 'error'
      });
    }
  };

  const isLoadingState = (state: string) => loading === state;
  
  // Check if we're in Beta environment (hydration-safe)
  const [isBetaEnvironment, setIsBetaEnvironment] = React.useState(false);
  
  React.useEffect(() => {
    setIsBetaEnvironment(window.location.pathname.includes('ide-beta'));
  }, []);

  return (
    <>
      <div className="flex items-center gap-2">
        {/* CheckPoint Button */}
        <div data-tour="checkpoint-timeline" className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)', boxShadow: glows.purple.intense}}>
          <button
            onClick={handleCheckpoint}
            disabled={isLoadingState('checkpoint')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('checkpoint'))}
            onMouseLeave={removeHoverEffect}
            title="CheckPoint - Save a snapshot of your current work state for easy rollback (Ctrl+Shift+S)"
          >
            {isLoadingState('checkpoint') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Save className="w-4 h-4" />
            )}
            <span>CheckPoint</span>
          </button>
        </div>

        {/* TimeLine Button */}
        <div data-tour="timeline-button" className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)', boxShadow: glows.purple.intense}}>
          <button
            onClick={handleTimeline}
            disabled={isLoadingState('timeline')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('timeline'))}
            onMouseLeave={removeHoverEffect}
            title="TimeLine - View chronological history of your development session and changes"
          >
            {isLoadingState('timeline') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <Clock className="w-4 h-4" />
            )}
            <span>TimeLine</span>
          </button>
        </div>


        {/* Session Summary Button */}
        <div data-tour="session-summary" className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)', boxShadow: glows.purple.intense}}>
          <button
            onClick={handleSessionSummary}
            disabled={isLoadingState('session')}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, isLoadingState('session'))}
            onMouseLeave={removeHoverEffect}
            title="Session Summary - Generate AI-powered summary of your coding session for handoffs and documentation"
          >
            {isLoadingState('session') ? (
              <Loader2 className="w-4 h-4 animate-spin" />
            ) : (
              <FileText className="w-4 h-4" />
            )}
            <span>Session Summary</span>
          </button>
        </div>


        {/* Docs Button */}
        <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #6366f1, #8b5cf6)', boxShadow: glows.purple.intense}}>
          <button
            data-tour="docs-button"
            onClick={handleDocs}
            className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 bg-bg-secondary w-full"
            onMouseEnter={(e) => applyHoverEffect(e, false)}
            onMouseLeave={removeHoverEffect}
            title="Docs - Open documentation manager with intelligent search and AI-powered content"
          >
            <BookOpen className="w-4 h-4" />
            <span>Docs</span>
          </button>
        </div>

        {/* ParaThinker Button - Beta Only */}
        {isBetaEnvironment && (
          <div className="p-[1px] rounded-md" style={{background: 'linear-gradient(135deg, #9333ea, #ec4899)'}}>
            <button
              onClick={handleParaThinker}
              disabled={isLoadingState('parathink')}
              className="flex items-center gap-1.5 px-4 py-1.5 text-sm font-medium text-text-secondary hover:text-text-primary rounded transition-all duration-200 disabled:opacity-50 bg-bg-secondary w-full relative"
              onMouseEnter={(e) => {
                if (!isLoadingState('parathink')) {
                  e.currentTarget.style.boxShadow = glows.purple.medium;
                  e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #a855f7, #f472b6)';
                }
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.boxShadow = 'none';
                e.currentTarget.parentElement!.style.background = 'linear-gradient(135deg, #9333ea, #ec4899)';
              }}
              title="ParaThinker - Advanced parallel AI reasoning system for complex problem solving (Beta feature)"
            >
              {isLoadingState('parathink') ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Brain className="w-4 h-4" />
              )}
              <span>ParaThinker</span>
              <span className="text-[9px] absolute -top-1 -right-1 bg-purple-600 text-white px-1 rounded">β</span>
            </button>
          </div>
        )}
      </div>

      {/* Session Summary Modal */}
      {isModalOpen('sessionSummary') && (
        <StatusBarModals
          activeFile={activeFile}
          openFiles={openFiles}
          terminalHistory={terminalHistory}
          terminalCommands={terminalCommands}
        />
      )}
    </>
  );
});

export default StatusBarActions;