/**
 * Session and AI Agent Type Definitions
 * Types for session management, summaries, and AI agent orchestration
 */

import { FileType } from './ide';

// ================================================================================
// Session Management Types
// ================================================================================

export interface SessionMetadata {
  sessionId: string;
  startTime: Date;
  endTime?: Date;
  duration?: number; // in minutes
  type: SessionType;
  status: SessionStatus;
}

export type SessionType = 
  | 'coding'
  | 'debugging' 
  | 'refactoring'
  | 'testing'
  | 'documentation'
  | 'planning'
  | 'learning'
  | 'general';

export type SessionStatus = 
  | 'active'
  | 'paused' 
  | 'completed'
  | 'cancelled'
  | 'error';

export interface SessionData {
  metadata: SessionMetadata;
  openFiles: string[];
  activeFile: string | null;
  terminalHistory: string;
  terminalCommands: string[];
  editorContent: string;
  checkpoints: SessionCheckpoint[];
  insights: SessionInsight[];
}

export interface SessionCheckpoint {
  id: string;
  timestamp: Date;
  description: string;
  snapshot: {
    files: string;
    terminal: string;
    editor: string;
  };
  autoGenerated: boolean;
}

export interface SessionInsight {
  id: string;
  type: 'breakthrough' | 'error' | 'pattern' | 'learning';
  timestamp: Date;
  description: string;
  context: string;
  importance: 'low' | 'medium' | 'high';
}

// ================================================================================
// Session Summary Types
// ================================================================================

export interface SessionSummaryOptions {
  format: 'markdown' | 'json' | 'html' | 'all';
  includeMetadata: boolean;
  includeInsights: boolean;
  includeNextSteps: boolean;
  saveToFile: boolean;
}

export interface SessionSummaryResult {
  summary: string;
  insights: string;
  nextSteps: string;
  metadata: SessionMetadata;
  exportPath?: string;
  success: boolean;
  error?: string;
}

export interface SessionSummaryProgress {
  step: string;
  progress: number; // 0-100
  currentStep: string;
  estimatedTimeRemaining?: number;
}

// ================================================================================
// AI Agent Types
// ================================================================================

export interface AgentDefinition {
  id: string;
  name: string;
  description: string;
  color: string;
  avatar?: string;
  model: 'claude-3' | 'claude-3.5' | 'gpt-4' | 'custom';
  instructions: string;
  tools: AgentTool[];
  capabilities: AgentCapability[];
  templates: Record<string, AgentTemplate>;
}

export interface AgentTool {
  id: string;
  name: string;
  description: string;
  parameters: Record<string, any>;
}

export type AgentCapability = 
  | 'code-generation'
  | 'code-review' 
  | 'debugging'
  | 'testing'
  | 'documentation'
  | 'refactoring'
  | 'architecture'
  | 'ui-design'
  | 'data-analysis';

export interface AgentTemplate {
  pattern: string;
  dependencies: string[];
  relatedAgents: string[];
  crossReferences: string[];
  commonIssues: string[];
  bestPractices: string[];
  workflow?: string;
}

// ================================================================================
// Agent Session Types
// ================================================================================

export interface AgentSession {
  sessionId: string;
  teamId: string;
  agentId: string;
  agentName: string;
  status: AgentStatus;
  currentTask: string;
  progress: number; // 0-100
  output: AgentOutput[];
  files: GeneratedFile[];
  dependencies: string[];
  completedDeliverables: string[];
  metrics: AgentMetrics;
}

export type AgentStatus = 
  | 'initializing'
  | 'thinking'
  | 'working' 
  | 'waiting'
  | 'completed'
  | 'error'
  | 'paused';

export interface AgentOutput {
  id: string;
  timestamp: Date;
  type: 'message' | 'code' | 'file' | 'error' | 'thinking';
  content: string;
  metadata?: Record<string, any>;
}

export interface GeneratedFile {
  id: string;
  path: string;
  content: string;
  type: FileType;
  agent: string;
  timestamp: Date;
  confidence: number; // 0-1
  reviewed: boolean;
}

export interface AgentMetrics {
  startTime: Date;
  endTime?: Date;
  duration?: number;
  tasksCompleted: number;
  filesGenerated: number;
  linesOfCode: number;
  errorsEncountered: number;
  successRate: number; // 0-1
}

// ================================================================================
// Team and Workflow Types  
// ================================================================================

export interface TeamSession {
  teamId: string;
  sessionId: string;
  projectRequirement: string;
  workflow: string;
  agents: AgentSession[];
  status: TeamStatus;
  startTime: Date;
  files: GeneratedFile[];
  context: AIProjectContext;
  metrics: TeamMetrics;
}

export type TeamStatus = 
  | 'spawning'
  | 'planning'
  | 'executing'
  | 'integrating'
  | 'completed'
  | 'error';

export interface AIProjectContext {
  requirement: string;
  projectType: string;
  framework: string;
  features: string[];
  constraints: string[];
  memoryContext?: string;
}

export interface WorkflowTemplate {
  id: string;
  name: string;
  description: string;
  category: string;
  agents: string[];
  sequence: WorkflowStep[];
  commonIssues: string[];
  bestPractices: string[];
  estimatedDuration: number; // minutes
}

export interface WorkflowStep {
  id: string;
  agent: string;
  task: string;
  dependencies: string[];
  deliverables: string[];
  estimatedDuration: number;
  priority: 'low' | 'medium' | 'high' | 'critical';
}

export interface TeamMetrics {
  totalAgents: number;
  activeAgents: number;
  completedTasks: number;
  totalTasks: number;
  filesGenerated: number;
  linesOfCode: number;
  overallProgress: number; // 0-100
  efficiency: number; // 0-1
  collaboration: number; // 0-1 (how well agents work together)
}

// ================================================================================
// Supervision Types
// ================================================================================

export interface SupervisionState {
  isActive: boolean;
  status: SupervisionStatus;
  triggeredBy: 'manual' | 'auto' | 'error' | 'command';
  lastCheck: Date | null;
  recommendations: SupervisionRecommendation[];
  context: SupervisionContext;
}

export type SupervisionStatus = 
  | 'inactive'
  | 'monitoring'
  | 'analyzing'
  | 'recommending'
  | 'intervening';

export interface SupervisionRecommendation {
  id: string;
  type: 'suggestion' | 'warning' | 'error' | 'optimization';
  message: string;
  action?: string;
  priority: 'low' | 'medium' | 'high';
  timestamp: Date;
  dismissed: boolean;
}

export interface SupervisionContext {
  currentCommand?: string;
  recentErrors: string[];
  codeContext: string[];
  userIntent?: string;
  sessionHistory: string[];
}

// ================================================================================
// Export and Import Types
// ================================================================================

export interface ExportOptions {
  format: 'zip' | 'json' | 'markdown' | 'pdf';
  includeNodeModules: boolean;
  includeGitHistory: boolean;
  includeSessions: boolean;
  destination?: string;
}

export interface ImportOptions {
  source: string;
  type: 'session' | 'project' | 'configuration';
  overwrite: boolean;
  backup: boolean;
}