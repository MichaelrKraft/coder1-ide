name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: v1

jobs:
  # Quality checks job
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-npm-

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run type-check

      - name: Check for security vulnerabilities
        run: npm audit --audit-level high

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY_PREFIX }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Cache Jest
        uses: actions/cache@v3
        with:
          path: .jest-cache
          key: ${{ env.CACHE_KEY_PREFIX }}-jest-${{ hashFiles('**/package-lock.json') }}

      - name: Run ${{ matrix.test-type }} tests
        run: npm run test:${{ matrix.test-type }} -- --ci --coverage --maxWorkers=2
        env:
          NODE_ENV: test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            junit.xml
          retention-days: 7

  # Coverage analysis
  coverage:
    name: Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run coverage analysis
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Coverage Report
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage/cobertura-coverage.xml
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          minimum_coverage: 70
          fail_below_threshold: true

  # Performance testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start server for testing
        run: |
          npm run start &
          sleep 10
        env:
          NODE_ENV: production
          PORT: 3001

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.13.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run bundle size check
        run: npm run test:bundle-size

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report
          path: .lighthouseci/
          retention-days: 7

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, test]
    
    strategy:
      matrix:
        node-version: [18, 20]
        os: [ubuntu-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Test production build
        run: |
          npm run start &
          SERVER_PID=$!
          sleep 10
          
          # Test that server is responding
          curl -f http://localhost:3001 || exit 1
          
          # Clean shutdown
          kill $SERVER_PID
        env:
          NODE_ENV: production
          PORT: 3001

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        if: matrix.node-version == 20 && matrix.os == 'ubuntu-latest'
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 1

  # Deployment check (only on main branch)
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [coverage, performance, security, build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment readiness
        run: |
          echo "‚úÖ All quality gates passed"
          echo "‚úÖ Tests passed with coverage requirements met"
          echo "‚úÖ Performance benchmarks met"
          echo "‚úÖ Security scan completed"
          echo "‚úÖ Build verification successful"
          echo "üöÄ Ready for deployment"

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: 'All quality gates passed - ready for deployment',
              context: 'ci/deployment-readiness'
            })

  # Notification job
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [coverage, performance, security, build]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.coverage.result == 'success' && needs.performance.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
        run: |
          echo "üéâ All CI checks passed successfully!"
          
      - name: Notify on failure
        if: needs.coverage.result == 'failure' || needs.performance.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "‚ùå Some CI checks failed. Please review the logs."
          exit 1