import { NextRequest, NextResponse } from 'next/server';
import { getBackendUrl } from '@/lib/api-config';
import { logger } from '@/lib/logger';

const EXPRESS_BACKEND_URL = getBackendUrl();

export async function POST(request: NextRequest) {
  try {
    const data = await request.json();
    
    // Get or create sessionId from localStorage or generate new one
    const sessionId = data.sessionId || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    // First ensure session exists
    const sessionsResponse = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions`, {
      method: 'GET'
    });
    
    let currentSessionId = sessionId;
    
    if (sessionsResponse.ok) {
      const { sessions } = await sessionsResponse.json();
      const sessionExists = sessions.some((s: any) => s.id === sessionId);
      
      // Create session if it doesn't exist
      if (!sessionExists) {
        const createResponse = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            name: `IDE Session ${new Date().toLocaleString()}`,
            description: 'Created from CoderOne IDE'
          })
        });
        
        if (createResponse.ok) {
          const { session } = await createResponse.json();
          currentSessionId = session.id;
        }
      }
    }
    
    // Create checkpoint
    const response = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions/${currentSessionId}/checkpoint`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: data.autoGenerated ? `Auto-checkpoint ${new Date().toLocaleTimeString()}` : `Checkpoint ${new Date().toLocaleTimeString()}`,
        description: data.autoGenerated ? 'Auto-generated checkpoint from IDE' : 'Manual checkpoint from IDE',
        data: {
          timestamp: data.timestamp,
          activeFile: data.activeFile,
          snapshot: data.snapshot
        },
        tags: ['ide', data.autoGenerated ? 'auto' : 'manual'],
        autoGenerated: data.autoGenerated || false
      })
    });
    
    if (!response.ok) {
      const error = await response.text();
      logger.error('Checkpoint creation failed:', error);
      return NextResponse.json(
        { error: 'Failed to create checkpoint' },
        { status: response.status }
      );
    }
    
    const result = await response.json();
    return NextResponse.json({
      ...result,
      sessionId: currentSessionId
    });
    
  } catch (error) {
    logger.error('Checkpoint API error:', error);
    return NextResponse.json(
      { error: 'Failed to create checkpoint' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    // Get sessionId from query params
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    if (!sessionId) {
      // If no sessionId, get latest session
      const sessionsResponse = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions`);
      if (sessionsResponse.ok) {
        const { sessions } = await sessionsResponse.json();
        if (sessions.length > 0) {
          const latestSession = sessions[0];
          const response = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions/${latestSession.id}/checkpoints`);
          if (response.ok) {
            const result = await response.json();
            return NextResponse.json(result);
          }
        }
      }
      return NextResponse.json({ checkpoints: [] });
    }
    
    // Fetch checkpoints from Express backend
    const response = await fetch(`${EXPRESS_BACKEND_URL}/api/sessions/${sessionId}/checkpoints`);
    
    if (!response.ok) {
      return NextResponse.json(
        { error: 'Failed to fetch checkpoints' },
        { status: response.status }
      );
    }
    
    const result = await response.json();
    return NextResponse.json(result);
    
  } catch (error) {
    logger.error('Checkpoint fetch error:', error);
    return NextResponse.json(
      { error: 'Failed to fetch checkpoints' },
      { status: 500 }
    );
  }
}