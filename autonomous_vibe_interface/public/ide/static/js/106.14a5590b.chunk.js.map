{"version":3,"file":"static/js/106.14a5590b.chunk.js","mappings":"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","sources":["services/magic/AIOptimizer.ts"],"sourcesContent":["/**\n * AI Optimizer Service - Phase 2.3 Enhancement\n * Provides advanced accessibility checking and performance optimization for generated components\n */\n\ninterface AccessibilityIssue {\n  type: 'error' | 'warning' | 'info';\n  rule: string;\n  description: string;\n  element: string;\n  fix: string;\n  wcagLevel?: 'A' | 'AA' | 'AAA';\n}\n\ninterface PerformanceIssue {\n  type: 'render' | 'memory' | 'bundle' | 'runtime';\n  severity: 'high' | 'medium' | 'low';\n  description: string;\n  impact: string;\n  suggestion: string;\n}\n\ninterface OptimizationResult {\n  originalCode: string;\n  optimizedCode: string;\n  accessibilityScore: number;\n  performanceScore: number;\n  accessibilityIssues: AccessibilityIssue[];\n  performanceIssues: PerformanceIssue[];\n  improvements: string[];\n  codeSize: {\n    before: number;\n    after: number;\n    reduction: number;\n  };\n}\n\ninterface SEOMetadata {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n  ogTags?: Record<string, string>;\n  structuredData?: any;\n}\n\ninterface ComponentMetrics {\n  renderTime?: number;\n  memoryUsage?: number;\n  domNodes?: number;\n  reRenders?: number;\n  bundleSize?: number;\n}\n\nclass AIOptimizer {\n  private accessibilityRules: Map<string, (code: string) => AccessibilityIssue[]> = new Map();\n  private performancePatterns: Map<string, (code: string) => PerformanceIssue[]> = new Map();\n\n  constructor() {\n    this.initializeAccessibilityRules();\n    this.initializePerformancePatterns();\n  }\n\n  /**\n   * Initialize accessibility checking rules\n   */\n  private initializeAccessibilityRules() {\n    // Alt text for images\n    this.accessibilityRules.set('img-alt', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      const imgRegex = /<img[^>]*>/g;\n      const matches = code.match(imgRegex) || [];\n      \n      matches.forEach(img => {\n        if (!img.includes('alt=')) {\n          issues.push({\n            type: 'error',\n            rule: 'img-alt',\n            description: 'Images must have alt text',\n            element: img,\n            fix: 'Add alt=\"\" or descriptive alt text',\n            wcagLevel: 'A'\n          });\n        }\n      });\n      \n      return issues;\n    });\n\n    // ARIA labels for interactive elements\n    this.accessibilityRules.set('aria-labels', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      const buttonRegex = /<button[^>]*>([^<]*)<\\/button>/g;\n      let match;\n      \n      while ((match = buttonRegex.exec(code)) !== null) {\n        const [fullMatch, content] = match;\n        if (!content.trim() && !fullMatch.includes('aria-label')) {\n          issues.push({\n            type: 'error',\n            rule: 'aria-labels',\n            description: 'Buttons without text must have aria-label',\n            element: fullMatch,\n            fix: 'Add aria-label attribute with descriptive text',\n            wcagLevel: 'A'\n          });\n        }\n      }\n      \n      return issues;\n    });\n\n    // Semantic HTML\n    this.accessibilityRules.set('semantic-html', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      \n      // Check for div soup\n      const divCount = (code.match(/<div/g) || []).length;\n      const semanticTags = ['nav', 'main', 'header', 'footer', 'section', 'article', 'aside'];\n      const semanticCount = semanticTags.reduce((count, tag) => {\n        return count + (code.match(new RegExp(`<${tag}`, 'g')) || []).length;\n      }, 0);\n      \n      if (divCount > 10 && semanticCount < 2) {\n        issues.push({\n          type: 'warning',\n          rule: 'semantic-html',\n          description: 'Consider using semantic HTML elements',\n          element: 'Multiple <div> elements',\n          fix: 'Replace generic divs with semantic elements like <nav>, <main>, <section>',\n          wcagLevel: 'AA'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Color contrast\n    this.accessibilityRules.set('color-contrast', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      \n      // Check for light text on light background\n      if (code.includes('text-gray-300') && code.includes('bg-gray-100')) {\n        issues.push({\n          type: 'error',\n          rule: 'color-contrast',\n          description: 'Insufficient color contrast',\n          element: 'text-gray-300 on bg-gray-100',\n          fix: 'Use darker text color or lighter background',\n          wcagLevel: 'AA'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Keyboard navigation\n    this.accessibilityRules.set('keyboard-nav', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      \n      // Check for onClick without keyboard handlers\n      if (code.includes('onClick') && !code.includes('onKeyDown') && !code.includes('onKeyPress')) {\n        issues.push({\n          type: 'warning',\n          rule: 'keyboard-nav',\n          description: 'Interactive elements should support keyboard navigation',\n          element: 'onClick handlers',\n          fix: 'Add onKeyDown or onKeyPress handlers for keyboard support',\n          wcagLevel: 'A'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Form labels\n    this.accessibilityRules.set('form-labels', (code: string) => {\n      const issues: AccessibilityIssue[] = [];\n      const inputRegex = /<input[^>]*>/g;\n      const matches = code.match(inputRegex) || [];\n      \n      matches.forEach(input => {\n        const hasLabel = code.includes('<label') && code.includes('htmlFor');\n        const hasAriaLabel = input.includes('aria-label');\n        \n        if (!hasLabel && !hasAriaLabel && !input.includes('type=\"hidden\"')) {\n          issues.push({\n            type: 'error',\n            rule: 'form-labels',\n            description: 'Form inputs must have associated labels',\n            element: input,\n            fix: 'Add <label> with htmlFor or aria-label attribute',\n            wcagLevel: 'A'\n          });\n        }\n      });\n      \n      return issues;\n    });\n\n    console.log('✅ Accessibility rules initialized:', this.accessibilityRules.size);\n  }\n\n  /**\n   * Initialize performance optimization patterns\n   */\n  private initializePerformancePatterns() {\n    // Check for unnecessary re-renders\n    this.performancePatterns.set('unnecessary-renders', (code: string) => {\n      const issues: PerformanceIssue[] = [];\n      \n      // Check for inline functions in render\n      if (code.includes('onClick={() =>') || code.includes('onClick={function')) {\n        issues.push({\n          type: 'render',\n          severity: 'medium',\n          description: 'Inline functions cause unnecessary re-renders',\n          impact: 'Component re-renders on every parent render',\n          suggestion: 'Use useCallback hook or define functions outside render'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Check for large lists without virtualization\n    this.performancePatterns.set('list-virtualization', (code: string) => {\n      const issues: PerformanceIssue[] = [];\n      \n      // Check for map over large arrays\n      if (code.includes('.map(') && code.includes('100')) {\n        issues.push({\n          type: 'render',\n          severity: 'high',\n          description: 'Large lists should use virtualization',\n          impact: 'Rendering many DOM nodes impacts performance',\n          suggestion: 'Consider using react-window or react-virtualized for large lists'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Check for missing React.memo\n    this.performancePatterns.set('memo-optimization', (code: string) => {\n      const issues: PerformanceIssue[] = [];\n      \n      // Check for functional components without memo\n      const hasComplexProps = code.includes('props.') && !code.includes('React.memo');\n      if (hasComplexProps) {\n        issues.push({\n          type: 'render',\n          severity: 'low',\n          description: 'Consider using React.memo for pure components',\n          impact: 'Component re-renders when parent re-renders',\n          suggestion: 'Wrap component with React.memo to prevent unnecessary re-renders'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Check for heavy computations\n    this.performancePatterns.set('heavy-computations', (code: string) => {\n      const issues: PerformanceIssue[] = [];\n      \n      // Check for complex calculations in render\n      if ((code.includes('filter(') || code.includes('reduce(')) && !code.includes('useMemo')) {\n        issues.push({\n          type: 'runtime',\n          severity: 'medium',\n          description: 'Heavy computations should be memoized',\n          impact: 'Calculations run on every render',\n          suggestion: 'Use useMemo hook to memoize expensive calculations'\n        });\n      }\n      \n      return issues;\n    });\n\n    // Check for bundle size issues\n    this.performancePatterns.set('bundle-size', (code: string) => {\n      const issues: PerformanceIssue[] = [];\n      \n      // Check for large libraries\n      if (code.includes('import moment from') || code.includes('import _ from')) {\n        issues.push({\n          type: 'bundle',\n          severity: 'high',\n          description: 'Large library imports increase bundle size',\n          impact: 'Slower initial page load',\n          suggestion: 'Use tree-shakeable alternatives or import specific functions'\n        });\n      }\n      \n      return issues;\n    });\n\n    console.log('✅ Performance patterns initialized:', this.performancePatterns.size);\n  }\n\n  /**\n   * Analyze component for accessibility issues\n   */\n  analyzeAccessibility(code: string): {\n    score: number;\n    issues: AccessibilityIssue[];\n  } {\n    const allIssues: AccessibilityIssue[] = [];\n    \n    // Run all accessibility rules\n    this.accessibilityRules.forEach((checkRule) => {\n      const issues = checkRule(code);\n      allIssues.push(...issues);\n    });\n    \n    // Calculate score (100 - 10 points per error, 5 per warning)\n    const errorCount = allIssues.filter(i => i.type === 'error').length;\n    const warningCount = allIssues.filter(i => i.type === 'warning').length;\n    const score = Math.max(0, 100 - (errorCount * 10) - (warningCount * 5));\n    \n    return { score, issues: allIssues };\n  }\n\n  /**\n   * Analyze component for performance issues\n   */\n  analyzePerformance(code: string): {\n    score: number;\n    issues: PerformanceIssue[];\n  } {\n    const allIssues: PerformanceIssue[] = [];\n    \n    // Run all performance patterns\n    this.performancePatterns.forEach((checkPattern) => {\n      const issues = checkPattern(code);\n      allIssues.push(...issues);\n    });\n    \n    // Calculate score\n    const highCount = allIssues.filter(i => i.severity === 'high').length;\n    const mediumCount = allIssues.filter(i => i.severity === 'medium').length;\n    const lowCount = allIssues.filter(i => i.severity === 'low').length;\n    const score = Math.max(0, 100 - (highCount * 15) - (mediumCount * 10) - (lowCount * 5));\n    \n    return { score, issues: allIssues };\n  }\n\n  /**\n   * Optimize component code\n   */\n  async optimizeComponent(code: string): Promise<OptimizationResult> {\n    let optimizedCode = code;\n    const improvements: string[] = [];\n    \n    // Accessibility optimizations\n    const { score: accessibilityScore, issues: accessibilityIssues } = this.analyzeAccessibility(code);\n    \n    // Auto-fix accessibility issues\n    if (code.includes('<img') && !code.includes('alt=')) {\n      optimizedCode = optimizedCode.replace(/<img([^>]*)>/g, '<img$1 alt=\"\">');\n      improvements.push('Added alt attributes to images');\n    }\n    \n    if (code.includes('<button>') && !code.includes('type=')) {\n      optimizedCode = optimizedCode.replace(/<button>/g, '<button type=\"button\">');\n      improvements.push('Added type attribute to buttons');\n    }\n    \n    // Performance optimizations\n    const { score: performanceScore, issues: performanceIssues } = this.analyzePerformance(code);\n    \n    // Add React.memo if not present\n    if (!code.includes('React.memo') && code.includes('const') && code.includes('props')) {\n      const componentMatch = code.match(/const\\s+(\\w+)\\s*=\\s*\\(/);\n      if (componentMatch) {\n        const componentName = componentMatch[1];\n        optimizedCode = optimizedCode.replace(\n          `export default ${componentName};`,\n          `export default React.memo(${componentName});`\n        );\n        improvements.push('Added React.memo for performance optimization');\n      }\n    }\n    \n    // Add lazy loading for images\n    if (code.includes('<img') && !code.includes('loading=')) {\n      optimizedCode = optimizedCode.replace(/<img([^>]*)>/g, '<img$1 loading=\"lazy\">');\n      improvements.push('Added lazy loading to images');\n    }\n    \n    // Calculate code size reduction\n    const originalSize = code.length;\n    const optimizedSize = optimizedCode.length;\n    \n    return {\n      originalCode: code,\n      optimizedCode,\n      accessibilityScore,\n      performanceScore,\n      accessibilityIssues,\n      performanceIssues,\n      improvements,\n      codeSize: {\n        before: originalSize,\n        after: optimizedSize,\n        reduction: originalSize - optimizedSize\n      }\n    };\n  }\n\n  /**\n   * Generate SEO metadata for component\n   */\n  generateSEOMetadata(componentType: string, content?: string): SEOMetadata {\n    const metadata: SEOMetadata = {};\n    \n    switch (componentType) {\n      case 'hero':\n        metadata.title = 'Welcome to Our Platform';\n        metadata.description = 'Discover amazing features and start your journey';\n        metadata.keywords = ['platform', 'features', 'innovation'];\n        break;\n      case 'pricing':\n        metadata.title = 'Pricing Plans - Choose Your Perfect Plan';\n        metadata.description = 'Flexible pricing options to suit every need';\n        metadata.keywords = ['pricing', 'plans', 'subscription'];\n        break;\n      case 'product':\n        metadata.title = 'Product Showcase';\n        metadata.description = 'Browse our collection of premium products';\n        metadata.keywords = ['products', 'shop', 'store'];\n        break;\n    }\n    \n    // Open Graph tags\n    metadata.ogTags = {\n      'og:title': metadata.title || '',\n      'og:description': metadata.description || '',\n      'og:type': 'website'\n    };\n    \n    return metadata;\n  }\n\n  /**\n   * Measure component performance metrics\n   */\n  measureComponentMetrics(code: string): ComponentMetrics {\n    const metrics: ComponentMetrics = {};\n    \n    // Estimate DOM nodes\n    const elementMatches = code.match(/<[^/][^>]*>/g) || [];\n    metrics.domNodes = elementMatches.length;\n    \n    // Estimate bundle size (rough calculation)\n    metrics.bundleSize = code.length * 0.4; // Assuming ~40% after minification\n    \n    // Check for potential re-render triggers\n    const stateHooks = (code.match(/useState/g) || []).length;\n    const effectHooks = (code.match(/useEffect/g) || []).length;\n    metrics.reRenders = stateHooks + effectHooks;\n    \n    return metrics;\n  }\n\n  /**\n   * Generate accessibility report\n   */\n  generateAccessibilityReport(code: string): string {\n    const { score, issues } = this.analyzeAccessibility(code);\n    \n    let report = `# Accessibility Report\\n\\n`;\n    report += `## Score: ${score}/100\\n\\n`;\n    \n    if (issues.length === 0) {\n      report += `✅ No accessibility issues found!\\n`;\n    } else {\n      report += `## Issues Found:\\n\\n`;\n      \n      const errors = issues.filter(i => i.type === 'error');\n      const warnings = issues.filter(i => i.type === 'warning');\n      \n      if (errors.length > 0) {\n        report += `### Errors (${errors.length})\\n`;\n        errors.forEach(issue => {\n          report += `- **${issue.rule}**: ${issue.description}\\n`;\n          report += `  - WCAG Level: ${issue.wcagLevel}\\n`;\n          report += `  - Fix: ${issue.fix}\\n\\n`;\n        });\n      }\n      \n      if (warnings.length > 0) {\n        report += `### Warnings (${warnings.length})\\n`;\n        warnings.forEach(issue => {\n          report += `- **${issue.rule}**: ${issue.description}\\n`;\n          report += `  - Fix: ${issue.fix}\\n\\n`;\n        });\n      }\n    }\n    \n    return report;\n  }\n\n  /**\n   * Generate performance report\n   */\n  generatePerformanceReport(code: string): string {\n    const { score, issues } = this.analyzePerformance(code);\n    const metrics = this.measureComponentMetrics(code);\n    \n    let report = `# Performance Report\\n\\n`;\n    report += `## Score: ${score}/100\\n\\n`;\n    \n    report += `## Metrics:\\n`;\n    report += `- DOM Nodes: ${metrics.domNodes}\\n`;\n    report += `- Estimated Bundle Size: ${Math.round(metrics.bundleSize || 0)} bytes\\n`;\n    report += `- Potential Re-renders: ${metrics.reRenders}\\n\\n`;\n    \n    if (issues.length === 0) {\n      report += `✅ No performance issues found!\\n`;\n    } else {\n      report += `## Issues Found:\\n\\n`;\n      \n      issues.forEach(issue => {\n        const emoji = issue.severity === 'high' ? '🔴' : issue.severity === 'medium' ? '🟡' : '🟢';\n        report += `${emoji} **${issue.description}**\\n`;\n        report += `- Impact: ${issue.impact}\\n`;\n        report += `- Suggestion: ${issue.suggestion}\\n\\n`;\n      });\n    }\n    \n    return report;\n  }\n\n  /**\n   * Apply smart optimizations based on component type\n   */\n  applySmartOptimizations(code: string, componentType: string): string {\n    let optimized = code;\n    \n    // Component-specific optimizations\n    switch (componentType) {\n      case 'list':\n      case 'table':\n        // Add virtualization for large lists\n        if (!code.includes('react-window')) {\n          optimized = `import { FixedSizeList } from 'react-window';\\n${optimized}`;\n        }\n        break;\n        \n      case 'form':\n        // Add form validation\n        if (!code.includes('onSubmit')) {\n          optimized = optimized.replace(\n            '<form',\n            '<form onSubmit={(e) => { e.preventDefault(); /* validation */ }}'\n          );\n        }\n        break;\n        \n      case 'image':\n      case 'gallery':\n        // Add image optimization\n        if (!code.includes('loading=')) {\n          optimized = optimized.replace(/<img/g, '<img loading=\"lazy\"');\n        }\n        break;\n    }\n    \n    return optimized;\n  }\n}\n\n// Create singleton instance\nconst aiOptimizer = new AIOptimizer();\n\nexport default aiOptimizer;\nexport type {\n  AccessibilityIssue,\n  PerformanceIssue,\n  OptimizationResult,\n  SEOMetadata,\n  ComponentMetrics\n};"],"names":["constructor","accessibilityRules","Map","performancePatterns","this","initializeAccessibilityRules","initializePerformancePatterns","set","code","issues","match","forEach","img","includes","push","type","rule","description","element","fix","wcagLevel","buttonRegex","exec","fullMatch","content","trim","divCount","length","semanticCount","reduce","count","tag","RegExp","input","hasLabel","hasAriaLabel","console","log","size","severity","impact","suggestion","analyzeAccessibility","allIssues","checkRule","errorCount","filter","i","warningCount","score","Math","max","analyzePerformance","checkPattern","highCount","mediumCount","lowCount","optimizeComponent","optimizedCode","improvements","accessibilityScore","accessibilityIssues","replace","performanceScore","performanceIssues","componentMatch","componentName","originalSize","optimizedSize","originalCode","codeSize","before","after","reduction","generateSEOMetadata","componentType","metadata","title","keywords","ogTags","measureComponentMetrics","metrics","elementMatches","domNodes","bundleSize","stateHooks","effectHooks","reRenders","generateAccessibilityReport","report","errors","warnings","issue","generatePerformanceReport","round","emoji","applySmartOptimizations","optimized"],"sourceRoot":""}