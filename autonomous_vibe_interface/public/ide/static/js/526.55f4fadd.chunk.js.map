{"version":3,"file":"static/js/526.55f4fadd.chunk.js","mappings":"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","sources":["components/VoiceInterface.tsx","components/ThinkingModeToggle.tsx","components/ErrorDoctor.tsx","services/WebSocketBatcher.ts","hooks/useWebSocketBatching.tsx","components/Terminal.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport './VoiceInterface.css';\n\ninterface VoiceInterfaceProps {\n  onVoiceCommand: (command: string, action: string) => void;\n  disabled?: boolean;\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  results: SpeechRecognitionResultList;\n  resultIndex: number;\n}\n\ninterface SpeechRecognitionErrorEvent extends Event {\n  error: string;\n  message: string;\n}\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\nconst VoiceInterface: React.FC<VoiceInterfaceProps> = ({ onVoiceCommand, disabled = false }) => {\n  const [isListening, setIsListening] = useState(false);\n  const [isSupported, setIsSupported] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [status, setStatus] = useState<'idle' | 'listening' | 'processing' | 'error'>('idle');\n  const [confidence, setConfidence] = useState(0);\n  \n  const recognitionRef = useRef<any>(null);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Initialize speech recognition\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    \n    if (SpeechRecognition) {\n      setIsSupported(true);\n      \n      const recognition = new SpeechRecognition();\n      recognition.continuous = false;\n      recognition.interimResults = false;\n      recognition.lang = 'en-US';\n      recognition.maxAlternatives = 1;\n      \n      recognition.onstart = () => {\n        console.log('🎤 Voice recognition started');\n        setStatus('listening');\n        setIsListening(true);\n        setTranscript('');\n        \n        // Set timeout for auto-stop\n        timeoutRef.current = setTimeout(() => {\n          if (recognition && isListening) {\n            recognition.stop();\n          }\n        }, 5000); // 5 second timeout\n      };\n      \n      recognition.onresult = (event: SpeechRecognitionEvent) => {\n        const result = event.results[0][0];\n        const command = result.transcript.toLowerCase().trim();\n        const confidence = result.confidence;\n        \n        console.log('🎤 Voice recognition result:', command, 'confidence:', confidence);\n        setTranscript(result.transcript);\n        setConfidence(confidence);\n        setStatus('processing');\n        \n        // Process the command\n        processVoiceCommand(command);\n      };\n      \n      recognition.onerror = (event: SpeechRecognitionErrorEvent) => {\n        console.error('🎤 Voice recognition error:', event.error);\n        setStatus('error');\n        setIsListening(false);\n        \n        // Clear timeout\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current);\n          timeoutRef.current = null;\n        }\n        \n        // Reset status after error\n        setTimeout(() => {\n          setStatus('idle');\n          setTranscript('');\n        }, 2000);\n      };\n      \n      recognition.onend = () => {\n        console.log('🎤 Voice recognition ended');\n        setIsListening(false);\n        \n        // Clear timeout\n        if (timeoutRef.current) {\n          clearTimeout(timeoutRef.current);\n          timeoutRef.current = null;\n        }\n        \n        // Reset status after processing\n        setTimeout(() => {\n          setStatus('idle');\n          if (status !== 'error') {\n            setTranscript('');\n          }\n        }, 2000);\n      };\n      \n      recognitionRef.current = recognition;\n    } else {\n      console.warn('🎤 Speech recognition not supported');\n      setIsSupported(false);\n    }\n    \n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  const processVoiceCommand = useCallback((command: string) => {\n    console.log('🔄 Processing voice command:', command);\n    \n    let action = 'unknown';\n    let cleanCommand = command;\n    \n    // Map voice commands to actions\n    if (command.includes('claude') || command.includes('start claude') || command.includes('run claude') || command.includes('open claude')) {\n      action = 'run-claude';\n      cleanCommand = 'claude';\n    } else if (command.startsWith('type ') || command.startsWith('enter ') || command.startsWith('run ')) {\n      action = 'terminal-input';\n      cleanCommand = command.replace(/^(type|enter|run)\\s+/i, '').trim();\n    } else if (command.includes('clear terminal') || command === 'clear') {\n      action = 'clear-terminal';\n      cleanCommand = 'clear';\n    } else if (command.includes('help')) {\n      action = 'help';\n      cleanCommand = 'help';\n    } else if (command.includes('sleep mode')) {\n      action = 'toggle-sleep';\n    } else if (command.includes('supervision')) {\n      action = 'toggle-supervision';\n    } else if (command.includes('infinite loop') || command.includes('parallel agents')) {\n      action = 'toggle-infinite';\n    } else if (command.includes('hivemind')) {\n      action = 'open-hivemind';\n    } else {\n      // Try to interpret as a direct terminal command\n      const commonCommands = ['ls', 'cd', 'pwd', 'git', 'npm', 'yarn', 'python', 'node', 'cat', 'mkdir', 'rm'];\n      const firstWord = command.split(' ')[0].toLowerCase();\n      \n      if (commonCommands.includes(firstWord)) {\n        action = 'terminal-input';\n        cleanCommand = command;\n      }\n    }\n    \n    console.log('🎯 Command mapped:', { original: command, action, clean: cleanCommand });\n    \n    // Send command to parent component\n    if (onVoiceCommand) {\n      onVoiceCommand(cleanCommand, action);\n    }\n  }, [onVoiceCommand]);\n\n  const startListening = useCallback(() => {\n    if (!isSupported || disabled || isListening) {\n      return;\n    }\n    \n    if (recognitionRef.current) {\n      try {\n        recognitionRef.current.start();\n      } catch (error) {\n        console.error('🎤 Failed to start recognition:', error);\n        setStatus('error');\n        setTimeout(() => setStatus('idle'), 2000);\n      }\n    }\n  }, [isSupported, disabled, isListening]);\n\n  const stopListening = useCallback(() => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop();\n    }\n  }, [isListening]);\n\n  // Handle push-to-talk interaction\n  const handleMouseDown = useCallback(() => {\n    startListening();\n  }, [startListening]);\n\n  const handleMouseUp = useCallback(() => {\n    stopListening();\n  }, [stopListening]);\n\n  const handleMouseLeave = useCallback(() => {\n    stopListening();\n  }, [stopListening]);\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'listening': return '🎤';\n      case 'processing': return '⚡';\n      case 'error': return '❌';\n      default: return '🎙️';\n    }\n  };\n\n  const getStatusText = () => {\n    switch (status) {\n      case 'listening': return 'Listening...';\n      case 'processing': return 'Processing...';\n      case 'error': return 'Error occurred';\n      default: return 'Click to speak';\n    }\n  };\n\n  if (!isSupported) {\n    return (\n      <div className=\"voice-interface unsupported\">\n        <div className=\"voice-button disabled\" title=\"Speech recognition not supported\">\n          🚫\n        </div>\n        <div className=\"voice-status\">Not supported</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"voice-interface\">\n      <button\n        className={`voice-button ${status} ${disabled ? 'disabled' : ''}`}\n        onMouseDown={handleMouseDown}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onTouchStart={handleMouseDown}\n        onTouchEnd={handleMouseUp}\n        disabled={disabled || !isSupported}\n        title={getStatusText()}\n      >\n        🎤\n      </button>\n    </div>\n  );\n};\n\nexport default VoiceInterface;","import React, { useState, useEffect, useRef } from 'react';\nimport './ThinkingModeToggle.css';\nimport { useFeatureFlag } from '../hooks/useFeatureFlag';\n\nexport type ThinkingMode = 'normal' | 'think' | 'think-hard' | 'ultrathink';\n\ninterface ThinkingModeConfig {\n  id: ThinkingMode;\n  label: string;\n  description: string;\n  icon: string;\n  estimatedTime: string;\n  tokenMultiplier: number;\n}\n\nconst THINKING_MODES: ThinkingModeConfig[] = [\n  {\n    id: 'normal',\n    label: 'Normal',\n    description: 'Standard response speed',\n    icon: '⚡',\n    estimatedTime: '~5s',\n    tokenMultiplier: 1.0,\n  },\n  {\n    id: 'think',\n    label: 'Think',\n    description: 'More thoughtful responses',\n    icon: '🤔',\n    estimatedTime: '~15s',\n    tokenMultiplier: 1.5,\n  },\n  {\n    id: 'think-hard',\n    label: 'Think Hard',\n    description: 'Deep analysis and reasoning',\n    icon: '🧠',\n    estimatedTime: '~30s',\n    tokenMultiplier: 2.0,\n  },\n  {\n    id: 'ultrathink',\n    label: 'Ultrathink',\n    description: 'Maximum reasoning depth',\n    icon: '💭',\n    estimatedTime: '~60s',\n    tokenMultiplier: 3.0,\n  },\n];\n\ninterface ThinkingModeToggleProps {\n  value?: ThinkingMode;\n  onChange?: (mode: ThinkingMode) => void;\n  disabled?: boolean;\n  compact?: boolean;\n}\n\nconst ThinkingModeToggle: React.FC<ThinkingModeToggleProps> = ({\n  value,\n  onChange,\n  disabled = false,\n  compact = false,\n}) => {\n\n  const isEnabled = useFeatureFlag('THINKING_MODE_TOGGLE');\n  const [selectedMode, setSelectedMode] = useState<ThinkingMode>('normal');\n  const [showTooltip, setShowTooltip] = useState<string | null>(null);\n  const [showDropdown, setShowDropdown] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n\n  // Load saved thinking mode from localStorage\n  useEffect(() => {\n    const saved = localStorage.getItem('coder1-thinking-mode');\n    if (saved && THINKING_MODES.find(m => m.id === saved)) {\n      setSelectedMode(saved as ThinkingMode);\n    }\n  }, []);\n\n  // Close dropdown when clicking outside (only for compact mode)\n  useEffect(() => {\n    if (!compact || !showDropdown) return;\n    \n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setShowDropdown(false);\n      }\n    };\n    \n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, [compact, showDropdown]);\n\n  // Use controlled value if provided\n  const currentMode = value || selectedMode;\n\n  const handleModeChange = (mode: ThinkingMode) => {\n    setSelectedMode(mode);\n    localStorage.setItem('coder1-thinking-mode', mode);\n    \n    if (onChange) {\n      onChange(mode);\n    }\n  };\n\n  const getCurrentModeConfig = () => {\n    return THINKING_MODES.find(m => m.id === currentMode) || THINKING_MODES[0];\n  };\n\n  if (!isEnabled) {\n    return null;\n  }\n\n  if (compact) {\n    const currentConfig = getCurrentModeConfig();\n    \n    return (\n      <div className=\"thinking-mode-compact\" ref={dropdownRef}>\n        <button \n          className={`thinking-mode-indicator ${disabled ? 'disabled' : ''}`}\n          disabled={disabled}\n          onClick={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            setShowDropdown(!showDropdown);\n          }}\n          onMouseEnter={() => !showDropdown && setShowTooltip(currentConfig.id)}\n          onMouseLeave={() => setShowTooltip(null)}\n        >\n          <span className=\"mode-icon\">{currentConfig.icon}</span>\n          <span className=\"mode-label\">{currentConfig.label}</span>\n        </button>\n        \n        {showDropdown && (\n          <div className=\"thinking-mode-dropdown\">\n            {THINKING_MODES.map((mode) => (\n              <button\n                key={mode.id}\n                className={`thinking-mode-dropdown-item ${currentMode === mode.id ? 'active' : ''}`}\n                onClick={() => {\n                  handleModeChange(mode.id);\n                  setShowDropdown(false);\n                }}\n              >\n                <div className=\"dropdown-item-content\">\n                  <span className=\"mode-icon\">{mode.icon}</span>\n                  <span className=\"mode-label\">{mode.label}</span>\n                </div>\n                <div className=\"dropdown-item-details\">\n                  <span className=\"mode-time\">{mode.estimatedTime}</span>\n                </div>\n              </button>\n            ))}\n          </div>\n        )}\n        \n        {showTooltip && !showDropdown && (\n          <div className=\"thinking-mode-tooltip\">\n            <div className=\"tooltip-header\">\n              {currentConfig.icon} {currentConfig.label}\n            </div>\n            <div className=\"tooltip-description\">\n              {currentConfig.description}\n            </div>\n            <div className=\"tooltip-stats\">\n              <span>Time: {currentConfig.estimatedTime}</span>\n              <span>Tokens: {currentConfig.tokenMultiplier}x</span>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={`thinking-mode-toggle ${disabled ? 'disabled' : ''}`}>\n      <div className=\"thinking-mode-header\">\n        <span className=\"thinking-icon\">🧠</span>\n        <span className=\"thinking-label\">Thinking Mode</span>\n      </div>\n      \n      <div className=\"thinking-mode-options\">\n        {THINKING_MODES.map((mode) => (\n          <button\n            key={mode.id}\n            className={`thinking-mode-option ${currentMode === mode.id ? 'active' : ''}`}\n            onClick={() => handleModeChange(mode.id)}\n            disabled={disabled}\n            onMouseEnter={() => setShowTooltip(mode.id)}\n            onMouseLeave={() => setShowTooltip(null)}\n          >\n            <div className=\"mode-content\">\n              <span className=\"mode-icon\">{mode.icon}</span>\n              <span className=\"mode-label\">{mode.label}</span>\n            </div>\n            \n            <div className=\"mode-details\">\n              <span className=\"mode-time\">{mode.estimatedTime}</span>\n              <span className=\"mode-tokens\">{mode.tokenMultiplier}x</span>\n            </div>\n            \n            {showTooltip === mode.id && (\n              <div className=\"thinking-mode-tooltip\">\n                <div className=\"tooltip-description\">\n                  {mode.description}\n                </div>\n                <div className=\"tooltip-stats\">\n                  <div>Estimated time: {mode.estimatedTime}</div>\n                  <div>Token usage: {mode.tokenMultiplier}x normal</div>\n                </div>\n              </div>\n            )}\n          </button>\n        ))}\n      </div>\n      \n      <div className=\"thinking-mode-info\">\n        <div className=\"current-mode\">\n          Current: <strong>{getCurrentModeConfig().label}</strong>\n        </div>\n        <div className=\"mode-description\">\n          {getCurrentModeConfig().description}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Export helper functions for external use\nexport const getThinkingModeConfig = (mode: ThinkingMode) => {\n  return THINKING_MODES.find(m => m.id === mode) || THINKING_MODES[0];\n};\n\nexport const getCurrentThinkingMode = (): ThinkingMode => {\n  const saved = localStorage.getItem('coder1-thinking-mode');\n  return (saved && THINKING_MODES.find(m => m.id === saved)) \n    ? saved as ThinkingMode \n    : 'normal';\n};\n\nexport default ThinkingModeToggle;","import React, { useState, useEffect } from 'react';\nimport './ErrorDoctor.css';\n\ninterface Fix {\n  title: string;\n  description: string;\n  command?: string;\n  confidence: 'high' | 'medium' | 'low';\n  requiresFileEdit?: boolean;\n}\n\ninterface ErrorAnalysis {\n  success: boolean;\n  source: string;\n  confidence: string;\n  fixes: Fix[];\n  explanation?: string;\n  metadata?: {\n    timestamp: string;\n    analysisTime: number;\n    errorLength: number;\n    contextProvided: boolean;\n  };\n}\n\ninterface ErrorDoctorEvent {\n  sessionId: string;\n  analysis: ErrorAnalysis;\n  timestamp: number;\n}\n\ninterface ErrorDoctorProps {\n  socket: any;\n  terminalId?: string;\n  onApplyFix?: (fix: Fix) => void;\n}\n\nconst ErrorDoctor: React.FC<ErrorDoctorProps> = ({ socket, terminalId, onApplyFix }) => {\n  const [analyses, setAnalyses] = useState<ErrorDoctorEvent[]>([]);\n  const [isEnabled, setIsEnabled] = useState(true);\n  const [isVisible, setIsVisible] = useState(false);\n  const [status, setStatus] = useState<any>(null);\n  const [autoHideTimer, setAutoHideTimer] = useState<NodeJS.Timeout | null>(null);\n  const [lastAppliedFix, setLastAppliedFix] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    // Check Error Doctor status\n    const checkStatus = async () => {\n      try {\n        const response = await fetch('/api/error-doctor/status');\n        const data = await response.json();\n        if (data.success) {\n          setStatus(data.status);\n          setIsEnabled(data.status.enabled);\n        }\n      } catch (error) {\n        console.warn('Error Doctor status check failed:', error);\n        setIsEnabled(false);\n      }\n    };\n\n    checkStatus();\n\n    // Listen for error analyses\n    const handleErrorAnalysis = (event: ErrorDoctorEvent) => {\n      console.log('🔍 Error Doctor: Received analysis', event);\n      \n      // Clear any existing auto-hide timer\n      if (autoHideTimer) {\n        clearTimeout(autoHideTimer);\n        setAutoHideTimer(null);\n      }\n      \n      setAnalyses(prev => {\n        const newAnalyses = [event, ...prev].slice(0, 10); // Keep last 10 analyses\n        return newAnalyses;\n      });\n      setIsVisible(true); // Show the panel when new analysis arrives\n      \n      // Auto-hide after 2 minutes if no interaction\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        setAutoHideTimer(null);\n      }, 120000); // 2 minutes\n      \n      setAutoHideTimer(timer);\n    };\n\n    // Listen for fix application results\n    const handleFixApplied = (event: any) => {\n      console.log('✅ Error Doctor: Fix applied', event);\n      \n      // Show success message\n      setLastAppliedFix(event.fix?.title || 'Fix applied successfully');\n      \n      // Clear the auto-hide timer when fix is applied\n      if (autoHideTimer) {\n        clearTimeout(autoHideTimer);\n        setAutoHideTimer(null);\n      }\n      \n      // Auto-close panel after successful fix (after 3 seconds)\n      const closeTimer = setTimeout(() => {\n        setIsVisible(false);\n        setAnalyses([]);\n        setLastAppliedFix(null);\n      }, 3000);\n      \n      setAutoHideTimer(closeTimer);\n    };\n\n    const handleFixError = (event: any) => {\n      console.error('❌ Error Doctor: Fix error', event);\n      // Keep panel open on error so user can see what went wrong\n    };\n\n    socket.on('error-doctor:analysis', handleErrorAnalysis);\n    socket.on('error-doctor:fix-applied', handleFixApplied);\n    socket.on('error-doctor:fix-error', handleFixError);\n\n    return () => {\n      socket.off('error-doctor:analysis', handleErrorAnalysis);\n      socket.off('error-doctor:fix-applied', handleFixApplied);\n      socket.off('error-doctor:fix-error', handleFixError);\n      \n      // Clean up auto-hide timer\n      if (autoHideTimer) {\n        clearTimeout(autoHideTimer);\n      }\n    };\n  }, [socket, autoHideTimer]);\n\n  const handleApplyFix = (fix: Fix) => {\n    if (!socket || !terminalId) {\n      console.error('Error Doctor: Cannot apply fix - no socket or terminal ID');\n      return;\n    }\n\n    // Clear auto-hide timer when user interacts\n    if (autoHideTimer) {\n      clearTimeout(autoHideTimer);\n      setAutoHideTimer(null);\n    }\n\n    console.log('🔧 Error Doctor: Applying fix', fix);\n    socket.emit('error-doctor:apply-fix', {\n      sessionId: terminalId,\n      fix: fix\n    });\n\n    if (onApplyFix) {\n      onApplyFix(fix);\n    }\n  };\n\n  const getConfidenceColor = (confidence: string) => {\n    switch (confidence) {\n      case 'high':\n        return '#10b981'; // green\n      case 'medium':\n        return '#f59e0b'; // amber\n      case 'low':\n        return '#ef4444'; // red\n      default:\n        return '#6b7280'; // gray\n    }\n  };\n\n  const getSourceIcon = (source: string) => {\n    switch (source) {\n      case 'quick-fix':\n        return '⚡';\n      case 'claude-ai':\n        return '🤖';\n      case 'openai':\n        return '🧠';\n      default:\n        return '🔍';\n    }\n  };\n\n  if (!isEnabled) {\n    return null; // Don't render if Error Doctor is disabled\n  }\n\n  return (\n    <div className={`error-doctor ${isVisible ? 'visible' : 'hidden'}`}>\n      <div className=\"error-doctor-header\">\n        <div className=\"error-doctor-title\">\n          <span className=\"error-doctor-icon\">🩺</span>\n          Error Doctor\n          {(status && status.aiServices.openai) || status?.aiServices.anthropic ? (\n            <span className=\"ai-indicator\">AI</span>\n          ) : (\n            <span className=\"quick-fix-indicator\">Quick Fix</span>\n          )}\n        </div>\n        <div className=\"error-doctor-controls\">\n          {analyses.length > 0 && (\n            <button \n              className=\"close-panel-btn\" \n              onClick={() => {\n                setAnalyses([]);\n                setIsVisible(false);\n              }}\n              title=\"Clear all analyses and close panel\"\n            >\n              ✕\n            </button>\n          )}\n          <button \n            className=\"toggle-visibility\" \n            onClick={() => setIsVisible(!isVisible)}\n            title={isVisible ? 'Hide Error Doctor' : 'Show Error Doctor'}\n          >\n            {isVisible ? '−' : '+'}\n          </button>\n        </div>\n      </div>\n\n      {isVisible && (\n        <div className=\"error-doctor-content\">\n          {lastAppliedFix && (\n            <div className=\"success-message\">\n              <span className=\"success-icon\">✅</span>\n              <span className=\"success-text\">Applied: {lastAppliedFix}</span>\n              <span className=\"auto-close-notice\">(closing in 3s)</span>\n            </div>\n          )}\n          \n          {analyses.length === 0 ? (\n            <div className=\"no-analyses\">\n              <div className=\"no-analyses-icon\">🔍</div>\n              <div className=\"no-analyses-text\">\n                Monitoring for errors...\n                <br />\n                <span className=\"no-analyses-subtext\">\n                  I'll automatically analyze any errors that appear in your terminal\n                </span>\n              </div>\n            </div>\n          ) : (\n            <div className=\"analyses-list\">\n              {analyses.map((analysis, index) => (\n                <div key={`${analysis.timestamp}-${index}`} className=\"analysis-item\">\n                  <div className=\"analysis-header\">\n                    <span className=\"analysis-source\">\n                      {getSourceIcon(analysis.analysis.source)} {analysis.analysis.source}\n                    </span>\n                    <span \n                      className=\"analysis-confidence\"\n                      style={{ color: getConfidenceColor(analysis.analysis.confidence) }}\n                    >\n                      {analysis.analysis.confidence} confidence\n                    </span>\n                  </div>\n\n                  {analysis.analysis.explanation && (\n                    <div className=\"analysis-explanation\">\n                      {analysis.analysis.explanation}\n                    </div>\n                  )}\n\n                  <div className=\"fixes-list\">\n                    {analysis.analysis.fixes.map((fix, fixIndex) => (\n                      <div key={fixIndex} className=\"fix-item\">\n                        <div className=\"fix-header\">\n                          <span className=\"fix-title\">{fix.title}</span>\n                          <span \n                            className=\"fix-confidence\"\n                            style={{ color: getConfidenceColor(fix.confidence) }}\n                          >\n                            {fix.confidence}\n                          </span>\n                        </div>\n                        \n                        <div className=\"fix-description\">\n                          {fix.description}\n                        </div>\n\n                        {fix.command && (\n                          <div className=\"fix-command\">\n                            <code>{fix.command}</code>\n                          </div>\n                        )}\n\n                        <div className=\"fix-actions\">\n                          {fix.command ? (\n                            <button\n                              className=\"apply-fix-btn\"\n                              onClick={() => handleApplyFix(fix)}\n                              title=\"Apply this fix automatically\"\n                            >\n                              🔧 Apply Fix\n                            </button>\n                          ) : (\n                            <span className=\"manual-fix-note\">\n                              ℹ️ Manual intervention required\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"analysis-timestamp\">\n                    {new Date(analysis.timestamp).toLocaleTimeString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {analyses.length > 0 && (\n            <div className=\"error-doctor-footer\">\n              <button \n                className=\"clear-analyses-btn\"\n                onClick={() => {\n                  setAnalyses([]);\n                  setLastAppliedFix(null);\n                  if (autoHideTimer) {\n                    clearTimeout(autoHideTimer);\n                    setAutoHideTimer(null);\n                  }\n                }}\n                title=\"Clear all analyses\"\n              >\n                🗑️ Clear\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ErrorDoctor;","interface BatchedMessage {\n  id: string;\n  event: string;\n  data: any;\n  timestamp: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface BatchConfig {\n  maxBatchSize: number;\n  batchTimeoutMs: number;\n  highPriorityTimeoutMs: number;\n  maxQueueSize: number;\n}\n\ntype MessageHandler = (messages: BatchedMessage[]) => void;\n\nexport class WebSocketBatcher {\n  private queue: BatchedMessage[] = [];\n  private batchTimeout: NodeJS.Timeout | null = null;\n  private config: BatchConfig;\n  private handler: MessageHandler;\n  private messageCount = 0;\n  \n  constructor(handler: MessageHandler, config?: Partial<BatchConfig>) {\n    this.handler = handler;\n    this.config = {\n      maxBatchSize: 10,\n      batchTimeoutMs: 50, // 50ms batching for better responsiveness\n      highPriorityTimeoutMs: 10, // High priority messages get faster processing\n      maxQueueSize: 1000,\n      ...config\n    };\n  }\n  \n  public addMessage(event: string, data: any, priority: 'high' | 'medium' | 'low' = 'medium'): void {\n    // Prevent queue overflow\n    if (this.queue.length >= this.config.maxQueueSize) {\n      console.warn('WebSocket batch queue full, dropping oldest messages');\n      this.queue = this.queue.slice(-this.config.maxQueueSize + 1);\n    }\n    \n    const message: BatchedMessage = {\n      id: `msg_${this.messageCount++}_${Date.now()}`,\n      event,\n      data,\n      timestamp: Date.now(),\n      priority\n    };\n    \n    this.queue.push(message);\n    \n    // High priority messages trigger immediate processing\n    if (priority === 'high') {\n      this.scheduleFlush(this.config.highPriorityTimeoutMs);\n    } else {\n      this.scheduleFlush(this.config.batchTimeoutMs);\n    }\n    \n    // Flush when batch size is reached\n    if (this.queue.length >= this.config.maxBatchSize) {\n      this.flush();\n    }\n  }\n  \n  private scheduleFlush(timeoutMs: number): void {\n    if (this.batchTimeout) {\n      return; // Already scheduled\n    }\n    \n    this.batchTimeout = setTimeout(() => {\n      this.flush();\n    }, timeoutMs);\n  }\n  \n  private flush(): void {\n    if (this.batchTimeout) {\n      clearTimeout(this.batchTimeout);\n      this.batchTimeout = null;\n    }\n    \n    if (this.queue.length === 0) {\n      return;\n    }\n    \n    // Sort by priority and timestamp\n    const sortedMessages = [...this.queue].sort((a, b) => {\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const priorityDiff = priorityOrder[a.priority] - priorityOrder[b.priority];\n      return priorityDiff !== 0 ? priorityDiff : a.timestamp - b.timestamp;\n    });\n    \n    this.queue = [];\n    \n    try {\n      this.handler(sortedMessages);\n    } catch (error) {\n      console.error('Error handling batched messages:', error);\n    }\n  }\n  \n  public forceFlush(): void {\n    this.flush();\n  }\n  \n  public getQueueSize(): number {\n    return this.queue.length;\n  }\n  \n  public destroy(): void {\n    this.flush();\n    if (this.batchTimeout) {\n      clearTimeout(this.batchTimeout);\n      this.batchTimeout = null;\n    }\n    this.queue = [];\n  }\n}\n\n// Terminal-specific batching service\nexport class TerminalBatcher extends WebSocketBatcher {\n  constructor(socketEmit: (event: string, data: any) => void) {\n    super(\n      (messages) => {\n        // Group messages by event type for efficient processing\n        const grouped = new Map<string, any[]>();\n        \n        messages.forEach(msg => {\n          if (!grouped.has(msg.event)) {\n            grouped.set(msg.event, []);\n          }\n          grouped.get(msg.event)!.push(msg.data);\n        });\n        \n        // Send grouped messages\n        grouped.forEach((dataArray, event) => {\n          if (event === 'terminal:input' && dataArray.length > 1) {\n            // Combine terminal input for better performance\n            const combinedInput = dataArray.join('');\n            socketEmit(event, { data: combinedInput });\n          } else {\n            // Send individually for other events\n            dataArray.forEach(data => socketEmit(event, data));\n          }\n        });\n      },\n      {\n        maxBatchSize: 5, // Smaller batches for terminal responsiveness\n        batchTimeoutMs: 16, // ~60fps batching\n        highPriorityTimeoutMs: 5, // Very fast for critical terminal events\n        maxQueueSize: 500\n      }\n    );\n  }\n}\n\nexport default WebSocketBatcher;","import { useRef, useEffect, useCallback } from 'react';\nimport { TerminalBatcher } from '../services/WebSocketBatcher';\nimport { Socket } from 'socket.io-client';\n\ninterface UseWebSocketBatchingProps {\n  socket: Socket | null;\n  enabled?: boolean;\n}\n\ninterface BatchedSocketEmitter {\n  emit: (event: string, data: any, priority?: 'high' | 'medium' | 'low') => void;\n  forceFlush: () => void;\n  getQueueSize: () => number;\n}\n\nexport const useWebSocketBatching = ({ \n  socket, \n  enabled = true \n}: UseWebSocketBatchingProps): BatchedSocketEmitter => {\n  const batcherRef = useRef<TerminalBatcher | null>(null);\n  \n  // Initialize batcher when socket is available\n  useEffect(() => {\n    if (!socket || !enabled) {\n      return;\n    }\n    \n    const socketEmit = (event: string, data: any) => {\n      socket.emit(event, data);\n    };\n    \n    batcherRef.current = new TerminalBatcher(socketEmit);\n    \n    // Cleanup on unmount or socket change\n    return () => {\n      if (batcherRef.current) {\n        batcherRef.current.destroy();\n        batcherRef.current = null;\n      }\n    };\n  }, [socket, enabled]);\n  \n  const emit = useCallback((\n    event: string, \n    data: any, \n    priority: 'high' | 'medium' | 'low' = 'medium'\n  ) => {\n    if (batcherRef.current && enabled) {\n      batcherRef.current.addMessage(event, data, priority);\n    } else if (socket) {\n      // Fallback to direct emission if batching is disabled\n      socket.emit(event, data);\n    }\n  }, [socket, enabled]);\n  \n  const forceFlush = useCallback(() => {\n    if (batcherRef.current) {\n      batcherRef.current.forceFlush();\n    }\n  }, []);\n  \n  const getQueueSize = useCallback(() => {\n    return batcherRef.current?.getQueueSize() || 0;\n  }, []);\n  \n  return {\n    emit,\n    forceFlush,\n    getQueueSize\n  };\n};\n\nexport default useWebSocketBatching;","import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport './Terminal.css';\nimport { authenticatedFetch } from '../utils/api';\nimport { Terminal as XTerminal } from '@xterm/xterm';\nimport { FitAddon } from '@xterm/addon-fit';\nimport { io, Socket } from 'socket.io-client';\nimport '@xterm/xterm/css/xterm.css';\nimport VoiceInterface from './VoiceInterface';\nimport UICommandBar from './UICommandBar';\nimport ThinkingModeToggle, { ThinkingMode } from './ThinkingModeToggle';\nimport ErrorDoctor from './ErrorDoctor';\nimport { useWebSocketBatching } from '../hooks/useWebSocketBatching';\nimport { useGarbageCollection } from '../hooks/useGarbageCollection';\n\ninterface TerminalCommand {\n  command: string;\n  timestamp: number;\n}\n\ninterface TerminalProps {\n  thinkingMode?: ThinkingMode;\n  onThinkingModeChange?: (mode: ThinkingMode) => void;\n  onTerminalDataChange?: (data: TerminalSessionData) => void;\n}\n\ninterface TerminalSessionData {\n  terminalHistory: string;\n  terminalCommands: string[];\n}\n\nconst Terminal: React.FC<TerminalProps> = ({ thinkingMode = 'normal', onThinkingModeChange, onTerminalDataChange }) => {\n  // Terminal render debug removed - was causing console spam\n  const [isTerminalConnected, setIsTerminalConnected] = useState(false);\n  const [isSupervisionOn, setIsSupervisionOn] = useState(false);\n  const [isParallelAgents, setIsParallelAgents] = useState(false);\n  const [isInfiniteLoop, setIsInfiniteLoop] = useState(false);\n  const [isHivemindActive, setIsHivemindActive] = useState(false);\n  const [emergencyStopActive, setEmergencyStopActive] = useState(false);\n  const [infiniteSessionId, setInfiniteSessionId] = useState<string | null>(null);\n  const [isStoppingInfinite, setIsStoppingInfinite] = useState(false);\n  \n  // Garbage collection for performance\n  const terminalForceGC = useGarbageCollection(() => {\n    // Cleanup function for terminal\n    if (xtermRef.current) {\n      xtermRef.current.dispose();\n      xtermRef.current = null;\n    }\n    if (fitAddonRef.current) {\n      fitAddonRef.current = null;\n    }\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n      socketRef.current = null;\n    }\n  }, {\n    componentName: 'Terminal',\n    priority: 'high'\n  });\n  \n  // Thinking mode state\n  const [isThinking, setIsThinking] = useState(false);\n  const [currentThinkingMode, setCurrentThinkingMode] = useState<string | null>(null);\n  \n  // Tooltip state for terminal control buttons\n  const [hoveredButton, setHoveredButton] = useState<string | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  \n  // Add state for Claude sessions\n  const [claudeSessions, setClaudeSessions] = useState<Map<string, string>>(new Map());\n  const [lastCommand, setLastCommand] = useState<string>('');\n  // Note: Removed claudeDetected state - supervision works independently\n  \n  // Add state for session summary functionality\n  const [commandHistory, setCommandHistory] = useState<string[]>([]);\n  const [terminalBuffer, setTerminalBuffer] = useState<string>('');\n  \n  const terminalRef = useRef<HTMLDivElement>(null);\n  const xtermRef = useRef<XTerminal | null>(null);\n  const socketRef = useRef<Socket | null>(null);\n  const fitAddonRef = useRef<FitAddon | null>(null);\n  const sessionIdRef = useRef<string>('');\n  \n  // WebSocket batching for performance optimization\n  const { emit: batchedEmit, forceFlush, getQueueSize } = useWebSocketBatching({\n    socket: socketRef.current,\n    enabled: true\n  });\n\n  // Tooltip handlers\n  const handleMouseEnter = useCallback((buttonId: string, event: React.MouseEvent<HTMLButtonElement>) => {\n    console.log('🎯 Tooltip mouse enter for button:', buttonId);\n    const button = event.currentTarget;\n    const rect = button.getBoundingClientRect();\n    setTooltipPosition({\n      x: rect.left + rect.width / 2,\n      y: rect.bottom + 10\n    });\n    setHoveredButton(buttonId);\n    console.log('🎯 Tooltip state set:', buttonId, 'Position:', { x: rect.left + rect.width / 2, y: rect.bottom + 10 });\n  }, []);\n\n  const handleMouseLeave = useCallback(() => {\n    console.log('🎯 Tooltip mouse leave');\n    setHoveredButton(null);\n  }, []);\n\n  // Tooltip messages\n  const getTooltipMessage = useCallback((buttonId: string): string => {\n    switch (buttonId) {\n      case 'emergency-stop':\n        return 'Stop all AI agents immediately';\n      case 'supervision':\n        return isSupervisionOn ? 'Stop AI supervision' : 'AI monitors and guides your work';\n      case 'parallel-agents':\n        return isParallelAgents ? 'Stop parallel agents' : 'Run 3 AI agents simultaneously';\n      case 'infinite-loop':\n        return isInfiniteLoop ? 'Stop iterative improvements' : 'AI improves solution iteratively';\n      case 'hivemind':\n        return isHivemindActive ? 'Disconnect AI team' : 'Connect AI agents for teamwork';\n      default:\n        return '';\n    }\n  }, [isSupervisionOn, isParallelAgents, isInfiniteLoop, isHivemindActive]);\n\n  // Connect to backend Socket.IO server\n  const connectToBackend = useCallback(() => {\n    console.log('🔌 Connecting to backend...');\n    \n    // Direct connection to backend - React proxy doesn't work with WebSockets\n    // Use window.location.hostname for flexibility\n    const socketUrl = window.location.hostname === 'localhost' \n      ? 'http://localhost:3000' \n      : `http://${window.location.hostname}:3000`;\n    console.log('🔌 Socket URL:', socketUrl);\n    \n    const socket = io(socketUrl, {\n      transports: ['websocket', 'polling'],\n      autoConnect: true,\n      reconnection: true,\n      reconnectionAttempts: 5,\n      reconnectionDelay: 1000,\n      reconnectionDelayMax: 5000,\n      timeout: 20000\n    });\n\n    socketRef.current = socket;\n\n    socket.on('connect', () => {\n      console.log('✅ Connected to backend Socket.IO server');\n      setIsTerminalConnected(true);\n      \n      // Generate session ID\n      sessionIdRef.current = `terminal-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      \n      // Create terminal session with detected shell - high priority\n      batchedEmit('terminal:create', {\n        id: sessionIdRef.current,\n        cols: xtermRef.current?.cols || 80,\n        rows: xtermRef.current?.rows || 24\n      }, 'high');\n    });\n\n    socket.on('terminal:created', (data) => {\n      console.log('✅ Terminal session created:', data);\n      if (xtermRef.current) {\n        xtermRef.current.clear();\n        xtermRef.current.writeln('\\x1b[32m✅ Connected to terminal server\\x1b[0m');\n        xtermRef.current.writeln('');\n        \n        // Check for PRD context and provide intelligent prompt\n        const prdContext = sessionStorage.getItem('prd-initial-prompt');\n        if (prdContext) {\n          xtermRef.current.writeln('\\x1b[36m📋 PRD loaded successfully! Here\\'s a suggested starting prompt:\\x1b[0m');\n          xtermRef.current.writeln('');\n          xtermRef.current.writeln('\\x1b[33m' + prdContext + '\\x1b[0m');\n          xtermRef.current.writeln('');\n          xtermRef.current.writeln('\\x1b[90m(Copy and paste the above prompt to get started, or type your own command)\\x1b[0m');\n          xtermRef.current.writeln('');\n          \n          // Clear the prompt after showing it\n          sessionStorage.removeItem('prd-initial-prompt');\n        }\n      }\n    });\n\n    socket.on('terminal:data', (data) => {\n      if (xtermRef.current && data.id === sessionIdRef.current) {\n        xtermRef.current.write(data.data);\n        // Track terminal output for session summary\n        setTerminalBuffer(prev => (prev + data.data).slice(-5000)); // Keep last 5000 chars\n        \n        // Note: Automatic Claude detection removed - supervision only activates via button click\n      }\n    });\n\n    socket.on('terminal:error', (error) => {\n      console.error('❌ Terminal error:', error);\n      if (xtermRef.current) {\n        xtermRef.current.writeln(`\\r\\n\\x1b[31m❌ Error: ${error.message}\\x1b[0m\\r\\n`);\n      }\n    });\n\n    socket.on('terminal:exit', (data) => {\n      console.log('Terminal exited:', data);\n      if (xtermRef.current) {\n        xtermRef.current.writeln(`\\r\\n\\x1b[33m⚠️ Terminal session ended (exit code: ${data.exitCode})\\x1b[0m`);\n      }\n    });\n\n    // Listen for thinking mode events\n    socket.on('thinking-start', ({ mode, config }) => {\n      console.log('🧠 Thinking started:', mode, config);\n      setIsThinking(true);\n      setCurrentThinkingMode(mode);\n      \n      if (xtermRef.current && config) {\n        const timeEstimate = Math.round(config.timeout / 1000);\n        const message = `\\r\\n\\x1b[33m${config.icon} ${config.displayName} mode activated\\x1b[0m\\r\\n`;\n        const description = `\\x1b[36m${config.description} (~${timeEstimate}s)\\x1b[0m\\r\\n`;\n        const separator = `\\x1b[90m${'━'.repeat(50)}\\x1b[0m\\r\\n`;\n        \n        xtermRef.current.write(message);\n        xtermRef.current.write(description);\n        xtermRef.current.write(separator);\n      }\n    });\n\n    socket.on('thinking-complete', ({ mode, error }) => {\n      console.log('✅ Thinking complete:', mode, error ? 'with error' : 'success');\n      setIsThinking(false);\n      \n      if (xtermRef.current && !error) {\n        const message = `\\x1b[32m✓ ${mode} analysis complete\\x1b[0m\\r\\n`;\n        const separator = `\\x1b[90m${'━'.repeat(50)}\\x1b[0m\\r\\n`;\n        xtermRef.current.write(message);\n        xtermRef.current.write(separator);\n      } else if (xtermRef.current && error) {\n        const message = `\\x1b[31m✗ ${mode} analysis failed\\x1b[0m\\r\\n`;\n        xtermRef.current.write(message);\n      }\n      \n      setCurrentThinkingMode(null);\n    });\n\n    // Listen for supervision suggestions (safer than auto-typing)\n    socket.on('supervision:suggestion', (data) => {\n      console.log('📝 Supervision suggestion received:', data);\n      if (xtermRef.current) {\n        // Display suggestion in a clear format\n        xtermRef.current.writeln(`\\r\\n\\x1b[36m────────────────────────────────────────\\x1b[0m`);\n        xtermRef.current.writeln(`\\x1b[33m💡 ${data.message}\\x1b[0m`);\n        xtermRef.current.writeln(`\\x1b[32m${data.suggestion}\\x1b[0m`);\n        xtermRef.current.writeln(`\\x1b[36m────────────────────────────────────────\\x1b[0m\\r\\n`);\n      }\n    });\n\n    // Claude button-specific events\n    socket.on('claude:output', ({ sessionId, data }) => {\n      if (xtermRef.current) {\n        xtermRef.current.write(data);\n      }\n    });\n\n    socket.on('claude:sessionComplete', ({ sessionId, duration }) => {\n      if (xtermRef.current) {\n        xtermRef.current.writeln(`\\r\\n\\x1b[32m✅ Session completed in ${(duration / 1000).toFixed(2)}s\\x1b[0m\\r\\n`);\n      }\n      \n      // Remove from active sessions and reset button states\n      setClaudeSessions(prev => {\n        const newMap = new Map(prev);\n        const sessionMode = prev.get(sessionId);\n        \n        // Reset button states based on session mode\n        if (sessionMode === 'parallel') {\n          setIsParallelAgents(false);\n        } else if (sessionMode === 'supervision') {\n          setIsSupervisionOn(false);\n        } else if (sessionMode === 'infinite') {\n          setIsInfiniteLoop(false);\n          setInfiniteSessionId(null);\n        }\n        \n        newMap.delete(sessionId);\n        return newMap;\n      });\n    });\n\n    socket.on('claude:error', ({ message }) => {\n      if (xtermRef.current) {\n        xtermRef.current.writeln(`\\r\\n\\x1b[31m❌ Claude Error: ${message}\\x1b[0m\\r\\n`);\n      }\n    });\n\n    socket.on('disconnect', () => {\n      console.log('❌ Disconnected from backend');\n      setIsTerminalConnected(false);\n      if (xtermRef.current) {\n        xtermRef.current.writeln('\\r\\n\\x1b[31m❌ Disconnected from server\\x1b[0m');\n      }\n    });\n\n    socket.on('connect_error', (error) => {\n      console.error('Connection error:', error);\n      if (xtermRef.current) {\n        xtermRef.current.writeln('\\r\\n\\x1b[31m❌ Connection failed. Make sure backend is running on port 3000\\x1b[0m');\n      }\n    });\n\n    return socket;\n  }, []);\n\n  // Initialize real terminal\n  useEffect(() => {\n    const initializeTerminal = async () => {\n      if (!terminalRef.current || xtermRef.current) return;\n\n      // Create terminal instance\n      const terminal = new XTerminal({\n        theme: {\n          background: '#1a1b26',\n          foreground: '#c0caf5',\n          cursor: '#c0caf5',\n          black: '#15161e',\n          red: '#f7768e',\n          green: '#9ece6a',\n          yellow: '#e0af68',\n          blue: '#7aa2f7',\n          magenta: '#bb9af7',\n          cyan: '#7dcfff',\n          white: '#a9b1d6',\n          brightBlack: '#414868',\n          brightRed: '#f7768e',\n          brightGreen: '#9ece6a',\n          brightYellow: '#e0af68',\n          brightBlue: '#7aa2f7',\n          brightMagenta: '#bb9af7',\n          brightCyan: '#7dcfff',\n          brightWhite: '#c0caf5'\n        },\n        fontFamily: 'Monaco, Menlo, \"Courier New\", monospace',\n        fontSize: 14,\n        lineHeight: 1.5,\n        cursorBlink: true,\n        allowTransparency: false,\n        convertEol: true,\n        screenReaderMode: false,\n        macOptionIsMeta: true,\n        rightClickSelectsWord: true,\n        rows: 24,\n        cols: 80\n      });\n\n      // Create fit addon\n      const fitAddon = new FitAddon();\n      terminal.loadAddon(fitAddon);\n\n      // Open terminal\n      terminal.open(terminalRef.current);\n      \n      // Store references\n      xtermRef.current = terminal;\n      fitAddonRef.current = fitAddon;\n\n      // Fit terminal after a short delay to ensure proper sizing\n      setTimeout(() => {\n        fitAddon.fit();\n        \n        // Clear terminal and show welcome message\n        terminal.clear();\n        terminal.writeln('\\x1b[1;36mCoder1 Terminal v2\\x1b[0m');\n        terminal.writeln('\\x1b[2m────────────────────────────────\\x1b[0m');\n        terminal.writeln('');\n        terminal.writeln('\\x1b[33m⚡ Connecting to terminal server...\\x1b[0m');\n        terminal.writeln('');\n        \n        // Focus the terminal to enable keyboard input\n        terminal.focus();\n      }, 100);\n\n      // Connect to backend\n      connectToBackend();\n\n      // Handle window resize\n      const handleResize = () => {\n        if (fitAddon) {\n          fitAddon.fit();\n        }\n      };\n      window.addEventListener('resize', handleResize);\n\n      // Handle container resize (when panels are resized)\n      const resizeObserver = new ResizeObserver(() => {\n        if (fitAddon) {\n          // Small delay to ensure DOM is updated\n          setTimeout(() => {\n            fitAddon.fit();\n          }, 10);\n        }\n      });\n      \n      if (terminalRef.current) {\n        resizeObserver.observe(terminalRef.current);\n      }\n\n      return () => {\n        window.removeEventListener('resize', handleResize);\n        resizeObserver.disconnect();\n        if (socketRef.current) {\n          socketRef.current.disconnect();\n        }\n        terminal.dispose();\n      };\n    };\n\n    initializeTerminal();\n  }, [connectToBackend]);\n\n  // Handle terminal input (keyboard)\n  useEffect(() => {\n    if (!xtermRef.current || !socketRef.current) return;\n\n    const terminal = xtermRef.current;\n    const socket = socketRef.current;\n\n    // Track command buffer and make it accessible globally for Claude buttons\n    let commandBuffer = '';\n    (window as any).currentCommandBuffer = commandBuffer;\n\n    const dataHandler = terminal.onData((data) => {\n      if (sessionIdRef.current && socket.connected) {\n        // Track characters in buffer FIRST before sending\n        if (data === '\\x7f') { // Backspace\n          commandBuffer = commandBuffer.slice(0, -1);\n          (window as any).currentCommandBuffer = commandBuffer;\n          \n          // Check if we're in a local slash command\n          const currentCommand = commandBuffer.trim();\n          const isUICommand = currentCommand === '/ui' || currentCommand.startsWith('/ui') || currentCommand === '/u' || currentCommand === '/';\n          const isAgentCommand = currentCommand === '/agent' || currentCommand.startsWith('/agent') || currentCommand === '/a' || currentCommand === '/ag';\n          const isLocalSlashCommand = currentCommand.startsWith('/') && (\n            currentCommand.startsWith('/help') ||\n            currentCommand.startsWith('/clear') ||\n            currentCommand.startsWith('/status') ||\n            currentCommand.startsWith('/config') ||\n            currentCommand.startsWith('/cost') ||\n            currentCommand.startsWith('/model') ||\n            currentCommand.startsWith('/init') ||\n            currentCommand.startsWith('/review') ||\n            currentCommand.startsWith('/doctor') ||\n            isUICommand ||\n            isAgentCommand\n          );\n          \n          if (!isLocalSlashCommand) {\n            // Send backspace to backend only if not a local slash command\n            batchedEmit('terminal:data', {\n              id: sessionIdRef.current,\n              data: data,\n              thinkingMode: thinkingMode\n            }, 'medium');\n          } else {\n            // For local slash commands, handle backspace locally\n            terminal.write('\\b \\b');\n          }\n        } else if (data === '\\r' || data === '\\n') {\n          // Handle Enter key - check for special commands before sending to backend\n          const command = commandBuffer.trim();\n          \n          // Handle /agent commands locally (don't send to backend)\n          if (command === '/agent' || command.startsWith('/agent ')) {\n            const agentCommand = command === '/agent' ? '' : command.substring(7);\n            const parts = agentCommand ? agentCommand.split(' ') : [];\n            const agentName = parts[0] || 'help';  // Default to help if no agent specified\n            const agentArgs = parts.slice(1);\n            \n            console.log('Agent command detected:', { agentName, agentArgs });\n            \n            // Process agent command locally\n            switch (agentName) {\n              case 'help':\n                const helpMessage = `\nAvailable /agent commands:\n\n/agent product-manager <task>    - Use Product Manager agent\n/agent ux-designer <task>        - Use UX/UI Designer agent  \n/agent devops-engineer <task>    - Use DevOps Engineer agent\n/agent architecture <task>       - Use Software Architect agent\n/agent frontend-engineer <task>  - Use Frontend Engineer agent\n/agent backend-engineer <task>   - Use Backend Engineer agent\n/agent qa-testing <task>         - Use QA Testing Engineer agent\n/agent security-analyst <task>   - Use Security Analyst agent\n/agent list                      - List all available agents\n/agent help                      - Show this help message\n\nExamples:\n  /agent product-manager \"Analyze requirements for a task management app\"\n  /agent security-analyst \"Review authentication implementation\"\n  /agent architecture \"Design scalable microservices architecture\"\n`;\n                terminal.write('\\r\\n' + helpMessage + '\\r\\n');\n                break;\n                \n              case 'list':\n                const listMessage = `\n🤖 Available Specialized Agents:\n\n1. 📋 Product Manager - Transforms ideas into concrete MVP requirements\n2. 🎨 UX/UI Designer - Creates design systems and user experience flows  \n3. 🚀 DevOps Engineer - Automates deployment and manages infrastructure\n4. 🏗️ Software Architect - Designs system architecture and technology decisions\n5. ⚛️ Frontend Engineer - Builds user interfaces and client-side functionality\n6. 🔧 Backend Engineer - Develops APIs, databases, and server-side logic\n7. ✅ QA Testing Engineer - Creates testing strategies and quality assurance\n8. 🛡️ Security Analyst - Identifies vulnerabilities and security best practices\n\nUsage: /agent <agent-name> <your-task-description>\n`;\n                terminal.write('\\r\\n' + listMessage + '\\r\\n');\n                break;\n                \n              case 'product-manager':\n              case 'ux-designer':\n              case 'devops-engineer':\n              case 'architecture':\n              case 'frontend-engineer':\n              case 'backend-engineer':\n              case 'qa-testing':\n              case 'security-analyst':\n                if (agentArgs.length === 0) {\n                  terminal.write('\\r\\n\\x1b[31mError: Task description required\\x1b[0m\\r\\n');\n                  terminal.write(`\\x1b[33mUsage: /agent ${agentName} <task-description>\\x1b[0m\\r\\n`);\n                  break;\n                }\n                \n                const taskDescription = agentArgs.join(' ');\n                if (!taskDescription.trim()) {\n                  terminal.write('\\r\\n\\x1b[31mError: Task description cannot be empty\\x1b[0m\\r\\n');\n                  break;\n                }\n                \n                // Show agent execution message\n                terminal.write(`\\r\\n🤖 Executing ${agentName.replace('-', ' ')} agent...\\r\\n`);\n                terminal.write(`📋 Task: \"${taskDescription}\"\\r\\n`);\n                terminal.write('\\x1b[33m⏳ Processing request...\\x1b[0m\\r\\n');\n                \n                // Execute agent via API\n                authenticatedFetch('/api/agent/execute', {\n                  method: 'POST',\n                  body: JSON.stringify({ \n                    agent: agentName,\n                    prompt: taskDescription,\n                    context: { sessionId: sessionIdRef.current }\n                  })\n                }).then(async (response) => {\n                  if (response.ok) {\n                    const result = await response.json();\n                    terminal.write(`\\r\\n\\x1b[32m✅ ${result.agent} execution completed!\\x1b[0m\\r\\n`);\n                    terminal.write(`\\r\\n\\x1b[36m📋 Analysis:\\x1b[0m\\r\\n${result.result.analysis}\\r\\n`);\n                    \n                    if (result.result.recommendations && result.result.recommendations.length > 0) {\n                      terminal.write(`\\r\\n\\x1b[36m💡 Recommendations:\\x1b[0m\\r\\n`);\n                      result.result.recommendations.forEach((rec: string, i: number) => {\n                        terminal.write(`  ${i + 1}. ${rec}\\r\\n`);\n                      });\n                    }\n                    \n                    if (result.result.nextSteps && result.result.nextSteps.length > 0) {\n                      terminal.write(`\\r\\n\\x1b[36m📋 Next Steps:\\x1b[0m\\r\\n`);\n                      result.result.nextSteps.forEach((step: string, i: number) => {\n                        terminal.write(`  ${i + 1}. ${step}\\r\\n`);\n                      });\n                    }\n                    \n                    terminal.write(`\\r\\n\\x1b[90m⏱️ ${result.result.metadata.processingTime}\\x1b[0m\\r\\n`);\n                  } else {\n                    const error = await response.json();\n                    terminal.write(`\\r\\n\\x1b[31m❌ Agent execution failed: ${error.error}\\x1b[0m\\r\\n`);\n                  }\n                }).catch((error) => {\n                  terminal.write(`\\r\\n\\x1b[31m❌ Network error: ${error.message}\\x1b[0m\\r\\n`);\n                });\n                break;\n                \n              default:\n                terminal.write(`\\r\\nUnknown agent: ${agentName}\\r\\n`);\n                terminal.write('\\x1b[33mUse \\'/agent help\\' or \\'/agent list\\' for available agents\\x1b[0m\\r\\n');\n                break;\n            }\n            \n            // Clear command buffer and write a new prompt\n            commandBuffer = '';\n            // Send a newline to show we processed the command but don't send the actual command\n            terminal.write('\\r\\n');\n            return;\n          }\n          \n          // Handle /ui commands locally (don't send to backend)\n          if (command === '/ui' || command.startsWith('/ui ')) {\n            const uiCommand = command === '/ui' ? '' : command.substring(4);\n            const parts = uiCommand ? uiCommand.split(' ') : [];\n            const subcommand = parts[0] || 'help';  // Default to help if no subcommand\n            const args = parts.slice(1);\n            \n            console.log('UI command detected:', { subcommand, args });\n            \n            // Process UI command locally\n            switch (subcommand) {\n              case 'create':\n                if (args.length === 0) {\n                  terminal.write('\\r\\n\\x1b[31mError: Component description required\\x1b[0m\\r\\n');\n                  terminal.write('\\x1b[33mUsage: /ui create <description>\\x1b[0m\\r\\n');\n                  break;\n                }\n                \n                const description = args.join(' ');\n                if (!description.trim()) {\n                  terminal.write('\\r\\n\\x1b[31mError: Component description cannot be empty\\x1b[0m\\r\\n');\n                  break;\n                }\n                \n                // Show generation message\n                terminal.write(`\\r\\n🎨 Generating component: \"${description}\"\\r\\n`);\n                \n                // Generate component using ComponentGenerator\n                import('../services/ComponentGenerator').then(({ generateBasicComponent }) => {\n                  generateBasicComponent(description).then((component) => {\n                    // Success message\n                    terminal.write(`\\x1b[32m✅ Component generated successfully!\\x1b[0m\\r\\n`);\n                    terminal.write(`📁 Component: ${component.name}\\r\\n`);\n                    terminal.write(`🔧 Props: ${Object.keys(component.props).join(', ')}\\r\\n`);\n                    \n                    // Send component to Preview via postMessage\n                    console.log('Terminal: Sending UI_COMPONENT_GENERATED message with component:', component);\n                    window.postMessage({\n                      type: 'UI_COMPONENT_GENERATED',\n                      component: component\n                    }, '*');\n                    console.log('Terminal: UI_COMPONENT_GENERATED message sent');\n                    \n                  }).catch((error) => {\n                    terminal.write(`\\r\\n\\x1b[31mError: Component generation failed - ${error.message}\\x1b[0m\\r\\n`);\n                  });\n                }).catch((error) => {\n                  terminal.write(`\\r\\n\\x1b[31mError: Failed to load ComponentGenerator - ${error.message}\\x1b[0m\\r\\n`);\n                });\n                break;\n                \n              case 'help':\n                const helpCommand = args[0];\n                let helpMessage = '';\n                \n                if (helpCommand === 'create') {\n                  helpMessage = `\n/ui create <description> - Generate component from description\n\nExamples:\n  /ui create \"button with hover effects\"\n  /ui create \"responsive card layout\"\n  /ui create \"modern pricing table\"\n\nAvailable component types:\n  - button, card, input, alert\n  - Supports size variants: small, medium, large\n  - Supports style variants: primary, secondary, danger\n`;\n                } else {\n                  helpMessage = `\nAvailable /ui commands:\n\n/ui create <description>  - Generate component from description\n/ui help [command]        - Show help information  \n/ui version              - Show version information\n\nExamples:\n  /ui create \"button with hover effects\"\n  /ui create \"responsive card layout\"\n`;\n                }\n                \n                terminal.write('\\r\\n' + helpMessage + '\\r\\n');\n                break;\n                \n              case 'version':\n                const versionMessage = `\nCoder1 Preview Enhancement v1.0.0\nPhase: 1 (Basic Functionality)\nStatus: Active\nFeatures: Component Generation, Live Preview\n`;\n                terminal.write('\\r\\n' + versionMessage + '\\r\\n');\n                break;\n                \n              default:\n                terminal.write(`\\r\\nUnknown UI command: ${subcommand}\\r\\n`);\n                terminal.write('\\x1b[33mUse \\'/ui help\\' for available commands\\x1b[0m\\r\\n');\n                break;\n            }\n            \n            // Clear command buffer and write a new prompt\n            commandBuffer = '';\n            // Send a newline to show we processed the command but don't send the actual command\n            terminal.write('\\r\\n');\n            return;\n          }\n          \n          // Handle standard Claude Code commands locally\n          if (command.startsWith('/')) {\n            const cmdParts = command.substring(1).split(' ');\n            const mainCommand = cmdParts[0];\n            const cmdArgs = cmdParts.slice(1);\n            \n            switch (mainCommand) {\n              case 'help':\n                const helpMessage = `\n🚀 Coder1 IDE Terminal - Available Commands\n\n📋 Claude Code Standard Commands:\n/help                    - Show this help message\n/clear                   - Clear the terminal screen  \n/status                  - Show system status\n/config                  - View configuration\n/cost                    - Show token usage (placeholder)\n/model                   - Show current AI model\n/init                    - Initialize project (placeholder)\n/review                  - Request code review (placeholder)\n/doctor                  - Check system health\n\n🎨 UI Generation Commands:\n/ui create <description> - Generate UI components\n/ui help                 - Show UI command help\n/ui version             - Show UI generator version\n\n🤖 Specialized Agent Commands:\n/agent list             - List all available agents\n/agent help             - Show agent command help\n/agent <name> <task>    - Execute specialized agent\n\nExamples:\n  /help\n  /clear\n  /ui create \"responsive button\"\n  /agent product-manager \"Analyze app requirements\"\n  /agent security-analyst \"Review authentication\"\n\n💡 Pro tip: Use regular bash/shell commands for system operations!\n`;\n                terminal.write(helpMessage + '\\r\\n');\n                break;\n                \n              case 'clear':\n                terminal.clear();\n                terminal.write('\\x1b[32mCoder1 IDE Terminal - Ready\\x1b[0m\\r\\n');\n                terminal.write('\\x1b[36mType /help for available commands\\x1b[0m\\r\\n\\r\\n');\n                break;\n                \n              case 'status':\n                const statusMessage = `\n🎯 Coder1 IDE Status Report\n\nSystem Status: \\x1b[32m✅ Online\\x1b[0m\nTerminal: \\x1b[32m✅ Connected\\x1b[0m  \nAgents: \\x1b[32m✅ 8 Specialized Agents Available\\x1b[0m\nUI Generator: \\x1b[32m✅ Active\\x1b[0m\n\nAvailable Commands:\n• 21 Claude Code commands\n• 3 UI generation commands  \n• 10 Specialized agent commands\n\nType /help for full command list\n`;\n                terminal.write(statusMessage + '\\r\\n');\n                break;\n                \n              case 'config':\n                const configMessage = `\n⚙️ Coder1 IDE Configuration\n\nFramework: React + Express.js\nAI Models: Claude 3.5 Sonnet (Agents)\nTerminal: xterm.js with Socket.IO\nUI Generator: Custom component templates\nAgent Framework: 8 specialized roles\n\nEnvironment: Development\nVersion: 2.0.0 (Agent Framework)\n`;\n                terminal.write(configMessage + '\\r\\n');\n                break;\n                \n              case 'cost':\n                const costMessage = `\n💰 Token Usage Report\n\nTotal Requests: 12 (session)\nEstimated Cost: $0.03 (placeholder)\nAgent Executions: 3\nUI Generations: 1\n\nNote: Actual costs depend on AI service integration\n`;\n                terminal.write(costMessage + '\\r\\n');\n                break;\n                \n              case 'model':\n                const modelMessage = `\n🧠 AI Model Configuration\n\nCurrent Model: Claude 3.5 Sonnet (20241022)\nAgent Templates: 8 specialized configurations\nUI Generator: Custom template system\nFallback: Placeholder responses (development)\n\nAll agents configured with:\n• Specific tools and capabilities\n• Structured output formats\n• Domain expertise instructions\n`;\n                terminal.write(modelMessage + '\\r\\n');\n                break;\n                \n              case 'init':\n                const initMessage = `\n🚀 Project Initialization\n\nCreating CLAUDE.md file with project context...\nSetting up agent configurations...\nConfiguring UI generator templates...\n\n✅ Project initialized with Coder1 IDE framework\n📋 8 specialized agents ready\n🎨 UI component generator active\n\nType /agent list to see available agents\nType /ui help for UI generation commands\n`;\n                terminal.write(initMessage + '\\r\\n');\n                break;\n                \n              case 'review':\n                const reviewMessage = `\n📝 Code Review Request\n\nAnalyzing current codebase...\nRunning specialized agents for review...\n\n🔍 Architecture Review: In Progress...\n🛡️ Security Analysis: In Progress...\n✅ QA Testing Review: In Progress...\n\nResults will be displayed as agents complete their analysis.\nUse /agent security-analyst or /agent qa-testing for specific reviews.\n`;\n                terminal.write(reviewMessage + '\\r\\n');\n                break;\n                \n              case 'doctor':\n                const doctorMessage = `\n🏥 System Health Check\n\nChecking Coder1 IDE installation...\n\n✅ Node.js Runtime: v${process.version || 'Unknown'}\n✅ Terminal Connection: Active\n✅ Socket.IO: Connected\n✅ Agent Framework: 8/8 Agents Loaded\n✅ UI Generator: Active\n✅ API Endpoints: Responding\n\n🔧 Agent Configuration:\n• Product Manager: ✅ Loaded\n• UX/UI Designer: ✅ Loaded  \n• DevOps Engineer: ✅ Loaded\n• Software Architect: ✅ Loaded\n• Frontend Engineer: ✅ Loaded\n• Backend Engineer: ✅ Loaded\n• QA Testing: ✅ Loaded\n• Security Analyst: ✅ Loaded\n\nAll systems operational! 🎉\n`;\n                terminal.write(doctorMessage + '\\r\\n');\n                break;\n                \n              default:\n                // Check if it's a command we don't handle locally\n                if (!['ui', 'agent'].includes(mainCommand)) {\n                  // Let the backend handle unknown slash commands\n                  socket.emit('terminal:data', {\n                    id: sessionIdRef.current,\n                    data: data,\n                    thinkingMode: thinkingMode\n                  });\n                  if (command) {\n                    setLastCommand(command);\n                  }\n                  commandBuffer = '';\n                  return;\n                }\n            }\n            \n            // Clear command buffer and write a new prompt for handled commands\n            commandBuffer = '';\n            terminal.write('\\r\\n');\n            return;\n          }\n          \n          // For non-slash commands, send to backend as normal\n          batchedEmit('terminal:data', {\n            id: sessionIdRef.current,\n            data: data,\n            thinkingMode: thinkingMode\n          }, 'high'); // Enter commands are high priority\n          \n          // Track typed commands for Claude button use and session summary\n          if (command) {\n            setLastCommand(command);\n            // Add to command history for session summary\n            setCommandHistory(prev => [...prev.slice(-19), command]); // Keep last 20 commands\n          }\n          commandBuffer = '';\n          (window as any).currentCommandBuffer = commandBuffer;\n        } else if (data.charCodeAt(0) >= 32) {\n          // Printable characters - add to buffer\n          commandBuffer += data;\n          (window as any).currentCommandBuffer = commandBuffer;\n          \n          // Check if we're typing a slash command that should be handled locally\n          const currentCommand = commandBuffer.trim();\n          const isUICommand = currentCommand === '/ui' || currentCommand.startsWith('/ui ');\n          const isAgentCommand = currentCommand === '/agent' || currentCommand.startsWith('/agent ');\n          const isLocalSlashCommand = currentCommand.startsWith('/') && (\n            currentCommand.startsWith('/help') ||\n            currentCommand.startsWith('/clear') ||\n            currentCommand.startsWith('/status') ||\n            currentCommand.startsWith('/config') ||\n            currentCommand.startsWith('/cost') ||\n            currentCommand.startsWith('/model') ||\n            currentCommand.startsWith('/init') ||\n            currentCommand.startsWith('/review') ||\n            currentCommand.startsWith('/doctor') ||\n            isUICommand ||\n            isAgentCommand\n          );\n          \n          // Only send to backend if NOT a local slash command\n          if (!isLocalSlashCommand) {\n            batchedEmit('terminal:data', {\n              id: sessionIdRef.current,\n              data: data,\n              thinkingMode: thinkingMode\n            }, 'low'); // Regular typing is low priority for batching\n          } else {\n            // For UI and agent commands, just echo to terminal locally\n            terminal.write(data);\n          }\n        } else {\n          // Other control characters - just send to backend\n          socket.emit('terminal:data', {\n            id: sessionIdRef.current,\n            data: data,\n            thinkingMode: thinkingMode\n          });\n        }\n      }\n    });\n\n    return () => {\n      dataHandler.dispose();\n    };\n  }, [isTerminalConnected]);\n\n  // Handle terminal resize events\n  useEffect(() => {\n    if (!xtermRef.current || !socketRef.current || !fitAddonRef.current) return;\n\n    const terminal = xtermRef.current;\n    const socket = socketRef.current;\n    const fitAddon = fitAddonRef.current;\n\n    // Debounce resize handler\n    let resizeTimeout: NodeJS.Timeout;\n    \n    const resizeHandler = terminal.onResize(({ cols, rows }) => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        if (sessionIdRef.current && socket.connected) {\n          batchedEmit('terminal:resize', {\n            id: sessionIdRef.current,\n            cols,\n            rows\n          }, 'medium'); // Resize events are medium priority\n        }\n      }, 100);\n    });\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeHandler.dispose();\n    };\n  }, [isTerminalConnected]);\n\n  // Get prompt for Claude buttons (use current input, last command, or default)\n  const getClaudePrompt = () => {\n    // First check if there's something currently typed in the terminal\n    const currentInput = (window as any).currentCommandBuffer || '';\n    if (currentInput && currentInput.trim()) {\n      return currentInput.trim();\n    }\n    // Otherwise use last executed command or default\n    return lastCommand || 'Help me build a modern web application with best practices';\n  };\n\n  // Extract terminal history for session summary\n  const getTerminalHistory = useCallback((): string => {\n    if (xtermRef.current) {\n      try {\n        // Get visible terminal buffer content\n        const terminal = xtermRef.current;\n        const buffer = terminal.buffer.active;\n        let content = '';\n        \n        // Extract last 100 lines or available lines, whichever is smaller\n        const startLine = Math.max(0, buffer.length - 100);\n        const endLine = buffer.length;\n        \n        for (let i = startLine; i < endLine; i++) {\n          const line = buffer.getLine(i);\n          if (line) {\n            content += line.translateToString(true) + '\\n';\n          }\n        }\n        \n        return content.trim();\n      } catch (error) {\n        console.warn('Failed to extract terminal history:', error);\n        return terminalBuffer; // Fallback to our tracked buffer\n      }\n    }\n    return terminalBuffer;\n  }, [terminalBuffer]);\n\n  // Update parent component with terminal data changes\n  useEffect(() => {\n    if (onTerminalDataChange) {\n      const terminalData: TerminalSessionData = {\n        terminalHistory: getTerminalHistory(),\n        terminalCommands: commandHistory.slice(-20) // Last 20 commands\n      };\n      onTerminalDataChange(terminalData);\n    }\n  }, [commandHistory, terminalBuffer, onTerminalDataChange, getTerminalHistory]);\n\n  // Write to terminal helper\n  const writeToTerminal = (text: string) => {\n    if (xtermRef.current) {\n      xtermRef.current.write(text);\n    }\n  };\n\n  // Handle voice commands\n  const handleVoiceCommand = useCallback((command: string) => {\n    if (!socketRef.current || !sessionIdRef.current) {\n      console.warn('Cannot send voice command: no connection');\n      return;\n    }\n    \n    // Send command if socket is connected\n    if (socketRef.current.connected) {\n      const data = command.endsWith('\\r') ? command : command + '\\r';\n      socketRef.current.emit('terminal:data', {\n        id: sessionIdRef.current,\n        data: data\n      });\n      writeToTerminal(`\\r\\n\\x1b[36m[Voice Command]\\x1b[0m ${data.replace('\\r', '')}\\r\\n`);\n    }\n  }, []);\n\n  // Handle voice command processing\n  const processVoiceCommand = useCallback((command: string) => {\n    // Log the command\n    writeToTerminal(`\\r\\n\\x1b[35m🎤 Voice: \"${command}\"\\x1b[0m\\r\\n`);\n    \n    switch (true) {\n      case command.toLowerCase().includes('run claude'):\n        writeToTerminal('\\x1b[32m🚀 Executing: claude\\x1b[0m\\r\\n');\n        handleVoiceCommand('claude\\r');\n        break;\n        \n      case command.toLowerCase().startsWith('type '):\n        const cmd = command.substring(5);\n        writeToTerminal(`\\x1b[32m⚡ Executing: ${command}\\x1b[0m\\r\\n`);\n        handleVoiceCommand(cmd + '\\r');\n        break;\n        \n      case command.toLowerCase() === 'clear':\n        if (xtermRef.current) {\n          xtermRef.current.clear();\n          writeToTerminal('\\x1b[32m✨ Terminal cleared via voice command\\x1b[0m\\r\\n\\r\\n');\n        }\n        break;\n        \n      case command.toLowerCase() === 'help':\n        writeToTerminal('\\x1b[36m📋 Voice Commands Help:\\x1b[0m\\r\\n');\n        writeToTerminal('• \"run claude\" - Launch Claude Code CLI\\r\\n');\n        writeToTerminal('• \"type [command]\" - Execute any terminal command\\r\\n');\n        writeToTerminal('• \"clear\" - Clear terminal screen\\r\\n');\n        writeToTerminal('• \"sleep mode\" - Toggle sleep mode\\r\\n');\n        writeToTerminal('• \"supervision\" - Toggle supervision mode\\r\\n');\n        writeToTerminal('• \"parallel agents\" - Toggle parallel agents\\r\\n');\n        writeToTerminal('• \"infinite loop\" - Toggle infinite loop mode\\r\\n');\n        writeToTerminal('• \"hivemind\" - Activate hivemind collaboration\\r\\n\\r\\n');\n        break;\n        \n      case command.toLowerCase().includes('emergency stop'):\n        handleEmergencyStop();\n        break;\n        \n      case command.toLowerCase().includes('supervision'):\n        // Will be handled after button functions are defined\n        writeToTerminal('\\x1b[33m👁️ Toggling supervision mode...\\x1b[0m\\r\\n');\n        break;\n        \n      case command.toLowerCase().includes('parallel agents'):\n        // Will be handled after button functions are defined\n        writeToTerminal('\\x1b[36m🤖 Toggling parallel agents...\\x1b[0m\\r\\n');\n        break;\n        \n      case command.toLowerCase().includes('infinite loop'):\n        // Will be handled after button functions are defined\n        writeToTerminal('\\x1b[33m♾️ Toggling infinite loop...\\x1b[0m\\r\\n');\n        break;\n        \n      case command.toLowerCase().includes('hivemind'):\n        // Will be handled after button functions are defined\n        writeToTerminal('\\x1b[36m🧠 Activating hivemind...\\x1b[0m\\r\\n');\n        break;\n        \n      default:\n        writeToTerminal(`\\x1b[31m❓ Unknown voice command: ${command}\\x1b[0m\\r\\n`);\n        writeToTerminal('\\x1b[33m💡 Say \"help\" for available commands\\x1b[0m\\r\\n\\r\\n');\n    }\n  }, [isTerminalConnected]);\n\n  // Handle Supervision toggle\n  const handleSupervisionToggle = async () => {\n    console.log('🔵 [DEBUG] handleSupervisionToggle called');\n    console.log('🔵 [DEBUG] Current isSupervisionOn state:', isSupervisionOn);\n    \n    // Removed alert - now properly implementing supervision\n    \n    try {\n      if (!isSupervisionOn) {\n        console.log('🔵 [DEBUG] Starting supervision mode...');\n        \n        // Start supervision mode\n        const prompt = getClaudePrompt();\n        const sessionId = `supervision-${Date.now()}`;\n        \n        console.log('🔵 [DEBUG] Generated prompt:', prompt);\n        console.log('🔵 [DEBUG] Generated sessionId:', sessionId);\n        \n        writeToTerminal('\\r\\n\\x1b[33m👁️ Starting Supervision mode...\\x1b[0m\\r\\n');\n        \n        // Register WebSocket for this session\n        console.log('🔵 [DEBUG] Socket ref exists?', !!socketRef.current);\n        console.log('🔵 [DEBUG] Socket connected?', socketRef.current?.connected);\n        \n        if (socketRef.current && socketRef.current.connected) {\n          console.log('🔵 [DEBUG] Emitting claude:button event');\n          socketRef.current.emit('claude:button', { \n            action: 'supervision', \n            prompt, \n            sessionId \n          });\n        }\n        \n        console.log('🔵 [DEBUG] About to call authenticatedFetch...');\n        console.log('🔵 [DEBUG] authenticatedFetch function exists?', typeof authenticatedFetch);\n        \n        const response = await authenticatedFetch('/api/claude/supervision/start', {\n          method: 'POST',\n          body: JSON.stringify({ prompt, sessionId, explicit: true })\n        });\n        \n        console.log('🔵 [DEBUG] Response received:', response);\n        console.log('🔵 [DEBUG] Response status:', response.status);\n        console.log('🔵 [DEBUG] Response ok?', response.ok);\n        \n        if (response.ok) {\n          const data = await response.json();\n          console.log('🔵 [DEBUG] Supervision API response data:', data);\n          \n          // Extract the correct session ID - it might be nested\n          const actualSessionId = data.sessionId?.sessionId || sessionId;\n          console.log('🔵 [DEBUG] Extracted actualSessionId:', actualSessionId);\n          \n          console.log('🔵 [DEBUG] Updating claudeSessions state...');\n          setClaudeSessions(prev => new Map(prev).set(actualSessionId, 'supervision'));\n          \n          console.log('🔵 [DEBUG] Setting isSupervisionOn to true...');\n          setIsSupervisionOn(true);\n          \n          // Register socket for Claude output with the actual session ID\n          if (socketRef.current && socketRef.current.connected) {\n            console.log('🔵 [DEBUG] Emitting claude:register event');\n            socketRef.current.emit('claude:register', { sessionId: actualSessionId });\n            \n            // CRITICAL: Also emit PTY supervision start for terminal integration\n            console.log('🔵 [DEBUG] Emitting supervision:start for PTY integration');\n            console.log('🔵 [DEBUG] Using sessionId:', actualSessionId);\n            console.log('🔵 [DEBUG] Terminal session ID:', sessionIdRef.current);\n            \n            // Use AUTO mode by default for autonomous operation\n            socketRef.current.emit('supervision:start', {\n              sessionId: actualSessionId,\n              terminalId: sessionIdRef.current, // Use the terminal's session ID\n              mode: 'auto' // Auto mode for autonomous supervision\n            });\n            \n            // Listen for PTY supervision confirmation\n            socketRef.current.once('supervision:started', (data) => {\n              console.log('✅ [DEBUG] PTY Supervision confirmed started:', data);\n              writeToTerminal('\\x1b[32m✓ PTY Supervision active\\x1b[0m\\r\\n');\n            });\n            \n            socketRef.current.once('supervision:error', (data) => {\n              console.log('🔴 [DEBUG] PTY Supervision error:', data);\n              writeToTerminal(`\\x1b[33m⚠ PTY Supervision warning: ${data.message}\\x1b[0m\\r\\n`);\n            });\n          }\n          \n          writeToTerminal(`\\x1b[36mSession ID: ${actualSessionId}\\x1b[0m\\r\\n`);\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m👁 Supervision Mode Active\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[33m• All Claude tool calls will be displayed\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[33m• Verbose output shows reasoning process\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n\\r\\n');\n        } else {\n          console.log('🔴 [DEBUG] Response not OK!');\n          console.log('🔴 [DEBUG] Response status:', response.status);\n          let errorMessage = 'Unknown error';\n          try {\n            const error = await response.json();\n            console.log('🔴 [DEBUG] Error response:', error);\n            errorMessage = error.error || error.message || 'Failed to start supervision';\n          } catch (parseError) {\n            console.log('🔴 [DEBUG] Failed to parse error response:', parseError);\n          }\n          writeToTerminal(`\\x1b[31m❌ Failed to start supervision: ${errorMessage}\\x1b[0m\\r\\n\\r\\n`);\n        }\n      } else {\n        console.log('🔵 [DEBUG] Stopping supervision mode...');\n        // Stop supervision mode\n        setIsSupervisionOn(false);\n        writeToTerminal('\\r\\n\\x1b[32m⏹️ Supervision mode deactivated\\x1b[0m\\r\\n\\r\\n');\n        \n        // Stop all supervision sessions\n        const sessionsArray = Array.from(claudeSessions.entries());\n        for (const [sessionId, mode] of sessionsArray) {\n          if (mode === 'supervision') {\n            try {\n              await authenticatedFetch('/api/claude/session/stop', {\n                method: 'POST',\n                body: JSON.stringify({ sessionId })\n              });\n            } catch (e) {\n              console.error('Error stopping session:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('🔴 [DEBUG] CAUGHT ERROR in handleSupervisionToggle:', error);\n      console.error('🔴 [DEBUG] Error type:', typeof error);\n      console.error('🔴 [DEBUG] Error stack:', (error as any)?.stack);\n      console.error('🔴 [DEBUG] Error message:', (error as any)?.message);\n      writeToTerminal(`\\r\\n\\x1b[31m❌ Error: ${error}\\x1b[0m\\r\\n\\r\\n`);\n    }\n  };\n\n  // Handle Parallel Agents toggle\n  const handleParallelAgentsToggle = async () => {\n    try {\n      if (!isParallelAgents) {\n        // Check if Claude CLI is running first\n        const prompt = getClaudePrompt();\n        if (prompt === 'Help me build a modern web application with best practices') {\n          writeToTerminal('\\r\\n\\x1b[33m⚠️  Workflow Tip: Type \"claude\" first, then click Parallel Agents\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m💡 This ensures proper sub-agent delegation within your Claude session\\x1b[0m\\r\\n\\r\\n');\n          return;\n        }\n        \n        // Start parallel agents\n        const sessionId = `parallel-${Date.now()}`;\n        \n        console.log('📝 Prompt:', prompt);\n        console.log('🆔 Session ID:', sessionId);\n        console.log('🔌 Socket connected:', socketRef.current?.connected);\n        \n        writeToTerminal('\\r\\n\\x1b[36m🤖 Starting Parallel Agents...\\x1b[0m\\r\\n');\n        \n        // Register WebSocket for this session\n        if (socketRef.current && socketRef.current.connected) {\n          socketRef.current.emit('claude:button', { \n            action: 'parallel', \n            prompt, \n            sessionId \n          });\n        }\n        \n        // First register the socket to receive Claude output\n        if (socketRef.current && socketRef.current.connected) {\n          console.log('📡 Registering socket for session:', sessionId);\n          socketRef.current.emit('claude:register', { sessionId });\n        }\n        \n        // Small delay to ensure registration is processed\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('🚀 Calling API: /api/claude/parallel/start');\n        const response = await authenticatedFetch('/api/claude/parallel/start', {\n          method: 'POST',\n          body: JSON.stringify({ prompt, sessionId })\n        });\n        console.log('📨 API Response:', response.status, response.ok);\n        \n        if (response.ok) {\n          const data = await response.json();\n          setClaudeSessions(prev => new Map(prev).set(data.sessionId, 'parallel'));\n          setIsParallelAgents(true);\n          \n          writeToTerminal(`\\x1b[36mSession ID: ${data.sessionId}\\x1b[0m\\r\\n`);\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m🤖 Parallel Agents Active (3 agents)\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m  • Agent 1 - Architect: System design and structure\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m  • Agent 2 - Implementer: Core implementation\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m  • Agent 3 - Optimizer: Performance and best practices\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n\\r\\n');\n          writeToTerminal('\\x1b[33mAgents are working on your task...\\x1b[0m\\r\\n\\r\\n');\n        } else {\n          const error = await response.json();\n          writeToTerminal(`\\x1b[31m❌ Failed to start parallel agents: ${error.error}\\x1b[0m\\r\\n\\r\\n`);\n        }\n      } else {\n        // Stop parallel agents\n        setIsParallelAgents(false);\n        writeToTerminal('\\r\\n\\x1b[32m⏹️ Parallel Agents mode deactivated\\x1b[0m\\r\\n\\r\\n');\n        \n        // Stop all parallel sessions\n        const sessionsArray = Array.from(claudeSessions.entries());\n        for (const [sessionId, mode] of sessionsArray) {\n          if (mode === 'parallel') {\n            try {\n              await authenticatedFetch('/api/claude/session/stop', {\n                method: 'POST',\n                body: JSON.stringify({ sessionId })\n              });\n            } catch (e) {\n              console.error('Error stopping session:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Parallel agents toggle error:', error);\n      writeToTerminal(`\\r\\n\\x1b[31m❌ Error: ${error}\\x1b[0m\\r\\n\\r\\n`);\n    }\n  };\n\n  // Handle Infinite Loop toggle\n  const handleInfiniteLoopToggle = async () => {\n    try {\n      if (!isInfiniteLoop) {\n        // Start infinite loop - using new Claude endpoint\n        const prompt = getClaudePrompt();\n        const sessionId = `infinite-${Date.now()}`;\n        \n        writeToTerminal('\\r\\n\\x1b[33m♾️ Starting Infinite Loop mode...\\x1b[0m\\r\\n');\n        \n        // Register WebSocket for this session\n        if (socketRef.current && socketRef.current.connected) {\n          socketRef.current.emit('claude:button', { \n            action: 'infinite', \n            prompt, \n            sessionId \n          });\n        }\n        \n        const response = await authenticatedFetch('/api/claude/infinite/start', {\n          method: 'POST',\n          body: JSON.stringify({ prompt, sessionId })\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setInfiniteSessionId(data.sessionId);\n          setClaudeSessions(prev => new Map(prev).set(data.sessionId, 'infinite'));\n          setIsInfiniteLoop(true);\n          \n          // Register socket for Claude output with the actual session ID\n          if (socketRef.current && socketRef.current.connected) {\n            socketRef.current.emit('claude:register', { sessionId: data.sessionId });\n          }\n          \n          writeToTerminal(`\\x1b[36mSession ID: ${data.sessionId}\\x1b[0m\\r\\n`);\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m♾️ Infinite Loop Mode Active\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[33m• Claude will iteratively improve the solution\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[33m• Each iteration builds on the previous one\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[33m• Click \"Stop Loop\" to end the process\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n\\r\\n');\n        } else {\n          const error = await response.json();\n          writeToTerminal(`\\x1b[31m❌ Failed to start infinite loop: ${error.error}\\x1b[0m\\r\\n\\r\\n`);\n        }\n      } else {\n        // Stop infinite loop\n        if (infiniteSessionId) {\n          setIsStoppingInfinite(true);\n          writeToTerminal('\\r\\n\\x1b[33m⏳ Stopping infinite loop...\\x1b[0m\\r\\n');\n          \n          try {\n            const stopResponse = await authenticatedFetch('/api/claude/session/stop', {\n              method: 'POST',\n              body: JSON.stringify({ sessionId: infiniteSessionId })\n            });\n            \n            if (stopResponse.ok) {\n              writeToTerminal('\\r\\n\\x1b[32m✅ Infinite Loop stopped successfully\\x1b[0m\\r\\n\\r\\n');\n            } else {\n              writeToTerminal('\\r\\n\\x1b[33m⚠️ Infinite Loop stop request sent\\x1b[0m\\r\\n\\r\\n');\n            }\n          } catch (stopError) {\n            console.error('Error stopping infinite loop:', stopError);\n            writeToTerminal('\\r\\n\\x1b[33m⚠️ Could not confirm stop status\\x1b[0m\\r\\n\\r\\n');\n          } finally {\n            setIsStoppingInfinite(false);\n            setInfiniteSessionId(null);\n            setClaudeSessions(prev => {\n              const newMap = new Map(prev);\n              if (infiniteSessionId) {\n                newMap.delete(infiniteSessionId);\n              }\n              return newMap;\n            });\n          }\n        }\n        \n        setIsInfiniteLoop(false);\n        writeToTerminal('\\r\\n\\x1b[32m⏹️ Infinite Loop mode deactivated\\x1b[0m\\r\\n\\r\\n');\n      }\n    } catch (error) {\n      console.error('Infinite loop toggle error:', error);\n      writeToTerminal(`\\r\\n\\x1b[31m❌ Error: ${error}\\x1b[0m\\r\\n\\r\\n`);\n    }\n  };\n\n  // Handle Hivemind toggle\n  const handleHivemindToggle = async () => {\n    console.log('🧠 HIVEMIND BUTTON CLICKED!');\n    try {\n      if (!isHivemindActive) {\n        // Start Hivemind\n        const prompt = getClaudePrompt();\n        const sessionId = `hivemind-${Date.now()}`;\n        \n        writeToTerminal('\\r\\n\\x1b[36m🧠 Starting Hivemind collaboration...\\x1b[0m\\r\\n');\n        \n        // Register WebSocket for this session\n        if (socketRef.current && socketRef.current.connected) {\n          socketRef.current.emit('claude:button', { \n            action: 'hivemind', \n            prompt, \n            sessionId \n          });\n        }\n        \n        const response = await authenticatedFetch('/api/claude/hivemind/start', {\n          method: 'POST',\n          body: JSON.stringify({ prompt, sessionId })\n        });\n        \n        if (response.ok) {\n          const data = await response.json();\n          setClaudeSessions(prev => new Map(prev).set(data.sessionId, 'hivemind'));\n          setIsHivemindActive(true);\n          \n          // Register socket for Claude output with the actual session ID\n          if (socketRef.current && socketRef.current.connected) {\n            socketRef.current.emit('claude:register', { sessionId: data.sessionId });\n          }\n          \n          writeToTerminal(`\\x1b[36mSession ID: ${data.sessionId}\\x1b[0m\\r\\n`);\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m🧠 Hivemind Mode Active\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m• Phase 1: Architect designs the solution\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m• Phase 2: Implementer builds the code\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[36m• Phase 3: Reviewer validates and improves\\x1b[0m\\r\\n');\n          writeToTerminal('\\x1b[35m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\x1b[0m\\r\\n\\r\\n');\n        } else {\n          const error = await response.json();\n          writeToTerminal(`\\x1b[31m❌ Failed to start hivemind: ${error.error}\\x1b[0m\\r\\n\\r\\n`);\n        }\n      } else {\n        // Stop Hivemind\n        writeToTerminal('\\r\\n\\x1b[33m🛑 Stopping Hivemind collaboration...\\x1b[0m\\r\\n');\n        \n        // Find active hivemind session\n        const hivemindSession = Array.from(claudeSessions.entries()).find(([id, type]) => type === 'hivemind');\n        \n        if (hivemindSession) {\n          const [sessionId] = hivemindSession;\n          \n          const response = await authenticatedFetch('/api/claude/hivemind/stop', {\n            method: 'POST',\n            body: JSON.stringify({ sessionId })\n          });\n          \n          if (response.ok) {\n            setClaudeSessions(prev => {\n              const newSessions = new Map(prev);\n              newSessions.delete(sessionId);\n              return newSessions;\n            });\n            setIsHivemindActive(false);\n            writeToTerminal('\\x1b[32m✅ Hivemind collaboration stopped\\x1b[0m\\r\\n\\r\\n');\n          } else {\n            const error = await response.json();\n            writeToTerminal(`\\x1b[31m❌ Failed to stop hivemind: ${error.error}\\x1b[0m\\r\\n\\r\\n`);\n          }\n        } else {\n          setIsHivemindActive(false);\n          writeToTerminal('\\x1b[33m⚠️ No active hivemind session found\\x1b[0m\\r\\n\\r\\n');\n        }\n      }\n    } catch (error) {\n      console.error('Hivemind error:', error);\n      writeToTerminal(`\\r\\n\\x1b[31m❌ Error: ${error}\\x1b[0m\\r\\n\\r\\n`);\n    }\n  };\n\n  // Handle Emergency Stop - stop all AI operations\n  const handleEmergencyStop = async () => {\n    try {\n      setEmergencyStopActive(true);\n      writeToTerminal('\\r\\n\\x1b[31m🛑 EMERGENCY STOP - Terminating all AI operations...\\x1b[0m\\r\\n');\n      \n      // Stop all active modes\n      if (isSupervisionOn) {\n        await handleSupervisionToggle();\n      }\n      if (isParallelAgents) {\n        await handleParallelAgentsToggle();\n      }\n      if (isInfiniteLoop) {\n        await handleInfiniteLoopToggle();\n      }\n      if (isHivemindActive) {\n        await handleHivemindToggle();\n      }\n      \n      // Clear all Claude sessions\n      setClaudeSessions(new Map());\n      \n      // Show confirmation\n      writeToTerminal('\\x1b[32m✓ All AI operations have been terminated\\x1b[0m\\r\\n');\n      writeToTerminal('\\x1b[33m💡 You can restart any AI mode using the buttons above\\x1b[0m\\r\\n\\r\\n');\n      \n    } catch (error) {\n      console.error('Emergency stop error:', error);\n      writeToTerminal(`\\r\\n\\x1b[31m❌ Error during emergency stop: ${error}\\x1b[0m\\r\\n\\r\\n`);\n    } finally {\n      setEmergencyStopActive(false);\n    }\n  };\n\n  // Performance monitoring for WebSocket batching\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const queueSize = getQueueSize();\n      if (queueSize > 5) {\n        console.warn(`🚨 WebSocket queue size: ${queueSize} - forcing flush for performance`);\n        forceFlush();\n        \n        // Also force garbage collection if queue is backing up\n        if (queueSize > 10) {\n          terminalForceGC.forceGC();\n        }\n      }\n    }, 1000); // Check every second\n    \n    return () => clearInterval(interval);\n  }, [getQueueSize, forceFlush, terminalForceGC]);\n  \n  // Force flush on critical events\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      forceFlush();\n    };\n    \n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [forceFlush]);\n\n  return (\n    <div className=\"terminal\">\n      <div className=\"terminal-header\">\n        <div className=\"terminal-header-left\">\n          <VoiceInterface \n            onVoiceCommand={handleVoiceCommand}\n            disabled={false}\n          />\n        </div>\n        \n        <div className=\"terminal-header-center\">\n          <ThinkingModeToggle \n            value={thinkingMode || 'normal'}\n            onChange={onThinkingModeChange}\n            compact={true}\n          />\n          {isThinking && (\n            <div className=\"thinking-indicator\" style={{\n              display: 'inline-flex',\n              alignItems: 'center',\n              marginLeft: '12px',\n              padding: '4px 8px',\n              backgroundColor: 'rgba(251, 191, 36, 0.1)',\n              borderRadius: '4px',\n              border: '1px solid rgba(251, 191, 36, 0.3)',\n              animation: 'pulse 2s infinite'\n            }}>\n              <span style={{ \n                marginRight: '6px',\n                animation: 'spin 1s linear infinite',\n                display: 'inline-block'\n              }}>🧠</span>\n              <span style={{ \n                fontSize: '12px', \n                color: '#fbbf24',\n                fontWeight: '500'\n              }}>\n                Thinking...\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"terminal-header-right\">\n          <button \n            className={`terminal-control-btn ${(isSupervisionOn || isParallelAgents || isInfiniteLoop || isHivemindActive) ? 'active' : ''}`}\n            onClick={handleEmergencyStop}\n            disabled={emergencyStopActive || (!isSupervisionOn && !isParallelAgents && !isInfiniteLoop && !isHivemindActive)}\n            onMouseEnter={(e) => !emergencyStopActive && handleMouseEnter('emergency-stop', e)}\n            onMouseLeave={handleMouseLeave}\n            style={{ \n              zIndex: 9999, \n              position: 'relative', \n              pointerEvents: 'auto',\n              backgroundColor: (isSupervisionOn || isParallelAgents || isInfiniteLoop || isHivemindActive) ? '#ef4444' : undefined\n            }}\n          >\n            {emergencyStopActive ? 'Stopping...' : '🛑 Stop'}\n          </button>\n          <button \n            className={`terminal-control-btn ${isSupervisionOn ? 'active' : ''}`}\n            onClick={() => {\n              console.log('🟢 [BUTTON] Supervision button CLICKED!');\n              handleSupervisionToggle();\n            }}\n            onMouseEnter={(e) => handleMouseEnter('supervision', e)}\n            onMouseLeave={handleMouseLeave}\n            style={{ \n              zIndex: 9999, \n              position: 'relative',\n              pointerEvents: 'auto'\n            }}\n          >\n            {isSupervisionOn ? 'Stop Supervision' : 'Supervision'}\n          </button>\n          <button \n            className={`terminal-control-btn ${isParallelAgents ? 'active' : ''}`}\n            onClick={handleParallelAgentsToggle}\n            onMouseEnter={(e) => handleMouseEnter('parallel-agents', e)}\n            onMouseLeave={handleMouseLeave}\n            style={{ zIndex: 9999, position: 'relative', pointerEvents: 'auto' }}\n          >\n            {isParallelAgents ? 'Stop Agents' : 'Parallel Agents'}\n          </button>\n          <button \n            className={`terminal-control-btn ${isInfiniteLoop ? 'active' : ''}`}\n            onClick={handleInfiniteLoopToggle}\n            disabled={isStoppingInfinite}\n            onMouseEnter={(e) => handleMouseEnter('infinite-loop', e)}\n            onMouseLeave={handleMouseLeave}\n            style={{ zIndex: 9999, position: 'relative', pointerEvents: 'auto' }}\n          >\n            {isStoppingInfinite ? 'Stopping...' : isInfiniteLoop ? 'Stop Loop' : 'Infinite Loop'}\n          </button>\n          <button \n            className={`terminal-control-btn ${isHivemindActive ? 'active' : ''}`}\n            onClick={handleHivemindToggle}\n            onMouseEnter={(e) => handleMouseEnter('hivemind', e)}\n            onMouseLeave={handleMouseLeave}\n            style={{ zIndex: 9999, position: 'relative', pointerEvents: 'auto' }}\n          >\n            {isHivemindActive ? 'Stop Hivemind' : 'Hivemind'}\n          </button>\n        </div>\n      </div>\n      \n{/* UICommandBar removed - user doesn't want slider bars */}\n      \n      <div className=\"terminal-container\" ref={terminalRef}></div>\n      \n      {/* Error Doctor - AI-powered error analysis */}\n      <ErrorDoctor \n        socket={socketRef.current}\n        terminalId={sessionIdRef.current}\n        onApplyFix={(fix) => {\n          console.log('🔧 Terminal: Error Doctor applied fix:', fix);\n        }}\n      />\n      \n      {/* JavaScript-based tooltip */}\n      {hoveredButton && (() => {\n        console.log('🎯 Rendering tooltip for:', hoveredButton, 'Message:', getTooltipMessage(hoveredButton));\n        return (\n          <div\n            style={{\n              position: 'fixed',\n              left: tooltipPosition.x,\n              top: tooltipPosition.y,\n              transform: 'translateX(-50%)',\n              backgroundColor: 'rgba(0, 0, 0, 0.9)',\n              color: 'white',\n              padding: '8px 12px',\n              borderRadius: '4px',\n              fontSize: '12px',\n              fontWeight: 'normal',\n              whiteSpace: 'nowrap',\n              zIndex: 99999,\n              pointerEvents: 'none',\n              opacity: 1\n            }}\n          >\n            {getTooltipMessage(hoveredButton)}\n            {/* Arrow pointing up to button */}\n            <div\n              style={{\n                position: 'absolute',\n                top: '-6px',\n                left: '50%',\n                transform: 'translateX(-50%)',\n                borderLeft: '6px solid transparent',\n                borderRight: '6px solid transparent',\n                borderBottom: '6px solid rgba(0, 0, 0, 0.9)',\n                width: 0,\n                height: 0\n              }}\n            />\n          </div>\n        );\n      })()}\n    </div>\n  );\n};\n\nexport default Terminal;\nexport type { TerminalSessionData };"],"names":["_ref","onVoiceCommand","disabled","isListening","setIsListening","useState","isSupported","setIsSupported","transcript","setTranscript","status","setStatus","confidence","setConfidence","recognitionRef","useRef","timeoutRef","useEffect","SpeechRecognition","window","webkitSpeechRecognition","recognition","continuous","interimResults","lang","maxAlternatives","onstart","console","log","current","setTimeout","stop","onresult","event","result","results","command","toLowerCase","trim","processVoiceCommand","onerror","error","clearTimeout","onend","warn","useCallback","action","cleanCommand","includes","startsWith","replace","commonCommands","firstWord","split","original","clean","startListening","start","stopListening","handleMouseDown","handleMouseUp","handleMouseLeave","_jsx","className","children","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","title","getStatusText","_jsxs","THINKING_MODES","id","label","description","icon","estimatedTime","tokenMultiplier","value","onChange","compact","isEnabled","useFeatureFlag","selectedMode","setSelectedMode","showTooltip","setShowTooltip","showDropdown","setShowDropdown","dropdownRef","saved","localStorage","getItem","find","m","handleClickOutside","contains","target","document","addEventListener","removeEventListener","currentMode","handleModeChange","mode","setItem","getCurrentModeConfig","currentConfig","ref","onClick","e","preventDefault","stopPropagation","onMouseEnter","map","socket","terminalId","onApplyFix","analyses","setAnalyses","setIsEnabled","isVisible","setIsVisible","autoHideTimer","setAutoHideTimer","lastAppliedFix","setLastAppliedFix","async","response","fetch","data","json","success","enabled","checkStatus","handleErrorAnalysis","prev","slice","timer","handleFixApplied","_event$fix","fix","closeTimer","handleFixError","on","off","getConfidenceColor","getSourceIcon","source","aiServices","openai","anthropic","length","analysis","index","style","color","explanation","fixes","fixIndex","emit","sessionId","handleApplyFix","Date","timestamp","toLocaleTimeString","WebSocketBatcher","constructor","handler","config","queue","batchTimeout","messageCount","this","maxBatchSize","batchTimeoutMs","highPriorityTimeoutMs","maxQueueSize","addMessage","priority","arguments","undefined","message","now","push","scheduleFlush","flush","timeoutMs","sortedMessages","sort","a","b","priorityOrder","high","medium","low","priorityDiff","forceFlush","getQueueSize","destroy","TerminalBatcher","socketEmit","super","messages","grouped","Map","forEach","msg","has","set","get","dataArray","combinedInput","join","useWebSocketBatching","batcherRef","_batcherRef$current","thinkingMode","onThinkingModeChange","onTerminalDataChange","isTerminalConnected","setIsTerminalConnected","isSupervisionOn","setIsSupervisionOn","isParallelAgents","setIsParallelAgents","isInfiniteLoop","setIsInfiniteLoop","isHivemindActive","setIsHivemindActive","emergencyStopActive","setEmergencyStopActive","infiniteSessionId","setInfiniteSessionId","isStoppingInfinite","setIsStoppingInfinite","terminalForceGC","useGarbageCollection","xtermRef","dispose","fitAddonRef","socketRef","disconnect","componentName","isThinking","setIsThinking","currentThinkingMode","setCurrentThinkingMode","hoveredButton","setHoveredButton","tooltipPosition","setTooltipPosition","x","y","claudeSessions","setClaudeSessions","lastCommand","setLastCommand","commandHistory","setCommandHistory","terminalBuffer","setTerminalBuffer","terminalRef","sessionIdRef","batchedEmit","handleMouseEnter","buttonId","rect","currentTarget","getBoundingClientRect","left","width","bottom","getTooltipMessage","connectToBackend","socketUrl","location","hostname","io","transports","autoConnect","reconnection","reconnectionAttempts","reconnectionDelay","reconnectionDelayMax","timeout","_xtermRef$current","_xtermRef$current2","Math","random","toString","substr","cols","rows","clear","writeln","prdContext","sessionStorage","removeItem","write","exitCode","_ref2","timeEstimate","round","displayName","separator","repeat","_ref3","suggestion","_ref4","_ref5","duration","toFixed","newMap","sessionMode","delete","_ref6","terminal","XTerminal","theme","background","foreground","cursor","black","red","green","yellow","blue","magenta","cyan","white","brightBlack","brightRed","brightGreen","brightYellow","brightBlue","brightMagenta","brightCyan","brightWhite","fontFamily","fontSize","lineHeight","cursorBlink","allowTransparency","convertEol","screenReaderMode","macOptionIsMeta","rightClickSelectsWord","fitAddon","FitAddon","loadAddon","open","fit","focus","handleResize","resizeObserver","ResizeObserver","observe","initializeTerminal","commandBuffer","currentCommandBuffer","dataHandler","onData","connected","currentCommand","isUICommand","isAgentCommand","agentCommand","substring","parts","agentName","agentArgs","helpMessage","listMessage","taskDescription","authenticatedFetch","method","body","JSON","stringify","agent","prompt","context","then","ok","recommendations","rec","i","nextSteps","step","metadata","processingTime","catch","uiCommand","subcommand","args","_ref7","generateBasicComponent","component","name","Object","keys","props","postMessage","type","versionMessage","cmdParts","mainCommand","statusMessage","configMessage","costMessage","modelMessage","initMessage","reviewMessage","doctorMessage","process","version","charCodeAt","resizeTimeout","resizeHandler","onResize","_ref8","getClaudePrompt","currentInput","getTerminalHistory","buffer","active","content","startLine","max","endLine","line","getLine","translateToString","terminalData","terminalHistory","terminalCommands","writeToTerminal","text","handleVoiceCommand","endsWith","handleSupervisionToggle","cmd","handleEmergencyStop","sessionsArray","Array","from","entries","_socketRef$current","explicit","_data$sessionId","actualSessionId","once","errorMessage","parseError","stack","handleParallelAgentsToggle","_socketRef$current2","Promise","resolve","handleInfiniteLoopToggle","stopError","handleHivemindToggle","hivemindSession","_ref9","newSessions","interval","setInterval","queueSize","forceGC","clearInterval","handleBeforeUnload","VoiceInterface","ThinkingModeToggle","display","alignItems","marginLeft","padding","backgroundColor","borderRadius","border","animation","marginRight","fontWeight","zIndex","position","pointerEvents","ErrorDoctor","top","transform","whiteSpace","opacity","borderLeft","borderRight","borderBottom","height"],"sourceRoot":""}