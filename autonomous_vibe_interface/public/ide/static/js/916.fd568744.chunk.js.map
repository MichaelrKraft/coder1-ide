{"version":3,"file":"static/js/916.fd568744.chunk.js","mappings":"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","sources":["services/magic/DocumentationGenerator.ts"],"sourcesContent":["/**\n * Documentation Generator Service\n * Automatically generates comprehensive documentation for React components\n */\n\ninterface PropDocumentation {\n  name: string;\n  type: string;\n  required: boolean;\n  defaultValue?: string;\n  description: string;\n  examples?: string[];\n}\n\ninterface MethodDocumentation {\n  name: string;\n  parameters: Array<{\n    name: string;\n    type: string;\n    description?: string;\n  }>;\n  returnType: string;\n  description: string;\n  examples?: string[];\n}\n\ninterface ComponentDocumentation {\n  name: string;\n  description: string;\n  category?: string;\n  props: PropDocumentation[];\n  methods: MethodDocumentation[];\n  hooks?: string[];\n  dependencies?: string[];\n  examples: Array<{\n    title: string;\n    description?: string;\n    code: string;\n  }>;\n  bestPractices?: string[];\n  accessibility?: string[];\n  performance?: string[];\n  relatedComponents?: string[];\n  changelog?: Array<{\n    version: string;\n    date: string;\n    changes: string[];\n  }>;\n}\n\nexport class DocumentationGenerator {\n  /**\n   * Generate complete documentation for a component\n   */\n  generateDocumentation(componentCode: string, options?: {\n    includeExamples?: boolean;\n    includeBestPractices?: boolean;\n    includeAccessibility?: boolean;\n    includePerformance?: boolean;\n  }): ComponentDocumentation {\n    const componentName = this.extractComponentName(componentCode);\n    const props = this.extractPropsDocumentation(componentCode);\n    const methods = this.extractMethodsDocumentation(componentCode);\n    const hooks = this.extractHooks(componentCode);\n    const dependencies = this.extractDependencies(componentCode);\n    \n    const doc: ComponentDocumentation = {\n      name: componentName,\n      description: this.generateDescription(componentName, props, methods),\n      category: this.inferCategory(componentName, componentCode),\n      props,\n      methods,\n      hooks,\n      dependencies,\n      examples: options?.includeExamples !== false ? \n        this.generateExamples(componentName, props) : []\n    };\n\n    if (options?.includeBestPractices !== false) {\n      doc.bestPractices = this.generateBestPractices(componentName, props, methods);\n    }\n\n    if (options?.includeAccessibility !== false) {\n      doc.accessibility = this.generateAccessibilityGuidelines(componentCode);\n    }\n\n    if (options?.includePerformance !== false) {\n      doc.performance = this.generatePerformanceGuidelines(componentCode);\n    }\n\n    doc.relatedComponents = this.findRelatedComponents(componentName, componentCode);\n\n    return doc;\n  }\n\n  /**\n   * Generate Markdown documentation\n   */\n  generateMarkdown(doc: ComponentDocumentation): string {\n    let markdown = `# ${doc.name}\\n\\n`;\n    markdown += `${doc.description}\\n\\n`;\n\n    if (doc.category) {\n      markdown += `**Category:** ${doc.category}\\n\\n`;\n    }\n\n    // Table of Contents\n    markdown += `## Table of Contents\\n\\n`;\n    markdown += `- [Props](#props)\\n`;\n    if (doc.methods.length > 0) markdown += `- [Methods](#methods)\\n`;\n    if (doc.examples.length > 0) markdown += `- [Examples](#examples)\\n`;\n    if (doc.bestPractices) markdown += `- [Best Practices](#best-practices)\\n`;\n    if (doc.accessibility) markdown += `- [Accessibility](#accessibility)\\n`;\n    if (doc.performance) markdown += `- [Performance](#performance)\\n`;\n    if (doc.relatedComponents) markdown += `- [Related Components](#related-components)\\n`;\n    markdown += `\\n`;\n\n    // Props Section\n    markdown += `## Props\\n\\n`;\n    if (doc.props.length > 0) {\n      markdown += `| Prop | Type | Required | Default | Description |\\n`;\n      markdown += `|------|------|----------|---------|-------------|\\n`;\n      doc.props.forEach(prop => {\n        markdown += `| \\`${prop.name}\\` | \\`${prop.type}\\` | ${prop.required ? 'Yes' : 'No'} | ${prop.defaultValue ? `\\`${prop.defaultValue}\\`` : '-'} | ${prop.description} |\\n`;\n      });\n      markdown += `\\n`;\n\n      // Detailed prop documentation\n      doc.props.forEach(prop => {\n        if (prop.examples && prop.examples.length > 0) {\n          markdown += `### ${prop.name}\\n\\n`;\n          markdown += `${prop.description}\\n\\n`;\n          markdown += `**Type:** \\`${prop.type}\\`\\n\\n`;\n          if (prop.defaultValue) {\n            markdown += `**Default:** \\`${prop.defaultValue}\\`\\n\\n`;\n          }\n          markdown += `**Examples:**\\n\\n`;\n          prop.examples.forEach(example => {\n            markdown += `\\`\\`\\`jsx\\n${example}\\n\\`\\`\\`\\n\\n`;\n          });\n        }\n      });\n    } else {\n      markdown += `This component has no props.\\n\\n`;\n    }\n\n    // Methods Section\n    if (doc.methods.length > 0) {\n      markdown += `## Methods\\n\\n`;\n      doc.methods.forEach(method => {\n        markdown += `### ${method.name}\\n\\n`;\n        markdown += `${method.description}\\n\\n`;\n        \n        if (method.parameters.length > 0) {\n          markdown += `**Parameters:**\\n\\n`;\n          method.parameters.forEach(param => {\n            markdown += `- \\`${param.name}\\` (${param.type})${param.description ? `: ${param.description}` : ''}\\n`;\n          });\n          markdown += `\\n`;\n        }\n        \n        markdown += `**Returns:** \\`${method.returnType}\\`\\n\\n`;\n        \n        if (method.examples && method.examples.length > 0) {\n          markdown += `**Examples:**\\n\\n`;\n          method.examples.forEach(example => {\n            markdown += `\\`\\`\\`javascript\\n${example}\\n\\`\\`\\`\\n\\n`;\n          });\n        }\n      });\n    }\n\n    // Examples Section\n    if (doc.examples.length > 0) {\n      markdown += `## Examples\\n\\n`;\n      doc.examples.forEach(example => {\n        markdown += `### ${example.title}\\n\\n`;\n        if (example.description) {\n          markdown += `${example.description}\\n\\n`;\n        }\n        markdown += `\\`\\`\\`jsx\\n${example.code}\\n\\`\\`\\`\\n\\n`;\n      });\n    }\n\n    // Best Practices\n    if (doc.bestPractices && doc.bestPractices.length > 0) {\n      markdown += `## Best Practices\\n\\n`;\n      doc.bestPractices.forEach(practice => {\n        markdown += `- ${practice}\\n`;\n      });\n      markdown += `\\n`;\n    }\n\n    // Accessibility\n    if (doc.accessibility && doc.accessibility.length > 0) {\n      markdown += `## Accessibility\\n\\n`;\n      doc.accessibility.forEach(guideline => {\n        markdown += `- ${guideline}\\n`;\n      });\n      markdown += `\\n`;\n    }\n\n    // Performance\n    if (doc.performance && doc.performance.length > 0) {\n      markdown += `## Performance\\n\\n`;\n      doc.performance.forEach(guideline => {\n        markdown += `- ${guideline}\\n`;\n      });\n      markdown += `\\n`;\n    }\n\n    // Related Components\n    if (doc.relatedComponents && doc.relatedComponents.length > 0) {\n      markdown += `## Related Components\\n\\n`;\n      doc.relatedComponents.forEach(component => {\n        markdown += `- [${component}](#${component.toLowerCase()})\\n`;\n      });\n      markdown += `\\n`;\n    }\n\n    // Footer\n    markdown += `---\\n\\n`;\n    markdown += `*Documentation generated on ${new Date().toLocaleDateString()}*\\n`;\n\n    return markdown;\n  }\n\n  /**\n   * Generate JSDoc comments for component\n   */\n  generateJSDoc(doc: ComponentDocumentation): string {\n    let jsdoc = `/**\\n`;\n    jsdoc += ` * ${doc.description}\\n`;\n    jsdoc += ` * \\n`;\n    \n    if (doc.category) {\n      jsdoc += ` * @category ${doc.category}\\n`;\n    }\n    \n    jsdoc += ` * @component\\n`;\n    \n    // Document props\n    doc.props.forEach(prop => {\n      jsdoc += ` * @param {${prop.type}} ${prop.required ? '' : '['}props.${prop.name}${prop.required ? '' : ']'} - ${prop.description}`;\n      if (prop.defaultValue) {\n        jsdoc += ` (default: ${prop.defaultValue})`;\n      }\n      jsdoc += `\\n`;\n    });\n    \n    // Add examples\n    if (doc.examples.length > 0) {\n      jsdoc += ` * \\n`;\n      jsdoc += ` * @example\\n`;\n      const example = doc.examples[0];\n      example.code.split('\\n').forEach(line => {\n        jsdoc += ` * ${line}\\n`;\n      });\n    }\n    \n    jsdoc += ` */`;\n    \n    return jsdoc;\n  }\n\n  /**\n   * Generate Storybook stories\n   */\n  generateStorybookStories(doc: ComponentDocumentation): string {\n    let stories = `import type { Meta, StoryObj } from '@storybook/react';\\n`;\n    stories += `import ${doc.name} from './${doc.name}';\\n\\n`;\n    \n    stories += `const meta: Meta<typeof ${doc.name}> = {\\n`;\n    stories += `  title: '${doc.category || 'Components'}/${doc.name}',\\n`;\n    stories += `  component: ${doc.name},\\n`;\n    stories += `  parameters: {\\n`;\n    stories += `    layout: 'centered',\\n`;\n    stories += `    docs: {\\n`;\n    stories += `      description: {\\n`;\n    stories += `        component: '${doc.description}',\\n`;\n    stories += `      },\\n`;\n    stories += `    },\\n`;\n    stories += `  },\\n`;\n    stories += `  tags: ['autodocs'],\\n`;\n    \n    // Add argTypes for props\n    if (doc.props.length > 0) {\n      stories += `  argTypes: {\\n`;\n      doc.props.forEach(prop => {\n        stories += `    ${prop.name}: {\\n`;\n        stories += `      description: '${prop.description}',\\n`;\n        stories += `      control: { type: '${this.getStorybookControlType(prop.type)}' },\\n`;\n        if (prop.defaultValue) {\n          stories += `      defaultValue: ${prop.defaultValue},\\n`;\n        }\n        stories += `    },\\n`;\n      });\n      stories += `  },\\n`;\n    }\n    \n    stories += `};\\n\\n`;\n    stories += `export default meta;\\n`;\n    stories += `type Story = StoryObj<typeof meta>;\\n\\n`;\n    \n    // Generate stories for different states\n    stories += `export const Default: Story = {\\n`;\n    stories += `  args: {\\n`;\n    doc.props.forEach(prop => {\n      if (prop.defaultValue) {\n        stories += `    ${prop.name}: ${prop.defaultValue},\\n`;\n      }\n    });\n    stories += `  },\\n`;\n    stories += `};\\n\\n`;\n    \n    // Generate additional stories from examples\n    doc.examples.forEach((example, index) => {\n      const storyName = example.title.replace(/\\s+/g, '');\n      stories += `export const ${storyName}: Story = {\\n`;\n      stories += `  args: {\\n`;\n      // Extract props from example code\n      const propsFromExample = this.extractPropsFromExample(example.code);\n      Object.entries(propsFromExample).forEach(([key, value]) => {\n        stories += `    ${key}: ${JSON.stringify(value)},\\n`;\n      });\n      stories += `  },\\n`;\n      stories += `};\\n\\n`;\n    });\n    \n    return stories;\n  }\n\n  /**\n   * Extract component name from code\n   */\n  private extractComponentName(code: string): string {\n    const patterns = [\n      /(?:const|let|var)\\s+(\\w+)\\s*=/,\n      /function\\s+(\\w+)/,\n      /class\\s+(\\w+)/,\n      /export\\s+default\\s+(?:function|class)?\\s*(\\w+)/\n    ];\n    \n    for (const pattern of patterns) {\n      const match = code.match(pattern);\n      if (match && match[1]) {\n        return match[1];\n      }\n    }\n    \n    return 'Component';\n  }\n\n  /**\n   * Extract props documentation from code\n   */\n  private extractPropsDocumentation(code: string): PropDocumentation[] {\n    const props: PropDocumentation[] = [];\n    \n    // Look for TypeScript interface or type\n    const interfaceMatch = code.match(/interface\\s+\\w+Props\\s*{([^}]*)}/);\n    const typeMatch = code.match(/type\\s+\\w+Props\\s*=\\s*{([^}]*)}/);\n    \n    const propsContent = interfaceMatch?.[1] || typeMatch?.[1];\n    \n    if (propsContent) {\n      const propLines = propsContent.split(/[;,]\\s*/);\n      \n      propLines.forEach(line => {\n        const propMatch = line.match(/(\\w+)(\\?)?\\s*:\\s*([^;,]+)/);\n        if (propMatch) {\n          const [, name, optional, type] = propMatch;\n          props.push({\n            name,\n            type: type.trim(),\n            required: !optional,\n            description: this.generatePropDescription(name, type),\n            examples: this.generatePropExamples(name, type)\n          });\n        }\n      });\n    } else {\n      // Fallback: extract from function parameters\n      const paramMatch = code.match(/\\({\\s*([^}]+)\\s*}\\)/);\n      if (paramMatch) {\n        const params = paramMatch[1].split(',');\n        params.forEach(param => {\n          const [name, defaultValue] = param.trim().split('=').map(s => s.trim());\n          if (name) {\n            props.push({\n              name,\n              type: 'any',\n              required: !defaultValue,\n              defaultValue,\n              description: this.generatePropDescription(name, 'any')\n            });\n          }\n        });\n      }\n    }\n    \n    return props;\n  }\n\n  /**\n   * Extract methods documentation from code\n   */\n  private extractMethodsDocumentation(code: string): MethodDocumentation[] {\n    const methods: MethodDocumentation[] = [];\n    \n    // Find function declarations within component\n    const functionPattern = /const\\s+(\\w+)\\s*=\\s*\\(([^)]*)\\)\\s*=>/g;\n    let match;\n    \n    while ((match = functionPattern.exec(code)) !== null) {\n      const [, name, params] = match;\n      \n      // Skip React hooks\n      if (name.startsWith('use')) continue;\n      \n      const parameters = params ? params.split(',').map(p => {\n        const paramName = p.trim().split(':')[0].trim();\n        return {\n          name: paramName,\n          type: 'any',\n          description: `Parameter ${paramName}`\n        };\n      }) : [];\n      \n      methods.push({\n        name,\n        parameters,\n        returnType: 'void',\n        description: this.generateMethodDescription(name)\n      });\n    }\n    \n    return methods;\n  }\n\n  /**\n   * Extract hooks from component code\n   */\n  private extractHooks(code: string): string[] {\n    const hooks: string[] = [];\n    const hookPattern = /use[A-Z]\\w*/g;\n    const matches = code.match(hookPattern);\n    \n    if (matches) {\n      return Array.from(new Set(matches));\n    }\n    \n    return hooks;\n  }\n\n  /**\n   * Extract dependencies from component code\n   */\n  private extractDependencies(code: string): string[] {\n    const dependencies: string[] = [];\n    const importPattern = /import\\s+.*?\\s+from\\s+['\"]([^'\"]+)['\"]/g;\n    let match;\n    \n    while ((match = importPattern.exec(code)) !== null) {\n      const [, dep] = match;\n      if (!dep.startsWith('.') && !dep.startsWith('/')) {\n        dependencies.push(dep);\n      }\n    }\n    \n    return dependencies;\n  }\n\n  /**\n   * Generate component description\n   */\n  private generateDescription(name: string, props: PropDocumentation[], methods: MethodDocumentation[]): string {\n    let description = `${name} is a React component`;\n    \n    if (props.length > 0) {\n      description += ` that accepts ${props.length} prop${props.length > 1 ? 's' : ''}`;\n    }\n    \n    if (methods.length > 0) {\n      description += ` and provides ${methods.length} method${methods.length > 1 ? 's' : ''}`;\n    }\n    \n    description += '.';\n    \n    // Add more context based on component name\n    const nameLower = name.toLowerCase();\n    if (nameLower.includes('button')) {\n      description += ' It renders an interactive button element.';\n    } else if (nameLower.includes('form')) {\n      description += ' It handles form inputs and submission.';\n    } else if (nameLower.includes('modal')) {\n      description += ' It displays content in a modal overlay.';\n    } else if (nameLower.includes('list')) {\n      description += ' It renders a list of items.';\n    }\n    \n    return description;\n  }\n\n  /**\n   * Infer component category\n   */\n  private inferCategory(name: string, code: string): string {\n    const nameLower = name.toLowerCase();\n    \n    if (nameLower.includes('button') || nameLower.includes('link')) {\n      return 'Actions';\n    } else if (nameLower.includes('form') || nameLower.includes('input')) {\n      return 'Forms';\n    } else if (nameLower.includes('modal') || nameLower.includes('dialog')) {\n      return 'Overlays';\n    } else if (nameLower.includes('nav') || nameLower.includes('menu')) {\n      return 'Navigation';\n    } else if (nameLower.includes('card') || nameLower.includes('list')) {\n      return 'Data Display';\n    } else if (nameLower.includes('layout') || nameLower.includes('grid')) {\n      return 'Layout';\n    }\n    \n    return 'Components';\n  }\n\n  /**\n   * Generate prop description\n   */\n  private generatePropDescription(name: string, type: string): string {\n    const descriptions: Record<string, string> = {\n      className: 'Additional CSS class names to apply',\n      style: 'Inline styles to apply to the component',\n      children: 'Child elements to render inside the component',\n      onClick: 'Handler function called when the component is clicked',\n      onChange: 'Handler function called when the value changes',\n      disabled: 'Whether the component is disabled',\n      value: 'The current value of the component',\n      placeholder: 'Placeholder text to display',\n      title: 'Title text to display',\n      variant: 'Visual variant of the component',\n      size: 'Size variant of the component',\n      color: 'Color scheme of the component',\n      loading: 'Whether the component is in a loading state',\n      error: 'Error message to display',\n      onSubmit: 'Handler function called on form submission'\n    };\n    \n    return descriptions[name] || `The ${name} prop of type ${type}`;\n  }\n\n  /**\n   * Generate prop examples\n   */\n  private generatePropExamples(name: string, type: string): string[] {\n    const examples: string[] = [];\n    \n    if (type.includes('string')) {\n      examples.push(`${name}=\"example\"`);\n      examples.push(`${name}=\"Another example\"`);\n    } else if (type.includes('number')) {\n      examples.push(`${name}={42}`);\n      examples.push(`${name}={100}`);\n    } else if (type.includes('boolean')) {\n      examples.push(`${name}`);\n      examples.push(`${name}={false}`);\n    } else if (type.includes('function')) {\n      examples.push(`${name}={() => console.log('Clicked')}`);\n      examples.push(`${name}={handleClick}`);\n    }\n    \n    return examples;\n  }\n\n  /**\n   * Generate method description\n   */\n  private generateMethodDescription(name: string): string {\n    const descriptions: Record<string, string> = {\n      handleClick: 'Handles click events on the component',\n      handleSubmit: 'Handles form submission',\n      handleChange: 'Handles value changes',\n      validate: 'Validates the component state',\n      reset: 'Resets the component to its initial state',\n      toggle: 'Toggles the component state',\n      open: 'Opens the component',\n      close: 'Closes the component'\n    };\n    \n    return descriptions[name] || `${name} method`;\n  }\n\n  /**\n   * Generate examples\n   */\n  private generateExamples(name: string, props: PropDocumentation[]): ComponentDocumentation['examples'] {\n    const examples: ComponentDocumentation['examples'] = [];\n    \n    // Basic example\n    examples.push({\n      title: 'Basic Usage',\n      description: `Basic example of ${name} component`,\n      code: `<${name} />`\n    });\n    \n    // With props example\n    if (props.length > 0) {\n      const propsExample = props\n        .slice(0, 3)\n        .map(p => `  ${p.name}=\"${p.name}-value}\"`)\n        .join('\\n');\n      \n      examples.push({\n        title: 'With Props',\n        description: 'Example with common props',\n        code: `<${name}\\n${propsExample}\\n/>`\n      });\n    }\n    \n    // Advanced example\n    examples.push({\n      title: 'Advanced Usage',\n      description: 'Advanced example with event handlers',\n      code: `<${name}\n  onClick={() => console.log('Clicked')}\n  onHover={() => console.log('Hovered')}\n>\n  Content goes here\n</${name}>`\n    });\n    \n    return examples;\n  }\n\n  /**\n   * Generate best practices\n   */\n  private generateBestPractices(name: string, props: PropDocumentation[], methods: MethodDocumentation[]): string[] {\n    const practices: string[] = [];\n    \n    practices.push(`Always provide a unique key when rendering ${name} in a list`);\n    practices.push(`Use memoization (React.memo) if ${name} renders frequently`);\n    \n    if (props.some(p => p.name === 'onClick' || p.name === 'onChange')) {\n      practices.push('Use useCallback for event handlers to prevent unnecessary re-renders');\n    }\n    \n    if (props.some(p => p.required)) {\n      practices.push('Always provide required props to avoid runtime errors');\n    }\n    \n    practices.push('Consider using TypeScript for better type safety');\n    practices.push('Test the component with different prop combinations');\n    \n    return practices;\n  }\n\n  /**\n   * Generate accessibility guidelines\n   */\n  private generateAccessibilityGuidelines(code: string): string[] {\n    const guidelines: string[] = [];\n    \n    if (code.includes('button') || code.includes('Button')) {\n      guidelines.push('Ensure all buttons have accessible labels');\n      guidelines.push('Support keyboard navigation (Enter and Space keys)');\n    }\n    \n    if (code.includes('input') || code.includes('Input')) {\n      guidelines.push('Associate labels with form inputs');\n      guidelines.push('Provide clear error messages');\n    }\n    \n    guidelines.push('Include proper ARIA attributes when necessary');\n    guidelines.push('Ensure sufficient color contrast (4.5:1 for normal text)');\n    guidelines.push('Test with screen readers');\n    guidelines.push('Support keyboard-only navigation');\n    \n    return guidelines;\n  }\n\n  /**\n   * Generate performance guidelines\n   */\n  private generatePerformanceGuidelines(code: string): string[] {\n    const guidelines: string[] = [];\n    \n    if (code.includes('map(')) {\n      guidelines.push('Use unique and stable keys when rendering lists');\n    }\n    \n    if (code.includes('useState') || code.includes('useEffect')) {\n      guidelines.push('Optimize state updates to prevent unnecessary re-renders');\n      guidelines.push('Clean up effects to prevent memory leaks');\n    }\n    \n    guidelines.push('Consider lazy loading for heavy components');\n    guidelines.push('Use React.memo for pure components');\n    guidelines.push('Optimize images and assets');\n    guidelines.push('Debounce or throttle expensive operations');\n    \n    return guidelines;\n  }\n\n  /**\n   * Find related components\n   */\n  private findRelatedComponents(name: string, code: string): string[] {\n    const related: string[] = [];\n    \n    // Extract imported components\n    const importPattern = /import\\s+(\\w+)\\s+from\\s+['\"]\\.\\//g;\n    let match;\n    \n    while ((match = importPattern.exec(code)) !== null) {\n      const [, componentName] = match;\n      if (componentName !== name) {\n        related.push(componentName);\n      }\n    }\n    \n    // Add commonly related components based on name\n    const nameLower = name.toLowerCase();\n    if (nameLower.includes('button')) {\n      related.push('ButtonGroup', 'IconButton');\n    } else if (nameLower.includes('input')) {\n      related.push('Form', 'FormField', 'Label');\n    }\n    \n    return Array.from(new Set(related));\n  }\n\n  /**\n   * Get Storybook control type\n   */\n  private getStorybookControlType(type: string): string {\n    if (type.includes('boolean')) return 'boolean';\n    if (type.includes('number')) return 'number';\n    if (type.includes('string')) return 'text';\n    if (type.includes('function')) return 'action';\n    if (type.includes('array')) return 'array';\n    if (type.includes('object')) return 'object';\n    return 'text';\n  }\n\n  /**\n   * Extract props from example code\n   */\n  private extractPropsFromExample(code: string): Record<string, any> {\n    const props: Record<string, any> = {};\n    \n    // Simple regex to extract prop=\"value\" patterns\n    const propPattern = /(\\w+)=(?:{([^}]+)}|\"([^\"]+)\")/g;\n    let match;\n    \n    while ((match = propPattern.exec(code)) !== null) {\n      const [, name, jsValue, stringValue] = match;\n      props[name] = stringValue || jsValue;\n    }\n    \n    return props;\n  }\n}\n\nexport default DocumentationGenerator;"],"names":["generateDocumentation","componentCode","options","componentName","this","extractComponentName","props","extractPropsDocumentation","methods","extractMethodsDocumentation","hooks","extractHooks","dependencies","extractDependencies","doc","name","description","generateDescription","category","inferCategory","examples","includeExamples","generateExamples","includeBestPractices","bestPractices","generateBestPractices","includeAccessibility","accessibility","generateAccessibilityGuidelines","includePerformance","performance","generatePerformanceGuidelines","relatedComponents","findRelatedComponents","generateMarkdown","markdown","length","forEach","prop","type","required","defaultValue","example","method","parameters","param","returnType","title","code","practice","guideline","component","toLowerCase","Date","toLocaleDateString","generateJSDoc","jsdoc","split","line","generateStorybookStories","stories","getStorybookControlType","index","storyName","replace","propsFromExample","extractPropsFromExample","Object","entries","_ref","key","value","JSON","stringify","patterns","pattern","match","interfaceMatch","typeMatch","propsContent","propMatch","optional","push","trim","generatePropDescription","generatePropExamples","paramMatch","map","s","functionPattern","exec","params","startsWith","p","paramName","generateMethodDescription","matches","Array","from","Set","importPattern","dep","nameLower","includes","className","style","children","onClick","onChange","disabled","placeholder","variant","size","color","loading","error","onSubmit","handleClick","handleSubmit","handleChange","validate","reset","toggle","open","close","propsExample","slice","join","practices","some","guidelines","related","propPattern","jsValue","stringValue"],"sourceRoot":""}