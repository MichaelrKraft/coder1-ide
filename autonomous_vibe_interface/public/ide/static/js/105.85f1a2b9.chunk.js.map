{"version":3,"file":"static/js/105.85f1a2b9.chunk.js","mappings":"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","sources":["services/magic/FigmaIntegration.ts"],"sourcesContent":["/**\n * Figma Integration Service\n * Provides bidirectional sync between React components and Figma designs\n */\n\ninterface FigmaDesignToken {\n  colors: {\n    primary: string;\n    secondary: string;\n    background: string;\n    text: string;\n    [key: string]: string;\n  };\n  typography: {\n    fontFamily: string;\n    fontSize: {\n      xs: string;\n      sm: string;\n      md: string;\n      lg: string;\n      xl: string;\n    };\n    fontWeight: {\n      light: number;\n      regular: number;\n      medium: number;\n      bold: number;\n    };\n  };\n  spacing: {\n    xs: string;\n    sm: string;\n    md: string;\n    lg: string;\n    xl: string;\n  };\n  borderRadius: {\n    sm: string;\n    md: string;\n    lg: string;\n    full: string;\n  };\n}\n\ninterface FigmaComponent {\n  id: string;\n  name: string;\n  type: string;\n  properties: Record<string, any>;\n  children?: FigmaComponent[];\n  styles?: {\n    layout?: Record<string, any>;\n    fill?: Record<string, any>;\n    text?: Record<string, any>;\n    effects?: Record<string, any>;\n  };\n}\n\nexport class FigmaIntegration {\n  private apiKey?: string;\n  private fileId?: string;\n  private connected = false;\n\n  constructor(apiKey?: string, fileId?: string) {\n    this.apiKey = apiKey;\n    this.fileId = fileId;\n    this.connected = !!(apiKey && fileId);\n  }\n\n  /**\n   * Connect to Figma API\n   */\n  async connect(apiKey: string, fileId: string): Promise<boolean> {\n    try {\n      this.apiKey = apiKey;\n      this.fileId = fileId;\n      \n      // Validate connection\n      const response = await fetch(`https://api.figma.com/v1/files/${fileId}`, {\n        headers: {\n          'X-Figma-Token': apiKey\n        }\n      });\n      \n      if (response.ok) {\n        this.connected = true;\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Figma connection error:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Import design tokens from Figma\n   */\n  async importDesignTokens(): Promise<FigmaDesignToken | null> {\n    if (!this.connected) {\n      return this.getMockDesignTokens();\n    }\n\n    try {\n      const response = await fetch(`https://api.figma.com/v1/files/${this.fileId}/styles`, {\n        headers: {\n          'X-Figma-Token': this.apiKey!\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch Figma styles');\n      }\n\n      const data = await response.json();\n      return this.parseDesignTokens(data);\n    } catch (error) {\n      console.error('Error importing design tokens:', error);\n      return this.getMockDesignTokens();\n    }\n  }\n\n  /**\n   * Import component from Figma\n   */\n  async importComponent(nodeId: string): Promise<string | null> {\n    if (!this.connected) {\n      return this.generateMockComponent(nodeId);\n    }\n\n    try {\n      const response = await fetch(\n        `https://api.figma.com/v1/files/${this.fileId}/nodes?ids=${nodeId}`,\n        {\n          headers: {\n            'X-Figma-Token': this.apiKey!\n          }\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch Figma node');\n      }\n\n      const data = await response.json();\n      const node = data.nodes[nodeId];\n      \n      if (!node) {\n        throw new Error('Node not found');\n      }\n\n      return this.convertFigmaToReact(node.document);\n    } catch (error) {\n      console.error('Error importing Figma component:', error);\n      return this.generateMockComponent(nodeId);\n    }\n  }\n\n  /**\n   * Export React component to Figma format\n   */\n  exportToFigma(componentCode: string): FigmaComponent {\n    // Parse React component\n    const componentData = this.parseReactComponent(componentCode);\n    \n    // Convert to Figma format\n    return {\n      id: `component-${Date.now()}`,\n      name: componentData.name,\n      type: 'COMPONENT',\n      properties: {\n        description: 'Exported from React',\n        ...componentData.props\n      },\n      children: this.convertReactToFigmaNodes(componentData.jsx),\n      styles: this.extractStyles(componentCode)\n    };\n  }\n\n  /**\n   * Sync design tokens with component\n   */\n  syncDesignTokens(componentCode: string, tokens: FigmaDesignToken): string {\n    let updatedCode = componentCode;\n\n    // Replace color values\n    Object.entries(tokens.colors).forEach(([key, value]) => {\n      const regex = new RegExp(`color:\\\\s*['\"\\`]#[0-9a-fA-F]{3,8}['\"\\`]`, 'g');\n      updatedCode = updatedCode.replace(regex, (match) => {\n        if (key === 'primary' && match.includes('primary')) {\n          return `color: '${value}'`;\n        }\n        return match;\n      });\n    });\n\n    // Update typography\n    updatedCode = updatedCode.replace(\n      /fontFamily:\\s*['\"`][^'\"`]+['\"`]/g,\n      `fontFamily: '${tokens.typography.fontFamily}'`\n    );\n\n    // Update spacing\n    Object.entries(tokens.spacing).forEach(([key, value]) => {\n      const patterns = [\n        `padding-${key}`,\n        `margin-${key}`,\n        `gap-${key}`\n      ];\n      \n      patterns.forEach(pattern => {\n        const regex = new RegExp(`${pattern}`, 'g');\n        updatedCode = updatedCode.replace(regex, `${pattern.split('-')[0]}: '${value}'`);\n      });\n    });\n\n    return updatedCode;\n  }\n\n  /**\n   * Convert Figma node to React component\n   */\n  private convertFigmaToReact(node: any): string {\n    const componentName = this.sanitizeComponentName(node.name || 'Component');\n    const styles = this.extractFigmaStyles(node);\n    const children = this.renderFigmaChildren(node.children || []);\n\n    return `const ${componentName} = () => {\n  return (\n    <div style={${JSON.stringify(styles, null, 2)}}>\n      ${children}\n    </div>\n  );\n};\n\nexport default ${componentName};`;\n  }\n\n  /**\n   * Parse design tokens from Figma API response\n   */\n  private parseDesignTokens(data: any): FigmaDesignToken {\n    // This would parse actual Figma API response\n    // For now, return mock tokens\n    return this.getMockDesignTokens();\n  }\n\n  /**\n   * Get mock design tokens for development\n   */\n  private getMockDesignTokens(): FigmaDesignToken {\n    return {\n      colors: {\n        primary: '#3b82f6',\n        secondary: '#8b5cf6',\n        background: '#ffffff',\n        text: '#1f2937',\n        accent: '#f59e0b',\n        success: '#10b981',\n        error: '#ef4444'\n      },\n      typography: {\n        fontFamily: '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif',\n        fontSize: {\n          xs: '0.75rem',\n          sm: '0.875rem',\n          md: '1rem',\n          lg: '1.125rem',\n          xl: '1.25rem'\n        },\n        fontWeight: {\n          light: 300,\n          regular: 400,\n          medium: 500,\n          bold: 700\n        }\n      },\n      spacing: {\n        xs: '0.25rem',\n        sm: '0.5rem',\n        md: '1rem',\n        lg: '1.5rem',\n        xl: '2rem'\n      },\n      borderRadius: {\n        sm: '0.25rem',\n        md: '0.5rem',\n        lg: '1rem',\n        full: '9999px'\n      }\n    };\n  }\n\n  /**\n   * Generate mock component for development\n   */\n  private generateMockComponent(nodeId: string): string {\n    return `// Mock Figma Component (Node: ${nodeId})\nconst FigmaComponent = ({ title = \"Figma Import\", description = \"Component imported from Figma\" }) => {\n  return (\n    <div className=\"figma-component\" style={{\n      padding: '24px',\n      borderRadius: '12px',\n      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n      color: 'white',\n      boxShadow: '0 10px 30px rgba(0,0,0,0.2)'\n    }}>\n      <h2 style={{ fontSize: '24px', marginBottom: '12px' }}>{title}</h2>\n      <p style={{ fontSize: '16px', opacity: 0.9 }}>{description}</p>\n      <div style={{ marginTop: '20px', display: 'flex', gap: '12px' }}>\n        <button style={{\n          padding: '10px 20px',\n          background: 'white',\n          color: '#764ba2',\n          border: 'none',\n          borderRadius: '6px',\n          fontWeight: 'bold',\n          cursor: 'pointer'\n        }}>\n          Primary Action\n        </button>\n        <button style={{\n          padding: '10px 20px',\n          background: 'transparent',\n          color: 'white',\n          border: '2px solid white',\n          borderRadius: '6px',\n          fontWeight: 'bold',\n          cursor: 'pointer'\n        }}>\n          Secondary Action\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FigmaComponent;`;\n  }\n\n  /**\n   * Parse React component structure\n   */\n  private parseReactComponent(code: string): any {\n    // Simple parser for React components\n    const nameMatch = code.match(/(?:const|function|class)\\s+(\\w+)/);\n    const name = nameMatch ? nameMatch[1] : 'Component';\n    \n    // Extract props\n    const propsMatch = code.match(/\\(?\\s*{\\s*([^}]+)\\s*}\\s*\\)?/);\n    const props = propsMatch ? this.parseProps(propsMatch[1]) : {};\n    \n    // Extract JSX\n    const jsxMatch = code.match(/return\\s*\\(([\\s\\S]*?)\\);/);\n    const jsx = jsxMatch ? jsxMatch[1] : '<div>Component</div>';\n    \n    return { name, props, jsx };\n  }\n\n  /**\n   * Parse component props\n   */\n  private parseProps(propsString: string): Record<string, any> {\n    const props: Record<string, any> = {};\n    const propPairs = propsString.split(',');\n    \n    propPairs.forEach(pair => {\n      const [key, value] = pair.split('=').map(s => s.trim());\n      if (key) {\n        props[key] = value || true;\n      }\n    });\n    \n    return props;\n  }\n\n  /**\n   * Convert React JSX to Figma nodes\n   */\n  private convertReactToFigmaNodes(jsx: string): FigmaComponent[] {\n    // Simplified conversion - in reality would parse JSX AST\n    return [{\n      id: `node-${Date.now()}`,\n      name: 'Container',\n      type: 'FRAME',\n      properties: {\n        fills: [{ type: 'SOLID', color: { r: 1, g: 1, b: 1, a: 1 } }]\n      }\n    }];\n  }\n\n  /**\n   * Extract styles from component code\n   */\n  private extractStyles(code: string): Record<string, any> {\n    const styles: Record<string, any> = {};\n    \n    // Extract inline styles\n    const styleRegex = /style\\s*=\\s*{({[^}]+})}/g;\n    let match;\n    while ((match = styleRegex.exec(code)) !== null) {\n      try {\n        const styleObj = eval(`(${match[1]})`);\n        Object.assign(styles, styleObj);\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return {\n      layout: {\n        flexDirection: styles.flexDirection || 'column',\n        alignItems: styles.alignItems || 'flex-start',\n        justifyContent: styles.justifyContent || 'flex-start'\n      },\n      fill: {\n        backgroundColor: styles.backgroundColor || '#ffffff'\n      }\n    };\n  }\n\n  /**\n   * Extract Figma node styles\n   */\n  private extractFigmaStyles(node: any): Record<string, any> {\n    const styles: Record<string, any> = {};\n    \n    if (node.fills && node.fills[0]) {\n      const fill = node.fills[0];\n      if (fill.type === 'SOLID') {\n        styles.backgroundColor = `rgba(${fill.color.r * 255}, ${fill.color.g * 255}, ${fill.color.b * 255}, ${fill.color.a})`;\n      }\n    }\n    \n    if (node.absoluteBoundingBox) {\n      styles.width = `${node.absoluteBoundingBox.width}px`;\n      styles.height = `${node.absoluteBoundingBox.height}px`;\n    }\n    \n    return styles;\n  }\n\n  /**\n   * Render Figma children as JSX\n   */\n  private renderFigmaChildren(children: any[]): string {\n    if (!children || children.length === 0) {\n      return '';\n    }\n    \n    return children.map(child => {\n      if (child.type === 'TEXT') {\n        return child.characters || '';\n      }\n      return '<div>Child Component</div>';\n    }).join('\\n      ');\n  }\n\n  /**\n   * Sanitize component name\n   */\n  private sanitizeComponentName(name: string): string {\n    return name\n      .replace(/[^a-zA-Z0-9]/g, '')\n      .replace(/^[0-9]/, '_$&')\n      || 'Component';\n  }\n}\n\nexport default FigmaIntegration;"],"names":["FigmaIntegration","constructor","apiKey","fileId","connected","this","connect","fetch","headers","ok","error","console","importDesignTokens","getMockDesignTokens","response","Error","data","json","parseDesignTokens","importComponent","nodeId","generateMockComponent","node","nodes","convertFigmaToReact","document","exportToFigma","componentCode","componentData","parseReactComponent","id","Date","now","name","type","properties","description","props","children","convertReactToFigmaNodes","jsx","styles","extractStyles","syncDesignTokens","tokens","updatedCode","Object","entries","colors","forEach","_ref","key","value","regex","RegExp","replace","match","includes","typography","fontFamily","spacing","_ref2","pattern","split","componentName","sanitizeComponentName","extractFigmaStyles","renderFigmaChildren","JSON","stringify","primary","secondary","background","text","accent","success","fontSize","xs","sm","md","lg","xl","fontWeight","light","regular","medium","bold","borderRadius","full","code","nameMatch","propsMatch","parseProps","jsxMatch","propsString","pair","map","s","trim","fills","color","r","g","b","a","styleRegex","exec","styleObj","eval","assign","e","layout","flexDirection","alignItems","justifyContent","fill","backgroundColor","absoluteBoundingBox","width","height","length","child","characters","join"],"sourceRoot":""}